@Pass{
FS_PREC(mediump,float)
@Disable(DEPTH_TEST)
@ExposeMacro(int,march,MAX_MARCH,64)
varying vec2 vUV;
#ifdef VS
  attribute vec3 position;

  attribute vec2 texCoord;
  uniform mat4 _matPVM;
  void main(){
    gl_Position =  vec4(position,1);
    vUV = texCoord;
  }
#endif

#ifdef FS

uniform float _time;
@{default:100,range:"100,10000"}
uniform float slowness;
#define time _time/slowness

@{default:"blue",type:"color"}
uniform vec3 baseColor1;

@{default:"green",type:"color"}
uniform vec3 baseColor2;

@{default:0.4,range:"0,10"}
uniform float grid;

@{default:0.175,range:"0,10"}
uniform float cubeSize;

@{default:1000,range:"0,1000"}
uniform float dParam;

@{default:0.1,range:"0,1"}
uniform float rh;

float sdBox( vec2 p, vec2 b )
{
  vec2 d = abs(p) - b;
  return min(max(d.x,d.y),0.0) + length(max(d,0.0));
}


vec3 nrand3( vec2 co )
{
	vec3 a = fract( cos( co.x*8.3e-3 + co.y )*vec3(1.3e5, 4.7e5, 2.9e5) );
	vec3 b = fract( sin( co.x*0.3e-3 + co.y )*vec3(8.1e5, 1.0e5, 0.1e5) );
	vec3 c = mix(a, b, 0.5);
	return c;
}

float map(vec3 p)
{
    float h = 1.8;
    float grid_half = grid*0.5;
    float cube = cubeSize;
    vec3 orig = p;
    float rh2 = rh * sin(time/10.);
    vec3 g1 = vec3(ceil((orig.x)/grid), ceil((orig.y)/grid), ceil((orig.z)/grid));
    vec3 rxz =  nrand3(g1.xz);
    vec3 ryz =  nrand3(g1.yz);

    p = -abs(p);
    vec3 di = ceil(p/dParam);
    p.y += di.x*1.0;
    p.x += di.y*1.2;
    p.xy = mod(p.xy, -dParam);

    vec2 gap = vec2(rxz.x*rh2, ryz.y*rh2);
    float d1 = p.y + h + gap.x;
    float d2 = p.x + h + gap.y;

    vec2 p1 = mod(p.xz, vec2(grid)) - vec2(grid_half);
    float c1 = sdBox(p1,vec2(cube));

    vec2 p2 = mod(p.yz, vec2(grid)) - vec2(grid_half);
    float c2 = sdBox(p2,vec2(cube));

    return max(max(c1,d1), max(c2,d2));
}



vec3 genNormal(vec3 p)
{
    const float d = 0.01;
    return normalize( vec3(
        map(p+vec3(  d,0.0,0.0))-map(p+vec3( -d,0.0,0.0)),
        map(p+vec3(0.0,  d,0.0))-map(p+vec3(0.0, -d,0.0)),
        map(p+vec3(0.0,0.0,  d))-map(p+vec3(0.0,0.0, -d)) ));
}

void main()
{
    vec2 pos = vUV;
    vec3 camPos = vec3(-0.5,0.0,3.0);
    vec3 camDir = normalize(vec3(pow(cos(sin(time/1000.)),3.), pow(cos(time/1000.),10.), -1.0));
    //camPos -=  vec3(cos(time),sin(time),time*2.0);
    vec3 camUp  = normalize(vec3(sin(time/100.), cos(time/1000.), 0.0));
    vec3 camSide = cross(camDir, camUp);
    float focus = 1.8;

    vec3 rayDir = normalize(camSide*pos.x + camUp*pos.y + camDir*focus);
    vec3 ray = camPos;
    int march = 0;
    float d = 0.0;

    float total_d = 0.0;
    const float MAX_DIST = 100.0;
    for(int mi=0; mi<MAX_MARCH; ++mi) {
        d = map(ray);
        march=mi;
        total_d += d;
        ray += rayDir * d;
        if(d<0.001) {break; }
        if(total_d>MAX_DIST) {
            total_d = MAX_DIST;
            march = MAX_MARCH-1;
            break;
        }
    }

    float glow = 0.0;

    float fog = min(1.0, (1.0 / float(MAX_MARCH)) * float(march))*1.0;
    vec3  fog2 = 0.01 * vec3(3, 4, 5) * total_d;
    vec3 color = mix(baseColor1,baseColor2,abs(sin(time/100.)));
    vec3 resultColor = pow(color*fog + fog2,vec3(2.)) * 0.6 + vec3(0.4);
    gl_FragColor = vec4(resultColor, 1.0);
}


#endif
}
