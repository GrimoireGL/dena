(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 10);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = __webpack_require__(1);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ContainerComponent = function (_Component) {
    _inherits(ContainerComponent, _Component);

    function ContainerComponent() {
        _classCallCheck(this, ContainerComponent);

        return _possibleConstructorReturn(this, (ContainerComponent.__proto__ || Object.getPrototypeOf(ContainerComponent)).apply(this, arguments));
    }

    _createClass(ContainerComponent, [{
        key: "$mount",
        value: function $mount() {
            this.targetElement = this.generateTag();
            var parentContainer = this.node.getComponentInAncestor(ContainerComponent);
            if (parentContainer) {
                this._parent = parentContainer.targetElement;
            } else {
                this._parent = document.querySelector(this.getAttribute("defaultContainer"));
            }
            var className = this.node.getAttribute("class");
            if (className) {
                this.targetElement.className = className.reduce(function (a, b) {
                    return a + " " + b;
                });
            }
            var idName = this.node.getAttribute("id");
            if (idName) {
                this.targetElement.id = idName;
            }
            this.targetElement.style.visibility = "collapse";
            this._parent.appendChild(this.targetElement);
        }
    }, {
        key: "generateTag",
        value: function generateTag() {
            return document.createElement("div");
        }
    }, {
        key: "$buildStart",
        value: function $buildStart(buildIndex) {
            if (this.getAttribute("inBuild") === buildIndex) {
                this.targetElement.style.visibility = "visible";
                this.targetElement.style.opacity = "1";
            }
            if (buildIndex === this.getAttribute("outBuild")) {
                this.targetElement.style.visibility = "collapse";
            }
        }
    }, {
        key: "$buildProgress",
        value: function $buildProgress(args) {
            if (this.getAttribute("inBuild") === args.buildIndex) {
                this.targetElement.style.visibility = "visible";
                this.targetElement.style.opacity = args.progress + "";
            }
        }
    }, {
        key: "$slideEnd",
        value: function $slideEnd() {
            this.targetElement.style.visibility = "collapse";
        }
    }]);

    return ContainerComponent;
}(_Component3.default);

exports.default = ContainerComponent;

ContainerComponent.attributes = {
    inBuild: {
        converter: "Number",
        default: 0
    },
    outBuild: {
        converter: "Number",
        default: Number.MAX_SAFE_INTEGER
    },
    defaultContainer: {
        converter: "String",
        default: "div#paragraph-root"
    }
};

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.Node.Component;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ContainerComponent2 = __webpack_require__(0);

var _ContainerComponent3 = _interopRequireDefault(_ContainerComponent2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

var EditorComponent = function (_ContainerComponent) {
    _inherits(EditorComponent, _ContainerComponent);

    function EditorComponent() {
        _classCallCheck(this, EditorComponent);

        return _possibleConstructorReturn(this, (EditorComponent.__proto__ || Object.getPrototypeOf(EditorComponent)).apply(this, arguments));
    }

    _createClass(EditorComponent, [{
        key: "_readText",
        value: function _readText(url) {
            return new Promise(function (resolve, reject) {
                var xhr = new XMLHttpRequest();
                xhr.open("GET", "" + url);
                xhr.addEventListener("load", function () {
                    resolve(xhr.responseText);
                });
                xhr.send();
            });
        }
    }, {
        key: "_configure",
        value: function _configure() {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (!EditorComponent._configured) {
                                    _context.next = 2;
                                    break;
                                }

                                return _context.abrupt("return");

                            case 2:
                                _context.t0 = monaco.languages.typescript.javascriptDefaults;
                                _context.next = 5;
                                return this._readText("jquery.d.ts");

                            case 5:
                                _context.t1 = _context.sent;

                                _context.t0.addExtraLib.call(_context.t0, _context.t1);

                                _context.t2 = monaco.languages.typescript.javascriptDefaults;
                                _context.next = 10;
                                return this._readText("grimoire.d.ts");

                            case 10:
                                _context.t3 = _context.sent;

                                _context.t2.addExtraLib.call(_context.t2, _context.t3);

                                EditorComponent._configured = true;

                            case 13:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }, {
        key: "_createEditor",
        value: function _createEditor(container, buttonElem) {
            window["require"].config({ paths: { 'vs': 'libs/monaco-editor/min/vs' } });
            var that = this;
            this._readText(this.getAttribute("src")).then(function (text) {
                window["require"](['vs/editor/editor.main'], function () {
                    var editor = monaco.editor.create(container, {
                        value: text,
                        readOnly: false,
                        language: that.getAttribute("language"),
                        scrollBeyondLastLine: false,
                        automaticLayout: true,
                        fontSize: 20,
                        scrollbar: {
                            handleMouseWheel: true
                        },
                        theme: "vs-dark"
                    });
                    if (that.getAttribute("language") === "javascript") {
                        buttonElem.addEventListener("click", function () {
                            eval(editor.getValue());
                        });
                    }
                    buttonElem.addEventListener("click", function () {
                        that.node.emit("execute", editor.getValue());
                    });
                    this.editor = editor;
                    that._configure();
                });
            });
        }
    }, {
        key: "generateTag",
        value: function generateTag() {
            var container = document.createElement("div");
            var containerContainer = document.createElement("div");
            containerContainer.className = "single-editor-container-outer";
            containerContainer.appendChild(container);
            container.className = "single-editor-container";
            var buttonContainer = document.createElement("div");
            buttonContainer.className = "button-container";
            if (!this.getAttribute("runButton")) {
                buttonContainer.style.visibility = "hidden";
            }
            var buttonInnerContainer = document.createElement("div");
            buttonInnerContainer.className = "button-inner-container";
            var buttonSelf = document.createElement("p");
            buttonSelf.innerText = "RUN";
            buttonInnerContainer.appendChild(buttonSelf);
            buttonContainer.appendChild(buttonInnerContainer);
            container.appendChild(buttonContainer);
            var actualContainer = document.createElement("div");
            actualContainer.className = "actual-editor-container";
            container.appendChild(actualContainer);
            this._createEditor(actualContainer, buttonInnerContainer);
            return containerContainer;
        }
    }]);

    return EditorComponent;
}(_ContainerComponent3.default);

exports.default = EditorComponent;

EditorComponent._configured = false;
EditorComponent.attributes = {
    source: {
        default: "",
        converter: "String"
    },
    inBuild: {
        converter: "Number",
        default: 0
    },
    outBuild: {
        converter: "Number",
        default: Number.MAX_SAFE_INTEGER
    },
    defaultContainer: {
        converter: "String",
        default: "div#editor-root"
    },
    language: {
        converter: "String",
        default: "javascript"
    },
    src: {
        converter: "String",
        default: ""
    },
    runButton: {
        converter: "Boolean",
        default: false
    }
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _ContainerComponent2 = __webpack_require__(0);

var _ContainerComponent3 = _interopRequireDefault(_ContainerComponent2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ImageComponent = function (_ContainerComponent) {
    _inherits(ImageComponent, _ContainerComponent);

    function ImageComponent() {
        _classCallCheck(this, ImageComponent);

        return _possibleConstructorReturn(this, (ImageComponent.__proto__ || Object.getPrototypeOf(ImageComponent)).apply(this, arguments));
    }

    _createClass(ImageComponent, [{
        key: "$mount",
        value: function $mount() {
            _get(ImageComponent.prototype.__proto__ || Object.getPrototypeOf(ImageComponent.prototype), "$mount", this).call(this);
            var img = this.targetElement;
            img.src = this.getAttribute("src");
        }
    }, {
        key: "generateTag",
        value: function generateTag() {
            return document.createElement("img");
        }
    }]);

    return ImageComponent;
}(_ContainerComponent3.default);

exports.default = ImageComponent;

ImageComponent.attributes = {
    src: {
        default: "",
        converter: "String"
    },
    inBuild: {
        converter: "Number",
        default: 0
    },
    outBuild: {
        converter: "Number",
        default: Number.MAX_SAFE_INTEGER
    },
    defaultContainer: {
        converter: "String",
        default: "div#paragraph-root"
    }
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _ContainerComponent2 = __webpack_require__(0);

var _ContainerComponent3 = _interopRequireDefault(_ContainerComponent2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ParagraphComponent = function (_ContainerComponent) {
    _inherits(ParagraphComponent, _ContainerComponent);

    function ParagraphComponent() {
        _classCallCheck(this, ParagraphComponent);

        return _possibleConstructorReturn(this, (ParagraphComponent.__proto__ || Object.getPrototypeOf(ParagraphComponent)).apply(this, arguments));
    }

    _createClass(ParagraphComponent, [{
        key: "$mount",
        value: function $mount() {
            _get(ParagraphComponent.prototype.__proto__ || Object.getPrototypeOf(ParagraphComponent.prototype), "$mount", this).call(this);
            this.targetElement.innerText = this.getAttribute("text");
        }
    }, {
        key: "generateTag",
        value: function generateTag() {
            return document.createElement("p");
        }
    }]);

    return ParagraphComponent;
}(_ContainerComponent3.default);

exports.default = ParagraphComponent;

ParagraphComponent.attributes = {
    text: {
        default: "",
        converter: "String"
    },
    inBuild: {
        converter: "Number",
        default: 0
    },
    outBuild: {
        converter: "Number",
        default: Number.MAX_SAFE_INTEGER
    },
    defaultContainer: {
        converter: "String",
        default: "div#paragraph-root"
    }
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = __webpack_require__(1);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ProgressSeeker = function (_Component) {
    _inherits(ProgressSeeker, _Component);

    function ProgressSeeker() {
        _classCallCheck(this, ProgressSeeker);

        return _possibleConstructorReturn(this, (ProgressSeeker.__proto__ || Object.getPrototypeOf(ProgressSeeker)).apply(this, arguments));
    }

    _createClass(ProgressSeeker, [{
        key: "$mount",
        value: function $mount() {
            this.inBuild = this.getAttribute("inBuild");
        }
    }, {
        key: "$slideStart",
        value: function $slideStart() {
            this.node.setAttribute("progress", 0);
        }
    }, {
        key: "$buildProgress",
        value: function $buildProgress(args) {
            if (this.inBuild === args.buildIndex) {
                this.node.setAttribute("progress", args.progress);
            }
        }
    }]);

    return ProgressSeeker;
}(_Component3.default);

exports.default = ProgressSeeker;

ProgressSeeker.attributes = {
    inBuild: {
        default: 1,
        converter: "Number"
    }
};

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = __webpack_require__(1);

var _Component3 = _interopRequireDefault(_Component2);

var _TransformComponent = __webpack_require__(12);

var _TransformComponent2 = _interopRequireDefault(_TransformComponent);

var _Quaternion = __webpack_require__(15);

var _Quaternion2 = _interopRequireDefault(_Quaternion);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 定速回転のためのコンポーネント
 */
var Rotate = function (_Component) {
    _inherits(Rotate, _Component);

    function Rotate() {
        _classCallCheck(this, Rotate);

        return _possibleConstructorReturn(this, (Rotate.__proto__ || Object.getPrototypeOf(Rotate)).apply(this, arguments));
    }

    _createClass(Rotate, [{
        key: "$mount",
        value: function $mount() {
            this._transform = this.node.getComponent(_TransformComponent2.default);
        }
    }, {
        key: "$update",
        value: function $update() {
            this._transform.rotation = _Quaternion2.default.multiply(this._transform.rotation, _Quaternion2.default.euler(0, this.getAttribute("speed"), 0));
        }
    }]);

    return Rotate;
}(_Component3.default);
/**
 * このコンポーネントが持つ属性
 */


exports.default = Rotate;
Rotate.attributes = {
    speed: {
        converter: "String",
        default: 0.01
    }
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _ContainerComponent2 = __webpack_require__(0);

var _ContainerComponent3 = _interopRequireDefault(_ContainerComponent2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var VideoComponent = function (_ContainerComponent) {
    _inherits(VideoComponent, _ContainerComponent);

    function VideoComponent() {
        _classCallCheck(this, VideoComponent);

        return _possibleConstructorReturn(this, (VideoComponent.__proto__ || Object.getPrototypeOf(VideoComponent)).apply(this, arguments));
    }

    _createClass(VideoComponent, [{
        key: "$mount",
        value: function $mount() {
            _get(VideoComponent.prototype.__proto__ || Object.getPrototypeOf(VideoComponent.prototype), "$mount", this).call(this);
            var video = this.targetElement;
            video.src = this.getAttribute("src");
            video.loop = true;
            this.video = video;
        }
    }, {
        key: "$slideStart",
        value: function $slideStart() {
            this.video.play();
        }
    }, {
        key: "generateTag",
        value: function generateTag() {
            return document.createElement("video");
        }
    }]);

    return VideoComponent;
}(_ContainerComponent3.default);

exports.default = VideoComponent;

VideoComponent.attributes = {
    inBuild: {
        converter: "Number",
        default: 0
    },
    src: {
        converter: "String",
        default: 0
    },
    outBuild: {
        converter: "Number",
        default: Number.MAX_SAFE_INTEGER
    },
    defaultContainer: {
        converter: "String",
        default: "div#paragraph-root"
    }
};

/***/ }),
/* 8 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

__webpack_require__(18);

__webpack_require__(16);

__webpack_require__(13);

__webpack_require__(11);

__webpack_require__(14);

__webpack_require__(17);

var _grimoirejs = __webpack_require__(8);

var _grimoirejs2 = _interopRequireDefault(_grimoirejs);

var _ParagraphComponent = __webpack_require__(4);

var _ParagraphComponent2 = _interopRequireDefault(_ParagraphComponent);

var _ContainerComponent = __webpack_require__(0);

var _ContainerComponent2 = _interopRequireDefault(_ContainerComponent);

var _ImageComponent = __webpack_require__(3);

var _ImageComponent2 = _interopRequireDefault(_ImageComponent);

var _ProgressSeeker = __webpack_require__(5);

var _ProgressSeeker2 = _interopRequireDefault(_ProgressSeeker);

var _VideoComponent = __webpack_require__(7);

var _VideoComponent2 = _interopRequireDefault(_VideoComponent);

var _EditorComponent = __webpack_require__(2);

var _EditorComponent2 = _interopRequireDefault(_EditorComponent);

var _Rotate = __webpack_require__(6);

var _Rotate2 = _interopRequireDefault(_Rotate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

exports.default = function () {
    _grimoirejs2.default.register(function () {
        return __awaiter(undefined, void 0, void 0, regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _grimoirejs2.default.registerComponent("Paragraph", _ParagraphComponent2.default);
                            _grimoirejs2.default.registerComponent("Container", _ContainerComponent2.default);
                            _grimoirejs2.default.registerComponent("Image", _ImageComponent2.default);
                            _grimoirejs2.default.registerComponent("ProgressSeeker", _ProgressSeeker2.default);
                            _grimoirejs2.default.registerComponent("Video", _VideoComponent2.default);
                            _grimoirejs2.default.registerComponent("Rotate", _Rotate2.default);
                            _grimoirejs2.default.registerComponent("Editor", _EditorComponent2.default);
                            _grimoirejs2.default.registerNode("p", ["Paragraph"]);
                            _grimoirejs2.default.registerNode("div", ["Container"]);
                            _grimoirejs2.default.registerNode("img", ["Image"]);
                            _grimoirejs2.default.registerNode("video", ["Video"]);
                            _grimoirejs2.default.registerNode("editor", ["Editor"]);
                            _grimoirejs2.default.registerNode("render-slide-hitarea", ["RenderSlideHitarea"], {}, "render-slide");

                        case 13:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));
    });
    (0, _grimoirejs2.default)(function () {
        $("#editor-root").on("keydown", function (e) {
            e.stopPropagation();
        });
        (0, _grimoirejs2.default)("#slide")("#simple-goml-container").on("execute", function (e) {
            var parser = new DOMParser();
            var parsed = parser.parseFromString(e, "text/xml");
            var scene = parsed.getElementsByTagName("scene");
            var childs = scene.item(0).children;
            for (var i = 0; i < 3; i++) {
                var n = childs.item(i);
                var gn = (0, _grimoirejs2.default)("#slide")(".editor-content-container " + n.nodeName);
                for (var j = 0; j < n.attributes.length; j++) {
                    var at = n.attributes.item(j);
                    gn.setAttribute(at.name, at.value);
                }
            }
            (0, _grimoirejs2.default)("#slide")(".editor-content-container").append("<object>" + scene.item(0).innerHTML + "</object>");
        });
    });
};

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ContainerComponent = __webpack_require__(0);

var _ContainerComponent2 = _interopRequireDefault(_ContainerComponent);

var _EditorComponent = __webpack_require__(2);

var _EditorComponent2 = _interopRequireDefault(_EditorComponent);

var _ImageComponent = __webpack_require__(3);

var _ImageComponent2 = _interopRequireDefault(_ImageComponent);

var _ParagraphComponent = __webpack_require__(4);

var _ParagraphComponent2 = _interopRequireDefault(_ParagraphComponent);

var _ProgressSeeker = __webpack_require__(5);

var _ProgressSeeker2 = _interopRequireDefault(_ProgressSeeker);

var _Rotate = __webpack_require__(6);

var _Rotate2 = _interopRequireDefault(_Rotate);

var _VideoComponent = __webpack_require__(7);

var _VideoComponent2 = _interopRequireDefault(_VideoComponent);

var _main = __webpack_require__(9);

var _main2 = _interopRequireDefault(_main);

var _grimoirejs = __webpack_require__(8);

var _grimoirejs2 = _interopRequireDefault(_grimoirejs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __VERSION__ = "1.0.0";
var __NAME__ = "grimoirejs-sc-slide";

var __EXPOSE__ = {
    "Components": {
        "ContainerComponent": _ContainerComponent2.default,
        "EditorComponent": _EditorComponent2.default,
        "ImageComponent": _ImageComponent2.default,
        "ParagraphComponent": _ParagraphComponent2.default,
        "ProgressSeeker": _ProgressSeeker2.default,
        "Rotate": _Rotate2.default,
        "VideoComponent": _VideoComponent2.default
    }
};

_grimoirejs2.default.notifyRegisteringPlugin(__NAME__);
var __BASE__ = (0, _main2.default)();
Object.assign(__EXPOSE__, {
    __VERSION__: __VERSION__,
    __NAME__: __NAME__
});
Object.assign(__BASE__ || {}, __EXPOSE__);
window["GrimoireJS"].lib.sc_slide = __EXPOSE__;
exports.default = __BASE__;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 17);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Vector = __webpack_require__(15);

var _Vector2 = _interopRequireDefault(_Vector);

var _FrameBuffer = __webpack_require__(23);

var _FrameBuffer2 = _interopRequireDefault(_FrameBuffer);

var _Texture2D = __webpack_require__(26);

var _Texture2D2 = _interopRequireDefault(_Texture2D);

var _SceneComponent = __webpack_require__(5);

var _SceneComponent2 = _interopRequireDefault(_SceneComponent);

var _ForwardShadingManagerComponent = __webpack_require__(3);

var _ForwardShadingManagerComponent2 = _interopRequireDefault(_ForwardShadingManagerComponent);

var _RenderBuffer = __webpack_require__(25);

var _RenderBuffer2 = _interopRequireDefault(_RenderBuffer);

var _Component2 = __webpack_require__(1);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SceneLightManager = function (_Component) {
    _inherits(SceneLightManager, _Component);

    function SceneLightManager() {
        _classCallCheck(this, SceneLightManager);

        var _this = _possibleConstructorReturn(this, (SceneLightManager.__proto__ || Object.getPrototypeOf(SceneLightManager)).apply(this, arguments));

        _this.lights = {
            point: [],
            directional: [],
            spot: []
        };
        _this.shadowMapCameras = [];
        return _this;
    }

    _createClass(SceneLightManager, [{
        key: "$awake",
        value: function $awake() {
            var _this2 = this;

            this.getAttributeRaw("shadowQuality").watch(function (v) {
                _this2._singleShadowMapSize = Math.pow(2, v);
            }, true);
        }
    }, {
        key: "$mount",
        value: function $mount() {
            this._gl = this.companion.get("gl");
            this._shadowMapTexture = new _Texture2D2.default(this._gl);
            this._lightMatricesTexture = new _Texture2D2.default(this._gl);
            this._lightMatricesTexture.magFilter = WebGLRenderingContext.NEAREST;
            this._lightMatricesTexture.minFilter = WebGLRenderingContext.NEAREST;
            this._shadowMapRenderbuffer = new _RenderBuffer2.default(this._gl);
            this._maxTextureSize = this._gl.getParameter(WebGLRenderingContext.MAX_TEXTURE_SIZE);
            this._shadingManager = this.node.getComponentInAncestor(_ForwardShadingManagerComponent2.default);
            var scene = this.node.getComponent(_SceneComponent2.default);
            this._lightSceneDesc = scene.sceneDescription.lights;
            this._shadingManager.addSceneLightManager(this);
            this._updateShadowMapSize();
            this.shadowMapFBO = new _FrameBuffer2.default(this._gl);
            this.shadowMapFBO.update(this._shadowMapTexture);
            this.shadowMapFBO.update(this._shadowMapRenderbuffer);
        }
    }, {
        key: "$unmount",
        value: function $unmount() {
            this._shadingManager.removeSceneLightManager(this);
            this.shadowMapFBO.destroy();
            this._shadowMapTexture.destroy();
        }
    }, {
        key: "addLight",
        value: function addLight(light) {
            switch (light.lightType) {
                case "point":
                    this.lights.point.push(light);
                    this._lightSceneDesc.point.colors.incrementLength();
                    this._lightSceneDesc.point.positions.incrementLength();
                    this._lightSceneDesc.point.params.incrementLength();
                    break;
                case "directional":
                    this.lights.directional.push(light);
                    this._lightSceneDesc.directional.colors.incrementLength();
                    this._lightSceneDesc.directional.directions.incrementLength();
                    this._lightSceneDesc.directional.params.incrementLength();
                    break;
                case "spot":
                    this.lights.spot.push(light);
                    this._lightSceneDesc.spot.colors.incrementLength();
                    this._lightSceneDesc.spot.directions.incrementLength();
                    this._lightSceneDesc.spot.positions.incrementLength();
                    this._lightSceneDesc.spot.params.incrementLength();
                    break;
            }
            this._shadingManager.updateLightCount();
        }
    }, {
        key: "removeLight",
        value: function removeLight(light) {
            switch (light.lightType) {
                case "point":
                    var i1 = this.lights.point.indexOf(light);
                    this.lights.point.splice(i1, 1);
                    this._lightSceneDesc.point.colors.decrementLength();
                    this._lightSceneDesc.point.positions.decrementLength();
                    this._lightSceneDesc.point.params.decrementLength();
                    break;
                case "directional":
                    var i2 = this.lights.directional.indexOf(light);
                    this.lights.directional.splice(i2, 1);
                    this._lightSceneDesc.directional.colors.decrementLength();
                    this._lightSceneDesc.directional.directions.decrementLength();
                    this._lightSceneDesc.directional.params.decrementLength();
                    break;
                case "spot":
                    var i3 = this.lights.spot.indexOf(light);
                    this.lights.spot.splice(i3, 1);
                    this._lightSceneDesc.spot.colors.decrementLength();
                    this._lightSceneDesc.spot.directions.decrementLength();
                    this._lightSceneDesc.spot.positions.decrementLength();
                    this._lightSceneDesc.spot.params.decrementLength();
                    break;
            }
            this._shadingManager.updateLightCount();
        }
    }, {
        key: "addShadowMapCamera",
        value: function addShadowMapCamera(smCamera) {
            this.shadowMapCameras.push(smCamera);
            smCamera.shadowMapIndex = this.shadowMapCameras.length - 1;
            this._updateShadowMapSize();
        }
    }, {
        key: "removeShadowMapCamera",
        value: function removeShadowMapCamera(smCamera) {
            var index = this.shadowMapCameras.indexOf(smCamera);
            this.shadowMapCameras.splice(index, 1);
            for (var i = 0; i < this.shadowMapCameras.length; i++) {
                this.shadowMapCameras[i].shadowMapIndex = i;
            }
            this._updateShadowMapSize();
        }
    }, {
        key: "viewportByShadowmapIndex",
        value: function viewportByShadowmapIndex(index) {
            var i = index % this._shadowMapElementCounts.X;
            var j = (index - i) / this._shadowMapElementCounts.X;
            this._gl.viewport(i * this._singleShadowMapSize, j * this._singleShadowMapSize, this._singleShadowMapSize, this._singleShadowMapSize);
        }
    }, {
        key: "updateLightMatricies",
        value: function updateLightMatricies(camera) {
            var _this3 = this;

            this.shadowMapCameras.forEach(function (v) {
                v.updateCamera(camera);
            });
            this.shadowMapCameras.forEach(function (v, i) {
                var pv = v.ProjectionViewMatrix.rawElements;
                for (var j = 0; j < 16; j++) {
                    _this3.lightMatrices[16 * i + j] = pv[j];
                }
            });
            this._updateLightMatricesTexture();
        }
        /**
         * Update texture size
         */

    }, {
        key: "_updateShadowMapSize",
        value: function _updateShadowMapSize() {
            var max = this._maxTextureSize;
            var single = this._singleShadowMapSize; // in px
            var byEdge = max / single;
            var count = this.shadowMapCameras.length;
            var size = count === 0 ? 0 : Math.pow(2, Math.ceil(Math.log2(Math.ceil(Math.sqrt(count))))) * single;
            if (size > max) {
                throw new Error("Max shadow map buffer size overflow");
            }
            if (count === 0) {
                this._shadowMapTexture.update(0, 1, 1, 0, WebGLRenderingContext.RGB, WebGLRenderingContext.UNSIGNED_BYTE);
                this._shadowMapRenderbuffer.update(WebGLRenderingContext.DEPTH_COMPONENT16, 1, 1);
            } else {
                this._shadowMapTexture.update(0, size, size, 0, WebGLRenderingContext.RGB, WebGLRenderingContext.UNSIGNED_BYTE);
                this._shadowMapRenderbuffer.update(WebGLRenderingContext.DEPTH_COMPONENT16, size, size);
            }
            var matCount = Math.pow(2, Math.ceil(Math.log2(count)));
            this.lightMatrices = new Float32Array(matCount * 16);
            this._shadowMapElementCounts = new _Vector2.default(size / single, size / single);
            this._updateLightMatricesTexture();
            this._lightSceneDesc.shadowMap = {
                shadowMapCountPerEdge: this._shadowMapElementCounts,
                count: matCount,
                shadowMap: this._shadowMapTexture,
                lightMatrices: this._lightMatricesTexture,
                pixelSize: 1.0 / this._singleShadowMapSize
            };
        }
    }, {
        key: "_updateLightMatricesTexture",
        value: function _updateLightMatricesTexture() {
            var count = this.shadowMapCameras.length;
            this._lightMatricesTexture.update(0, 4, Math.pow(2, Math.ceil(Math.log2(count))), 0, WebGLRenderingContext.RGBA, WebGLRenderingContext.FLOAT, this.lightMatrices);
        }
    }]);

    return SceneLightManager;
}(_Component3.default);

exports.default = SceneLightManager;

SceneLightManager.attributes = {
    shadowQuality: {
        converter: "Number",
        default: 9
    }
};

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.Node.Component;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _SceneComponent = __webpack_require__(5);

var _SceneComponent2 = _interopRequireDefault(_SceneComponent);

var _SceneLightManager = __webpack_require__(0);

var _SceneLightManager2 = _interopRequireDefault(_SceneLightManager);

var _Component2 = __webpack_require__(1);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LightTypeComponentBase = function (_Component) {
    _inherits(LightTypeComponentBase, _Component);

    function LightTypeComponentBase() {
        _classCallCheck(this, LightTypeComponentBase);

        return _possibleConstructorReturn(this, (LightTypeComponentBase.__proto__ || Object.getPrototypeOf(LightTypeComponentBase)).apply(this, arguments));
    }

    _createClass(LightTypeComponentBase, [{
        key: "$mount",
        value: function $mount() {
            this.__sceneLightManager = this.node.getComponentInAncestor(_SceneLightManager2.default);
            var sceneDesc = this.__sceneLightManager.node.getComponent(_SceneComponent2.default).sceneDescription;
            this.__lightDesc = sceneDesc.lights;
            this.__sceneLightManager.addLight(this);
        }
    }, {
        key: "$unmount",
        value: function $unmount() {
            this.__sceneLightManager.removeLight(this);
        }
    }, {
        key: "__ensureIndex",
        value: function __ensureIndex(lightParameters) {
            var index = lightParameters.indicies.indexOf(this.id);
            if (index >= 0) {
                return index;
            } else {
                lightParameters.indicies.push(this.id);
                return lightParameters.indicies.length - 1;
            }
        }
    }]);

    return LightTypeComponentBase;
}(_Component3.default);

exports.default = LightTypeComponentBase;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = __webpack_require__(1);

var _Component3 = _interopRequireDefault(_Component2);

var _MaterialFactory = __webpack_require__(21);

var _MaterialFactory2 = _interopRequireDefault(_MaterialFactory);

var _MaterialContainerComponent = __webpack_require__(19);

var _MaterialContainerComponent2 = _interopRequireDefault(_MaterialContainerComponent);

var _Basic = __webpack_require__(31);

var _Basic2 = _interopRequireDefault(_Basic);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ForwardShadingManagerComponent = function (_Component) {
    _inherits(ForwardShadingManagerComponent, _Component);

    function ForwardShadingManagerComponent() {
        _classCallCheck(this, ForwardShadingManagerComponent);

        var _this = _possibleConstructorReturn(this, (ForwardShadingManagerComponent.__proto__ || Object.getPrototypeOf(ForwardShadingManagerComponent)).apply(this, arguments));

        _this._sceneLightManagers = [];
        return _this;
    }

    _createClass(ForwardShadingManagerComponent, [{
        key: "$awake",
        value: function $awake() {
            this._macroRegistry = this.companion.get("MaterialFactory").macro;
            this._macroRegistry.setValue("DIR_LIGHT_COUNT", "0");
            this._macroRegistry.setValue("POINT_LIGHT_COUNT", "0");
            this._macroRegistry.setValue("SPOT_LIGHT_COUNT", "0");
            this._macroRegistry.setValue("SHADOW_MAP_COUNT", "0");
            _MaterialFactory2.default.addSORTMaterial("basic-shading", _Basic2.default);
            _MaterialContainerComponent2.default.rewriteDefaultMaterial("basic-shading");
        }
    }, {
        key: "addSceneLightManager",
        value: function addSceneLightManager(s) {
            this._sceneLightManagers.push(s);
            this.updateLightCount();
        }
    }, {
        key: "removeSceneLightManager",
        value: function removeSceneLightManager(s) {
            var o = this._sceneLightManagers.indexOf(s);
            this._sceneLightManagers.splice(o, 1);
            this.updateLightCount();
        }
    }, {
        key: "updateLightCount",
        value: function updateLightCount() {
            var d = 0,
                s = 0,
                p = 0,
                sm = 0;
            for (var i = 0; i < this._sceneLightManagers.length; i++) {
                var slm = this._sceneLightManagers[i];
                d = Math.max(slm.lights.directional.length, d);
                p = Math.max(slm.lights.point.length, p);
                s = Math.max(slm.lights.spot.length, s);
                sm = Math.max(slm.shadowMapCameras.length, sm);
            }
            this._macroRegistry.setValue("DIR_LIGHT_COUNT", d + "");
            this._macroRegistry.setValue("POINT_LIGHT_COUNT", p + "");
            this._macroRegistry.setValue("SPOT_LIGHT_COUNT", s + "");
            this._macroRegistry.setValue("SHADOW_MAP_COUNT", sm + "");
        }
    }]);

    return ForwardShadingManagerComponent;
}(_Component3.default);

exports.default = ForwardShadingManagerComponent;

ForwardShadingManagerComponent.attributes = {};
ForwardShadingManagerComponent._typeToMacros = {
    point: "POINT_LIGHT_COUNT",
    directional: "DIR_LIGHT_COUNT",
    spot: "SPOT_LIGHT_COUNT"
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Matrix = __webpack_require__(29);

var _Matrix2 = _interopRequireDefault(_Matrix);

var _Vector = __webpack_require__(30);

var _Vector2 = _interopRequireDefault(_Vector);

var _SceneLightManager = __webpack_require__(0);

var _SceneLightManager2 = _interopRequireDefault(_SceneLightManager);

var _CameraComponent2 = __webpack_require__(18);

var _CameraComponent3 = _interopRequireDefault(_CameraComponent2);

var _AABB = __webpack_require__(28);

var _AABB2 = _interopRequireDefault(_AABB);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ShadowMapCameraComponent = function (_CameraComponent) {
    _inherits(ShadowMapCameraComponent, _CameraComponent);

    function ShadowMapCameraComponent() {
        _classCallCheck(this, ShadowMapCameraComponent);

        var _this = _possibleConstructorReturn(this, (ShadowMapCameraComponent.__proto__ || Object.getPrototypeOf(ShadowMapCameraComponent)).apply(this, arguments));

        _this._sceneAABBCache = new _AABB2.default();
        _this._vectorCache = new _Vector2.default(0, 0, 0);
        return _this;
    }

    _createClass(ShadowMapCameraComponent, [{
        key: "$awake",
        value: function $awake() {
            this.Near = 0.01;
            this.Far = 50.0;
            this.OrthographicMode = true;
            this.OrthoSize = 30;
            this.AutoAspect = false;
            this.Aspect = 1.0;
        }
    }, {
        key: "$mount",
        value: function $mount() {
            _get(ShadowMapCameraComponent.prototype.__proto__ || Object.getPrototypeOf(ShadowMapCameraComponent.prototype), "$mount", this).call(this);
            var sm = this.containedScene.node.getComponent(_SceneLightManager2.default);
            sm.addShadowMapCamera(this);
        }
    }, {
        key: "updateCamera",
        value: function updateCamera(sceneCamera) {
            this._sceneAABBCache.clear();
            var ipv = _Matrix2.default.inverse(sceneCamera.ProjectionViewMatrix);
            for (var ix = 0; ix < 2; ix++) {
                for (var iy = 0; iy < 2; iy++) {
                    for (var iz = 0; iz < 2; iz++) {
                        this._vectorCache.rawElements[0] = ix == 0 ? -1 : 1;
                        this._vectorCache.rawElements[1] = iy == 0 ? -1 : 1;
                        this._vectorCache.rawElements[2] = iz == 0 ? -1 : 1;
                        this._sceneAABBCache.expand(_Matrix2.default.transformPoint(ipv, this._vectorCache));
                    }
                }
            }
            var diagonal = this._sceneAABBCache.pointLBF.subtractWith(this._sceneAABBCache.Center).magnitude;
            //this.transform.localPosition = this._sceneAABBCache.Center.addWith(this.transform.forward.negateThis().multiplyWith(diagonal));
        }
    }, {
        key: "$unmount",
        value: function $unmount() {
            var sm = this.containedScene.node.getComponent(_SceneLightManager2.default);
            sm.removeShadowMapCamera(this);
        }
    }]);

    return ShadowMapCameraComponent;
}(_CameraComponent3.default);

exports.default = ShadowMapCameraComponent;

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Components.SceneComponent;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _LightTypeComponentBase = __webpack_require__(2);

var _LightTypeComponentBase2 = _interopRequireDefault(_LightTypeComponentBase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DirectionalLightTypeComponent = function (_LightTypeComponentBa) {
    _inherits(DirectionalLightTypeComponent, _LightTypeComponentBa);

    function DirectionalLightTypeComponent() {
        _classCallCheck(this, DirectionalLightTypeComponent);

        return _possibleConstructorReturn(this, (DirectionalLightTypeComponent.__proto__ || Object.getPrototypeOf(DirectionalLightTypeComponent)).apply(this, arguments));
    }

    _createClass(DirectionalLightTypeComponent, [{
        key: "$awake",
        value: function $awake() {
            var _this2 = this;

            this.lightType = "directional";
            this.getAttributeRaw("color").boundTo("_color");
            this.getAttributeRaw("intensity").boundTo("_intensity");
            this.getAttributeRaw("shadow").watch(function (v) {
                return _this2._useShadowChanged(v);
            }, true);
            this._transform = this.node.getComponent("Transform");
        }
    }, {
        key: "$update",
        value: function $update(args) {
            var sceneDesc = args.sceneDescription;
            var directionals = sceneDesc.lights.directional;
            var index = this.__ensureIndex(directionals);
            var d = this._transform.forward;
            var p = this._transform.globalPosition;
            directionals.directions.set(index, d.X, d.Y, d.Z);
            var c = this._color;
            directionals.colors.set(index, c.R * this._intensity, c.G * this._intensity, c.B * this._intensity);
            directionals.params.set(index, this._shadowCamera ? this._shadowCamera.shadowMapIndex : -1, p.X, p.Y, p.Z);
        }
    }, {
        key: "_useShadowChanged",
        value: function _useShadowChanged(v) {
            if (!v && this._shadowCamera) {
                this._shadowCamera.dispose();
                this._shadowCamera = null;
            } else if (v) {
                this._shadowCamera = this.node.addComponent("ShadowMapCamera");
            }
        }
    }]);

    return DirectionalLightTypeComponent;
}(_LightTypeComponentBase2.default);

exports.default = DirectionalLightTypeComponent;

DirectionalLightTypeComponent.attributes = {
    color: {
        converter: "Color3",
        default: "white"
    },
    intensity: {
        converter: "Number",
        default: 1
    },
    shadow: {
        converter: "Boolean",
        default: false
    }
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = __webpack_require__(1);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LightComponent = function (_Component) {
    _inherits(LightComponent, _Component);

    function LightComponent() {
        _classCallCheck(this, LightComponent);

        return _possibleConstructorReturn(this, (LightComponent.__proto__ || Object.getPrototypeOf(LightComponent)).apply(this, arguments));
    }

    _createClass(LightComponent, [{
        key: "$awake",
        value: function $awake() {
            var _this2 = this;

            this.getAttributeRaw("type").watch(function (v) {
                return _this2._onLightTypeChanged(v);
            }, true);
        }
        /**
         * Called when the light type was changed
         * @param {string} type [description]
         */

    }, {
        key: "_onLightTypeChanged",
        value: function _onLightTypeChanged(type) {
            type = type.toLowerCase();
            // check if the light type was changed actually.
            if (type === this._lastLightType) {
                return;
            } else {
                this._lastLightType = type;
            }
            this._removeLastTypeComponent();
            this._addLightTypeComponent(type);
        }
    }, {
        key: "_addLightTypeComponent",
        value: function _addLightTypeComponent(type) {
            switch (type) {
                case "directional":
                    this._lightTypeComponent = this.node.addComponent("DirectionalLightType", {}, true);
                    break;
                case "point":
                    this._lightTypeComponent = this.node.addComponent("PointLightType", {}, true);
                    break;
                case "spot":
                    this._lightTypeComponent = this.node.addComponent("SpotLightType", {}, true);
                    break;
            }
        }
    }, {
        key: "_removeLastTypeComponent",
        value: function _removeLastTypeComponent() {
            if (this._lightTypeComponent) {
                this._lightTypeComponent.dispose();
            }
        }
    }]);

    return LightComponent;
}(_Component3.default);

exports.default = LightComponent;

LightComponent.attributes = {
    type: {
        converter: "String",
        default: "Directional"
    }
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _LightTypeComponentBase = __webpack_require__(2);

var _LightTypeComponentBase2 = _interopRequireDefault(_LightTypeComponentBase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PointLightTypeComponent = function (_LightTypeComponentBa) {
    _inherits(PointLightTypeComponent, _LightTypeComponentBa);

    function PointLightTypeComponent() {
        _classCallCheck(this, PointLightTypeComponent);

        return _possibleConstructorReturn(this, (PointLightTypeComponent.__proto__ || Object.getPrototypeOf(PointLightTypeComponent)).apply(this, arguments));
    }

    _createClass(PointLightTypeComponent, [{
        key: "$awake",
        value: function $awake() {
            this.lightType = "point";
            this.getAttributeRaw("color").boundTo("_color");
            this._transform = this.node.getComponent("Transform");
            this.getAttributeRaw("distance").boundTo("_distance");
            this.getAttributeRaw("decay").boundTo("_decay");
            this.getAttributeRaw("intensity").boundTo("_intensity");
        }
    }, {
        key: "$update",
        value: function $update(args) {
            var sceneDesc = args.sceneDescription;
            var points = sceneDesc.lights.point;
            var index = this.__ensureIndex(points);
            var pos = this._transform.globalPosition;
            points.positions.set(index, pos.X, pos.Y, pos.Z);
            points.colors.set(index, this._color.R * this._intensity, this._color.G * this._intensity, this._color.B * this._intensity);
            points.params.set(index, this._distance, this._decay);
        }
    }]);

    return PointLightTypeComponent;
}(_LightTypeComponentBase2.default);

exports.default = PointLightTypeComponent;

PointLightTypeComponent.attributes = {
    color: {
        converter: "Color3",
        default: "white"
    },
    distance: {
        converter: "Number",
        default: 5.0
    },
    decay: {
        converter: "Number",
        default: 2.0
    },
    intensity: {
        converter: "Number",
        default: 1
    }
};

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _SceneLightManager = __webpack_require__(0);

var _SceneLightManager2 = _interopRequireDefault(_SceneLightManager);

var _Component2 = __webpack_require__(1);

var _Component3 = _interopRequireDefault(_Component2);

var _RenderSceneComponent = __webpack_require__(20);

var _RenderSceneComponent2 = _interopRequireDefault(_RenderSceneComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RenderShadowMapComponent = function (_Component) {
    _inherits(RenderShadowMapComponent, _Component);

    function RenderShadowMapComponent() {
        _classCallCheck(this, RenderShadowMapComponent);

        return _possibleConstructorReturn(this, (RenderShadowMapComponent.__proto__ || Object.getPrototypeOf(RenderShadowMapComponent)).apply(this, arguments));
    }

    _createClass(RenderShadowMapComponent, [{
        key: "$mount",
        value: function $mount() {
            this._renderSceneComponent = this.node.getComponent(_RenderSceneComponent2.default);
            if (!this._renderSceneComponent) {
                throw new Error("There was no RenderScene component found on the node attached RenderShadowMapComponent");
            }
            this._gl = this.companion.get("gl");
        }
    }, {
        key: "$render",
        value: function $render(args) {
            var _this2 = this;

            var sceneCamera = this._renderSceneComponent.camera ? this._renderSceneComponent.camera : args.camera;
            var slm = sceneCamera.containedScene.node.getComponent(_SceneLightManager2.default);
            if (slm.shadowMapCameras.length === 0) {
                return;
            }
            slm.shadowMapFBO.bind();
            this._gl.clearColor(0, 0, 0, 0);
            this._gl.clearDepth(1);
            this._gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT | WebGLRenderingContext.DEPTH_BUFFER_BIT);
            slm.updateLightMatricies(sceneCamera);
            slm.shadowMapCameras.forEach(function (v) {
                slm.viewportByShadowmapIndex(v.shadowMapIndex);
                v.updateContainedScene(args.timer);
                v.renderScene({
                    camera: v,
                    buffers: null,
                    layer: "default",
                    viewport: args.viewport,
                    technique: "depth",
                    renderer: _this2._renderSceneComponent,
                    sceneDescription: {},
                    timer: args.timer
                });
            });
            this._gl.flush();
            this._gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, null);
        }
    }]);

    return RenderShadowMapComponent;
}(_Component3.default);

exports.default = RenderShadowMapComponent;

RenderShadowMapComponent.attributes = {};

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _ShadowMapCameraComponent = __webpack_require__(4);

var _ShadowMapCameraComponent2 = _interopRequireDefault(_ShadowMapCameraComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SpotLightShadowMapCameraComponent = function (_ShadowMapCameraCompo) {
    _inherits(SpotLightShadowMapCameraComponent, _ShadowMapCameraCompo);

    function SpotLightShadowMapCameraComponent() {
        _classCallCheck(this, SpotLightShadowMapCameraComponent);

        return _possibleConstructorReturn(this, (SpotLightShadowMapCameraComponent.__proto__ || Object.getPrototypeOf(SpotLightShadowMapCameraComponent)).apply(this, arguments));
    }

    _createClass(SpotLightShadowMapCameraComponent, [{
        key: "$awake",
        value: function $awake() {
            _get(SpotLightShadowMapCameraComponent.prototype.__proto__ || Object.getPrototypeOf(SpotLightShadowMapCameraComponent.prototype), "$awake", this).call(this);
            this.OrthographicMode = false;
        }
    }]);

    return SpotLightShadowMapCameraComponent;
}(_ShadowMapCameraComponent2.default);

exports.default = SpotLightShadowMapCameraComponent;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _LightTypeComponentBase = __webpack_require__(2);

var _LightTypeComponentBase2 = _interopRequireDefault(_LightTypeComponentBase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SpotLightTypeComponent = function (_LightTypeComponentBa) {
    _inherits(SpotLightTypeComponent, _LightTypeComponentBa);

    function SpotLightTypeComponent() {
        _classCallCheck(this, SpotLightTypeComponent);

        return _possibleConstructorReturn(this, (SpotLightTypeComponent.__proto__ || Object.getPrototypeOf(SpotLightTypeComponent)).apply(this, arguments));
    }

    _createClass(SpotLightTypeComponent, [{
        key: "$awake",
        value: function $awake() {
            var _this2 = this;

            this.lightType = "spot";
            this.getAttributeRaw("color").boundTo("_color");
            this._transform = this.node.getComponent("Transform");
            this.getAttributeRaw("innerCone").boundTo("_innerCone");
            this.getAttributeRaw("outerCone").boundTo("_outerCone");
            this.getAttributeRaw("decay").boundTo("_decay");
            this.getAttributeRaw("intensity").boundTo("_intensity");
            this.getAttributeRaw("shadow").watch(function (v) {
                return _this2._useShadowChanged(v);
            }, true);
        }
    }, {
        key: "$update",
        value: function $update(args) {
            var sceneDesc = args.sceneDescription;
            var spots = sceneDesc.lights.spot;
            var index = this.__ensureIndex(spots);
            var pos = this._transform.globalPosition;
            var dir = this._transform.up.negateThis();
            spots.positions.set(index, pos.X, pos.Y, pos.Z);
            spots.colors.set(index, this._color.R * this._intensity, this._color.G * this._intensity, this._color.B * this._intensity);
            spots.directions.set(index, dir.X, dir.Y, dir.Z);
            spots.params.set(index, this._innerCone, this._outerCone, this._decay, this._shadowCamera ? this._shadowCamera.shadowMapIndex : -1);
        }
    }, {
        key: "_useShadowChanged",
        value: function _useShadowChanged(v) {
            if (!v && this._shadowCamera) {
                this._shadowCamera.dispose();
                this._shadowCamera = null;
            } else if (v) {
                this._shadowCamera = this.node.addComponent("SpotLightShadowMapCamera");
            }
        }
    }]);

    return SpotLightTypeComponent;
}(_LightTypeComponentBase2.default);

exports.default = SpotLightTypeComponent;

SpotLightTypeComponent.attributes = {
    color: {
        converter: "Color3",
        default: "white"
    },
    innerCone: {
        converter: "Angle2D",
        default: "5d"
    },
    outerCone: {
        converter: "Angle2D",
        default: "20d"
    },
    decay: {
        converter: "Number",
        default: 1
    },
    intensity: {
        converter: "Number",
        default: 1
    },
    shadow: {
        converter: "Boolean",
        default: false
    }
};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ImportResolver = __webpack_require__(27);

var _ImportResolver2 = _interopRequireDefault(_ImportResolver);

var _UniformResolverRegistry = __webpack_require__(22);

var _UniformResolverRegistry2 = _interopRequireDefault(_UniformResolverRegistry);

var _ShadingChunk = __webpack_require__(32);

var _ShadingChunk2 = _interopRequireDefault(_ShadingChunk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LightVariableRegister = function () {
    function LightVariableRegister() {
        _classCallCheck(this, LightVariableRegister);
    }

    _createClass(LightVariableRegister, null, [{
        key: "registerAll",
        value: function registerAll() {
            _ImportResolver2.default.staticImports["forward-shading"] = _ShadingChunk2.default;
            this._registerLightVariable("DIRECTIONAL_LIGHT_DIRECTIONS", function (n, p, i) {
                return p.uniformVector3Array(n, i.lights.directional.directions.elements);
            });
            this._registerLightVariable("DIRECTIONAL_LIGHT_COLORS", function (n, p, i) {
                return p.uniformVector3Array(n, i.lights.directional.colors.elements);
            });
            this._registerLightVariable("DIRECTIONAL_LIGHT_PARAMS", function (n, p, i) {
                return p.uniformVector4Array(n, i.lights.directional.params.elements);
            });
            this._registerLightVariable("POINT_LIGHT_POSITIONS", function (n, p, i) {
                return p.uniformVector3Array(n, i.lights.point.positions.elements);
            });
            this._registerLightVariable("POINT_LIGHT_COLORS", function (n, p, i) {
                return p.uniformVector3Array(n, i.lights.point.colors.elements);
            });
            this._registerLightVariable("POINT_LIGHT_PARAMS", function (n, p, i) {
                return p.uniformVector2Array(n, i.lights.point.params.elements);
            });
            this._registerLightVariable("SPOT_LIGHT_POSITIONS", function (n, p, i) {
                return p.uniformVector3Array(n, i.lights.spot.positions.elements);
            });
            this._registerLightVariable("SPOT_LIGHT_COLORS", function (n, p, i) {
                return p.uniformVector3Array(n, i.lights.spot.colors.elements);
            });
            this._registerLightVariable("SPOT_LIGHT_DIRECTIONS", function (n, p, i) {
                return p.uniformVector3Array(n, i.lights.spot.directions.elements);
            });
            this._registerLightVariable("SPOT_LIGHT_PARAMS", function (n, p, i) {
                return p.uniformVector4Array(n, i.lights.spot.params.elements);
            });
            this._registerLightVariable("SHADOW_MATRICES", function (n, p, i) {
                return p.uniformTexture2D(n, i.lights.shadowMap.lightMatrices);
            });
            this._registerLightVariable("SHADOW_MATRICES_COUNT", function (n, p, i) {
                return p.uniformFloat(n, i.lights.shadowMap.count);
            });
            this._registerLightVariable("SHADOW_MAP_TEXTURE", function (n, p, i) {
                return p.uniformTexture2D(n, i.lights.shadowMap.shadowMap);
            });
            this._registerLightVariable("SHADOW_MAP_ELEMENT_COUNT", function (n, p, i) {
                return p.uniformVector2(n, i.lights.shadowMap.shadowMapCountPerEdge);
            });
            this._registerLightVariable("SHADOW_MAP_PIXEL_SIZE", function (n, p, i) {
                return p.uniformFloat(n, i.lights.shadowMap.pixelSize);
            });
        }
    }, {
        key: "_registerLightVariable",
        value: function _registerLightVariable(semantic, register) {
            _UniformResolverRegistry2.default.add(semantic, function (valInfo) {
                return function (proxy, args) {
                    register(valInfo.name, proxy, args.sceneDescription);
                };
            });
        }
    }]);

    return LightVariableRegister;
}();

exports.default = LightVariableRegister;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VectorArrayContainer = function () {
    function VectorArrayContainer(size, length) {
        _classCallCheck(this, VectorArrayContainer);

        this.size = size;
        this.length = length;
        this.resize(size, length);
    }

    _createClass(VectorArrayContainer, [{
        key: "resize",
        value: function resize(size, length) {
            this.elements = new Float32Array(size * length);
            this.size = size;
            this.length = length;
        }
    }, {
        key: "set",
        value: function set(index, x, y, z, w) {
            var i = this.size * index;
            this.elements[i + 0] = x;
            if (y !== void 0) {
                this.elements[i + 1] = y;
                if (z !== void 0) {
                    this.elements[i + 2] = z;
                    if (w !== void 0) {
                        this.elements[i + 3] = w;
                    }
                }
            }
        }
    }, {
        key: "incrementLength",
        value: function incrementLength() {
            this.resize(this.size, this.length + 1);
        }
    }, {
        key: "decrementLength",
        value: function decrementLength() {
            this.resize(this.size, this.length - 1);
        }
    }]);

    return VectorArrayContainer;
}();

exports.default = VectorArrayContainer;

/***/ }),
/* 14 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS;

/***/ }),
/* 15 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math.Vector2;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _SpotLightShadowMapCameraComponent = __webpack_require__(10);

var _SpotLightShadowMapCameraComponent2 = _interopRequireDefault(_SpotLightShadowMapCameraComponent);

var _Vector = __webpack_require__(15);

var _Vector2 = _interopRequireDefault(_Vector);

var _RenderShadowMapComponent = __webpack_require__(9);

var _RenderShadowMapComponent2 = _interopRequireDefault(_RenderShadowMapComponent);

var _ShadowMapCameraComponent = __webpack_require__(4);

var _ShadowMapCameraComponent2 = _interopRequireDefault(_ShadowMapCameraComponent);

var _VectorArrayContainer = __webpack_require__(13);

var _VectorArrayContainer2 = _interopRequireDefault(_VectorArrayContainer);

var _SceneLightManager = __webpack_require__(0);

var _SceneLightManager2 = _interopRequireDefault(_SceneLightManager);

var _DirectionalLightTypeComponent = __webpack_require__(6);

var _DirectionalLightTypeComponent2 = _interopRequireDefault(_DirectionalLightTypeComponent);

var _LightComponent = __webpack_require__(7);

var _LightComponent2 = _interopRequireDefault(_LightComponent);

var _PointLightTypeComponent = __webpack_require__(8);

var _PointLightTypeComponent2 = _interopRequireDefault(_PointLightTypeComponent);

var _SpotLightTypeComponent = __webpack_require__(11);

var _SpotLightTypeComponent2 = _interopRequireDefault(_SpotLightTypeComponent);

var _ForwardShadingManagerComponent = __webpack_require__(3);

var _ForwardShadingManagerComponent2 = _interopRequireDefault(_ForwardShadingManagerComponent);

var _grimoirejs = __webpack_require__(14);

var _grimoirejs2 = _interopRequireDefault(_grimoirejs);

var _GLExtRequestor = __webpack_require__(24);

var _GLExtRequestor2 = _interopRequireDefault(_GLExtRequestor);

var _LightVariableRegister = __webpack_require__(12);

var _LightVariableRegister2 = _interopRequireDefault(_LightVariableRegister);

var _SceneComponent = __webpack_require__(5);

var _SceneComponent2 = _interopRequireDefault(_SceneComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// Please do not change the name of variable on the line below.

exports.default = function () {
    _grimoirejs2.default.register(function () {
        return __awaiter(undefined, void 0, void 0, regeneratorRuntime.mark(function _callee() {
            var g;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _SceneComponent2.default.onSceneDescriptionCreation(function (s) {
                                s.lights = {
                                    directional: {
                                        indicies: [],
                                        directions: new _VectorArrayContainer2.default(3, 0),
                                        colors: new _VectorArrayContainer2.default(3, 0),
                                        params: new _VectorArrayContainer2.default(4, 0)
                                    },
                                    point: {
                                        indicies: [],
                                        positions: new _VectorArrayContainer2.default(3, 0),
                                        colors: new _VectorArrayContainer2.default(3, 0),
                                        params: new _VectorArrayContainer2.default(2, 0)
                                    },
                                    spot: {
                                        indicies: [],
                                        positions: new _VectorArrayContainer2.default(3, 0),
                                        directions: new _VectorArrayContainer2.default(3, 0),
                                        colors: new _VectorArrayContainer2.default(3, 0),
                                        params: new _VectorArrayContainer2.default(4, 0)
                                    },
                                    shadowMap: {
                                        shadowMapCountPerEdge: new _Vector2.default(0, 0),
                                        shadowMap: null,
                                        lightMatrices: null,
                                        pixelSize: 0,
                                        count: 0
                                    }
                                };
                            });
                            g = _grimoirejs2.default;

                            g.registerComponent("ForwardShadingManager", _ForwardShadingManagerComponent2.default);
                            g.registerComponent("Light", _LightComponent2.default);
                            g.registerComponent("DirectionalLightType", _DirectionalLightTypeComponent2.default);
                            g.registerComponent("PointLightType", _PointLightTypeComponent2.default);
                            g.registerComponent("SpotLightType", _SpotLightTypeComponent2.default);
                            g.registerComponent("SceneLightManager", _SceneLightManager2.default);
                            g.registerComponent("ShadowMapCamera", _ShadowMapCameraComponent2.default);
                            g.registerComponent("RenderShadowMap", _RenderShadowMapComponent2.default);
                            g.registerComponent("SpotLightShadowMapCamera", _SpotLightShadowMapCameraComponent2.default);
                            g.overrideDeclaration("scene", ["SceneLightManager"]);
                            g.overrideDeclaration("render-scene", ["RenderShadowMap"]);
                            g.overrideDeclaration("goml", ["ForwardShadingManager"]);
                            g.registerNode("light", ["Transform", "Light"]);
                            _LightVariableRegister2.default.registerAll();
                            _GLExtRequestor2.default.request("OES_texture_float");

                        case 17:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));
    });
};

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _grimoirejs = __webpack_require__(14);

var _grimoirejs2 = _interopRequireDefault(_grimoirejs);

var _DirectionalLightTypeComponent = __webpack_require__(6);

var _DirectionalLightTypeComponent2 = _interopRequireDefault(_DirectionalLightTypeComponent);

var _ForwardShadingManagerComponent = __webpack_require__(3);

var _ForwardShadingManagerComponent2 = _interopRequireDefault(_ForwardShadingManagerComponent);

var _LightComponent = __webpack_require__(7);

var _LightComponent2 = _interopRequireDefault(_LightComponent);

var _LightTypeComponentBase = __webpack_require__(2);

var _LightTypeComponentBase2 = _interopRequireDefault(_LightTypeComponentBase);

var _PointLightTypeComponent = __webpack_require__(8);

var _PointLightTypeComponent2 = _interopRequireDefault(_PointLightTypeComponent);

var _RenderShadowMapComponent = __webpack_require__(9);

var _RenderShadowMapComponent2 = _interopRequireDefault(_RenderShadowMapComponent);

var _SceneLightManager = __webpack_require__(0);

var _SceneLightManager2 = _interopRequireDefault(_SceneLightManager);

var _ShadowMapCameraComponent = __webpack_require__(4);

var _ShadowMapCameraComponent2 = _interopRequireDefault(_ShadowMapCameraComponent);

var _SpotLightShadowMapCameraComponent = __webpack_require__(10);

var _SpotLightShadowMapCameraComponent2 = _interopRequireDefault(_SpotLightShadowMapCameraComponent);

var _SpotLightTypeComponent = __webpack_require__(11);

var _SpotLightTypeComponent2 = _interopRequireDefault(_SpotLightTypeComponent);

var _LightVariableRegister = __webpack_require__(12);

var _LightVariableRegister2 = _interopRequireDefault(_LightVariableRegister);

var _VectorArrayContainer = __webpack_require__(13);

var _VectorArrayContainer2 = _interopRequireDefault(_VectorArrayContainer);

var _main = __webpack_require__(16);

var _main2 = _interopRequireDefault(_main);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __VERSION__ = "1.7.0";
var __NAME__ = "grimoirejs-forward-shading";

var __EXPOSE__ = {
    "Components": {
        "DirectionalLightTypeComponent": _DirectionalLightTypeComponent2.default,
        "ForwardShadingManagerComponent": _ForwardShadingManagerComponent2.default,
        "LightComponent": _LightComponent2.default,
        "LightTypeComponentBase": _LightTypeComponentBase2.default,
        "PointLightTypeComponent": _PointLightTypeComponent2.default,
        "RenderShadowMapComponent": _RenderShadowMapComponent2.default,
        "SceneLightManager": _SceneLightManager2.default,
        "ShadowMapCameraComponent": _ShadowMapCameraComponent2.default,
        "SpotLightShadowMapCameraComponent": _SpotLightShadowMapCameraComponent2.default,
        "SpotLightTypeComponent": _SpotLightTypeComponent2.default
    },
    "Util": {
        "LightVariableRegister": _LightVariableRegister2.default,
        "VectorArrayContainer": _VectorArrayContainer2.default
    }
};
_grimoirejs2.default.notifyRegisteringPlugin(__NAME__);
var __BASE__ = (0, _main2.default)();
Object.assign(__EXPOSE__, {
    __VERSION__: __VERSION__,
    __NAME__: __NAME__
});
Object.assign(__BASE__ || {}, __EXPOSE__);
window["GrimoireJS"].lib.forward_shading = __EXPOSE__;
exports.default = __BASE__;

/***/ }),
/* 18 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Components.CameraComponent;

/***/ }),
/* 19 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Components.MaterialContainerComponent;

/***/ }),
/* 20 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Components.RenderSceneComponent;

/***/ }),
/* 21 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Material.MaterialFactory;

/***/ }),
/* 22 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Material.UniformResolverRegistry;

/***/ }),
/* 23 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Resource.FrameBuffer;

/***/ }),
/* 24 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Resource.GLExtRequestor;

/***/ }),
/* 25 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Resource.RenderBuffer;

/***/ }),
/* 26 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Resource.Texture2D;

/***/ }),
/* 27 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Sort.ImportResolver;

/***/ }),
/* 28 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math.AABB;

/***/ }),
/* 29 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math.Matrix;

/***/ }),
/* 30 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math.Vector3;

/***/ }),
/* 31 */
/***/ (function(module, exports) {

module.exports = "@Technique default{\n@Pass{\n@BlendFunc(SRC_ALPHA,ONE_MINUS_SRC_ALPHA)\nFS_PREC(mediump,float)\n\nvarying vec3 vNormal;\nvarying vec2 vTexCoord;\nvarying vec4 vPosition;\n\n#ifdef ATTRIBUTE_COLOR_ENABLED\nvarying vec4 vColor;\n#endif\n\n#ifdef VS\n  attribute vec3 position;\n  attribute vec3 normal;\n  #ifdef ATTRIBUTE_TEXCOORD_ENABLED\n  attribute vec2 texCoord;\n  #endif\n  #ifdef ATTRIBUTE_COLOR_ENABLED\n  @COLOR\n  attribute vec4 color;\n  #endif\n\n  uniform mat4 _matPVM;\n  uniform mat4 _matM;\n\n  void main(){\n    gl_Position = _matPVM * vec4(position,1.0);\n    vNormal = normalize((_matM * vec4(normal,0.0)).xyz);\n    vPosition = (_matM * vec4(position,1.0));\n    #ifndef ATTRIBUTE_TEXCOORD_ENABLED\n    vTexCoord = position.xy / 2.0 + vec2(0.5);\n    #endif\n    #ifdef ATTRIBUTE_TEXCOORD_ENABLED\n    vTexCoord = texCoord;\n    #endif\n    #ifdef ATTRIBUTE_COLOR_ENABLED\n    vColor = color;\n    #endif\n  }\n#endif\n\n#ifdef FS\n  @CAMERA_POSITION\n  uniform vec3 _cameraPosition;\n\n  uniform sampler2D texture;\n\n  @HAS_TEXTURE{sampler:\"texture\"}\n  uniform bool useTexture;\n\n  uniform sampler2D roughnessMap;\n\n  @HAS_TEXTURE{sampler:\"roughnessMap\"}\n  uniform bool useRoughnessMap;\n\n  @{default:\"white\",type:\"color\"}\n  uniform vec4 albedo;\n\n  @{default:1.0}\n  uniform float roughness;\n\n  @{default:0.99}\n  uniform float metalic;\n\n  @{default:\"black\",type:\"color\"}\n  uniform vec3 emission;\n\n  @import \"forward-shading\"\n\n\n\n  void main(){\n    vec3 dBaseColor = albedo.rgb;\n    vec4 lastColor = vec4(0,0,0,albedo.a);\n    #ifdef ATTRIBUTE_COLOR_ENABLED\n    dBaseColor *= vColor.rgb;\n    #endif\n    if(useTexture){\n      vec4 texColor = texture2D(texture,vTexCoord);\n      dBaseColor = pow(texColor.rgb,vec3(2.2));\n      lastColor.a *= texColor.a;\n    }\n    float r = roughness;\n    if(useRoughnessMap){\n      r *= texture2D(roughnessMap,vTexCoord).r;\n    }\n    vec3 dielectricSpecular = vec3(0.04);\n    vec3 diffuse = mix(dBaseColor.rgb * (1. - dielectricSpecular.r),vec3(0),metalic);\n    vec3 f0 = mix(dielectricSpecular,dBaseColor.rgb,metalic);\n    pbr_params param = pbr_params(diffuse,f0,roughness*roughness,roughness);\n    lastColor.rgb += emission + shading(param,vNormal,vPosition.xyz/vPosition.w);\n    gl_FragColor.rgb = pow(lastColor.rgb,vec3(1.0/2.2)); // Gamma correction\n    gl_FragColor.a = albedo.a;\n    #ifdef ATTRIBUTE_COLOR_ENABLED\n    gl_FragColor.a *= vColor.a;\n    #endif\n  }\n#endif\n}\n}\n\n@Technique hitarea{\n  @Disable(BLEND)\n  @Pass{\n    FS_PREC(mediump,float)\n\n    #ifdef VS\n      attribute vec3 position;\n      uniform mat4 _matPVM;\n\n      void main(){\n        gl_Position = _matPVM * vec4(position,1.0);\n      }\n    #endif\n\n    #ifdef FS\n      @MESH_INDEX\n      uniform vec4 meshIndex;\n      void main(){\n        gl_FragColor = meshIndex;\n      }\n    #endif\n  }\n}\n\n@Technique depth{\n  @Pass{\n    @CullFace(FRONT)\n  FS_PREC(highp,float)\n\n  varying vec4 vPos;\n\n  vec3 EncodeFloatRGB( float v ) {\n    vec3 enc = vec3(1.0, 255.0, 65025.0) * v;\n    enc = fract(enc);\n    enc -= enc.yzz * vec3(1.0/255.0,1.0/255.0,0.0);\n    return enc;\n  }\n\n  float DecodeFloatRGB( vec3 rgb ) {\n    return dot( rgb, vec3(1.0, 1./255.0, 1./65025.0) );\n  }\n\n  #ifdef VS\n    attribute vec3 position;\n    uniform mat4 _matPVM;\n    void main(){\n      gl_Position = vPos= _matPVM * vec4(position,1.0);\n    }\n  #endif\n\n  #ifdef FS\n    void main(){\n      gl_FragColor.rgb = EncodeFloatRGB((vPos.z/vPos.w + 1.0)/2.0);\n      gl_FragColor.a = 1.0;\n    }\n  #endif\n  }\n}\n"

/***/ }),
/* 32 */
/***/ (function(module, exports) {

module.exports = "#define GR_FORWARD_SHADING_ENABLED\n@ReferMacro(DIR_LIGHT_COUNT,0)\n@ReferMacro(POINT_LIGHT_COUNT,0)\n@ReferMacro(SPOT_LIGHT_COUNT,0)\n@ReferMacro(SHADOW_MAP_COUNT,0)\n@ReferMacro(OES_TEXTURE_FLOAT,)\n\n#if DIR_LIGHT_COUNT > 0\n  #define USE_DIR_LIGHT\n#endif\n\n#if POINT_LIGHT_COUNT > 0\n  #define USE_POINT_LIGHT\n#endif\n\n#if SPOT_LIGHT_COUNT > 0\n  #define USE_SPOT_LIGHT\n#endif\n\n#if SHADOW_MAP_COUNT > 0\n  #define USE_SHADOW_MAP\n#endif\n\n#ifdef USE_DIR_LIGHT\n  @DIRECTIONAL_LIGHT_DIRECTIONS\n  uniform vec3 _dLightDir[DIR_LIGHT_COUNT];\n\n  @DIRECTIONAL_LIGHT_COLORS\n  uniform vec3 _dLightColor[DIR_LIGHT_COUNT];\n\n  @DIRECTIONAL_LIGHT_PARAMS\n  uniform vec4 _dLightParams[DIR_LIGHT_COUNT];\n#endif\n\n#ifdef USE_POINT_LIGHT\n\n  @POINT_LIGHT_POSITIONS\n  uniform vec3 _pLightPosition[POINT_LIGHT_COUNT];\n\n  @POINT_LIGHT_COLORS\n  uniform vec3 _pLightColor[POINT_LIGHT_COUNT];\n\n  @POINT_LIGHT_PARAMS\n  uniform vec2 _pLightParam[POINT_LIGHT_COUNT];\n\n#endif\n\n#ifdef USE_SPOT_LIGHT\n\n  @SPOT_LIGHT_POSITIONS\n  uniform vec3 _sLightPosition[SPOT_LIGHT_COUNT];\n\n  @SPOT_LIGHT_DIRECTIONS\n  uniform vec3 _sLightDir[SPOT_LIGHT_COUNT];\n\n  @SPOT_LIGHT_COLORS\n  uniform vec3 _sLightColor[SPOT_LIGHT_COUNT];\n\n  @SPOT_LIGHT_PARAMS\n  uniform vec4 _sLightParam[SPOT_LIGHT_COUNT];\n#endif\n\n#ifdef USE_SHADOW_MAP\n  @SHADOW_MAP_ELEMENT_COUNT\n  uniform vec2 _shadowMapElementCount;\n\n  @SHADOW_MAP_PIXEL_SIZE\n  uniform float _shadowMapPixelSize;\n\n  @SHADOW_MATRICES\n  uniform sampler2D _lightMatrices;\n\n  @SHADOW_MATRICES_COUNT\n  uniform float _lightMatricesCount;\n\n  @SHADOW_MAP_TEXTURE\n  uniform sampler2D _shadowMapTexture;\n\n  @{default:0.01}\n  uniform float shadowBias;\n\n  highp float decodeFloatRGB( vec3 rgb ) {\n    return dot( rgb, vec3(1.0, 1./255.0, 1./65025.0) );\n  }\n#endif\n\n// Define simple shading params\nstruct pbr_params{\n    vec3 diffuseColor;\n    vec3 f0;\n    float alpha;\n    float roughness;\n};\nfloat lambert(vec3 lightDirection,vec3 surfaceNormal) {\n  return max(0.0, dot(lightDirection, surfaceNormal));\n}\n\nfloat ctd_GGX_Distribution(pbr_params param,vec3 l,vec3 v,vec3 n,vec3 h){\n  float alpha2 = pow(param.alpha,2.0);\n  float nh2 = pow(dot(n,h),2.0);\n  return alpha2/(PI*pow(nh2*(alpha2 - 1.0) + 1.0,2.0));\n}\n\nfloat ctg_GGX_SingleGeometryTerm(pbr_params param,vec3 n,vec3 v){\n  float d = dot(n,v);\n  return 2.*d /(d + sqrt(d*d + param.alpha*param.alpha*(1. - d*d)));\n}\n\nvec3 ctf_Schlick(pbr_params param,vec3 l,vec3 v,vec3 n,vec3 h){\n  vec3 f0 = param.f0;\n  float vh = dot(v,n);\n  return f0 + pow(1.0-vh,5.0) * (vec3(1.0) - f0);\n}\n\nvec3 cookTorranceBRDF(pbr_params param,vec3 l,vec3 v,vec3 n){\n  vec3 h = normalize(l+v);\n  return  ctf_Schlick(param,l,v,n,h) * ctd_GGX_Distribution(param,l,v,n,h) * ctg_GGX_SingleGeometryTerm(param,n,l) * ctg_GGX_SingleGeometryTerm(param,n,v)/(4.0 * dot(l,n) * dot(v,n));\n}\n\nvec3 BRDF(pbr_params params,vec3 li,vec3 lo,vec3 n){\n  return params.diffuseColor/PI + cookTorranceBRDF(params,li,lo,n);\n}\n#ifdef USE_DIR_LIGHT\n\n#ifdef USE_SHADOW_MAP\n\n  bool isUVRegion(vec2 uv){\n    return all(bvec4(greaterThan(uv,vec2(0,0)),lessThan(uv,vec2(1,1))));\n  }\n\n  vec2 correctUV(vec2 uv,float index){\n    float i = fract(index / _shadowMapElementCount.x) * _shadowMapElementCount.x;\n    float j = (index - i) / _shadowMapElementCount.x;\n    return vec2((i + uv.x)/_shadowMapElementCount.x,(j + uv.y)/_shadowMapElementCount.y);\n  }\n\n  float shadowCoefficient(vec3 fragPosition,highp mat4 lightMatrix,float index){\n    highp vec4 lPos = lightMatrix * vec4(fragPosition,1.0);\n    if(any(bvec2(lPos.z/lPos.w > 1.0,lPos.z/lPos.w < -1.0))){\n      return 1.0;\n    }\n    vec2 bUV = lPos.xy / lPos.w / 2.0 + vec2(0.5);\n    highp float od = (lPos.z/lPos.w + 1.0)/2.0;\n    float fill = 0.0;\n    float N = 0.;\n    // PCF sampling\n    vec2 lUV = bUV;\n    if(isUVRegion(lUV)){\n      highp float d = decodeFloatRGB(texture2D(_shadowMapTexture,correctUV(lUV,index)).rgb);\n      fill += step(shadowBias,od-d);\n      N++;\n    }\n    lUV = bUV + vec2(_shadowMapPixelSize,0);\n    if(isUVRegion(lUV)){\n      highp float d = decodeFloatRGB(texture2D(_shadowMapTexture,correctUV(lUV,index)).rgb);\n      fill += step(shadowBias,od-d);\n      N++;\n    }\n    lUV = bUV + vec2(-_shadowMapPixelSize,0);\n    if(isUVRegion(lUV)){\n      highp float d = decodeFloatRGB(texture2D(_shadowMapTexture,correctUV(lUV,index)).rgb);\n      fill += step(shadowBias,od-d);\n      N++;\n    }\n    lUV = bUV + vec2(0,_shadowMapPixelSize);\n    if(isUVRegion(lUV)){\n      highp float d = decodeFloatRGB(texture2D(_shadowMapTexture,correctUV(lUV,index)).rgb);\n      fill += step(shadowBias,od-d);\n      N++;\n    }\n    lUV = bUV + vec2(0,-_shadowMapPixelSize);\n    if(isUVRegion(lUV)){\n      highp float d = decodeFloatRGB(texture2D(_shadowMapTexture,correctUV(lUV,index)).rgb);\n      fill += step(shadowBias,od-d);\n      N++;\n    }\n    if(N > 4.0){\n      return 1.0 - fill/N;\n    }\n    return 1.0;\n  }\n\n  highp vec4 fromLightMatrices(vec2 uv){\n    return texture2D(_lightMatrices,uv);\n  }\n\n  highp mat4 fetchLightMatrix(float index){\n    float y = 1.0 / _lightMatricesCount * (index  + 0.5);\n    return mat4(\n      fromLightMatrices(vec2(0.125,y)),\n      fromLightMatrices(vec2(0.375,y)),\n      fromLightMatrices(vec2(0.625,y)),\n      fromLightMatrices(vec2(0.875,y))\n      );\n  }\n#endif\n\n  vec3 directionalLight(pbr_params param,vec3 fragNormal,vec3 fragPosition){\n    vec3 result = vec3(0,0,0);\n    for(int i = 0; i < DIR_LIGHT_COUNT;i++){\n      vec3 lI = lambert(fragNormal,-_dLightDir[i]) * _dLightColor[i];\n      float sc = 1.0;\n      #ifdef USE_SHADOW_MAP // Shadowmap Calculations\n        if(_dLightParams[i].x >= 0.0){\n          highp mat4 lMat = fetchLightMatrix(_dLightParams[i].x);\n          sc = shadowCoefficient(fragPosition,lMat,_dLightParams[i].x);\n        }\n      #endif\n      vec3 lColor = sc * lI * BRDF(param,-_dLightDir[i],normalize(_cameraPosition - fragPosition),fragNormal);\n      result += lColor;\n    }\n    return result;\n  }\n#endif\n#ifdef USE_POINT_LIGHT\n// BRDF arguments\n// param,(normalized fragment to light verctor),(normalized fragment to camera vector), fragment position\n  vec3 pointLight(pbr_params param,vec3 fragNormal,vec3 fragPosition){\n    vec3 result = vec3(0,0,0);\n    for(int i = 0; i < POINT_LIGHT_COUNT;i++){\n      vec3 p2l = _pLightPosition[i] - fragPosition;\n      float d = length(p2l);\n      vec2 lightParam = _pLightParam[i];\n      float atten = max(0.,1.0-d/lightParam.x)/(1.0 + lightParam.y*lightParam.y*d);\n      p2l = normalize(p2l);\n      vec3 lI = lambert(fragNormal,p2l)* _pLightColor[i] * atten;\n      vec3 lColor = lI  * BRDF(param,p2l,normalize(_cameraPosition - fragPosition),fragNormal);\n      result += lColor ;\n    }\n    return result;\n  }\n#endif\n#ifdef USE_SPOT_LIGHT\n  vec3 spotLight(pbr_params param,vec3 fragNormal,vec3 fragPosition){\n    vec3 result = vec3(0);\n    for(int i = 0; i < SPOT_LIGHT_COUNT; i++){\n      float innerConeAngle = _sLightParam[i].x;\n      float outerConeAngle = _sLightParam[i].y;\n      float outCos=cos(outerConeAngle);\n      float innCos=cos(innerConeAngle);\n\n      vec3 p2l = _sLightPosition[i] - fragPosition;\n      float d = length(p2l);\n      p2l=normalize(p2l);\n      float c = dot(-p2l,normalize(_sLightDir[i]));\n      float decay = _sLightParam[i].z;//減衰係数\n      decay = 1.;\n      float angleDecay = decay;\n      //\n      float distDecayCoefficient = 1.0 / (d * d);\n      float angleDecayCoefficient = pow(clamp((c-outCos)/(innCos-outCos),0.0,1.0),angleDecay);\n      //\n      vec3 lI = lambert(p2l,fragNormal)*_sLightColor[i]*angleDecayCoefficient*distDecayCoefficient;\n      vec3 lColor = lI * BRDF(param,p2l,normalize(_cameraPosition - fragPosition),fragNormal);\n      result += lColor;\n    }\n    return result;\n  }\n#endif\n  vec3 shading(pbr_params params,vec3 fragNormal,vec3 fragPosition){\n    vec3 lightingColor = vec3(0);\n    #ifdef USE_DIR_LIGHT\n    lightingColor.rgb += directionalLight(params,fragNormal,fragPosition);\n    #endif\n    #ifdef USE_POINT_LIGHT\n    lightingColor.rgb += pointLight(params,fragNormal,fragPosition);\n    #endif\n    #ifdef USE_SPOT_LIGHT\n    lightingColor.rgb += spotLight(params,fragNormal,fragPosition);\n    #endif\n    return lightingColor;\n  }\n"

/***/ })
/******/ ]);
});
//# sourceMappingURL=grimoire-forward-shading.js.map

/***/ }),
/* 12 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Components.TransformComponent;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 96);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.Node.Component;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _ResourceBase2 = __webpack_require__(2);

var _ResourceBase3 = _interopRequireDefault(_ResourceBase2);

var _TextureSizeCalculator = __webpack_require__(5);

var _TextureSizeCalculator2 = _interopRequireDefault(_TextureSizeCalculator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Texture2D = function (_ResourceBase) {
    _inherits(Texture2D, _ResourceBase);

    function Texture2D(gl) {
        _classCallCheck(this, Texture2D);

        var _this = _possibleConstructorReturn(this, (Texture2D.__proto__ || Object.getPrototypeOf(Texture2D)).call(this, gl));

        _this._texParameterChanged = true;
        _this._magFilter = WebGLRenderingContext.LINEAR;
        _this._minFilter = WebGLRenderingContext.LINEAR;
        _this._wrapS = WebGLRenderingContext.REPEAT;
        _this._wrapT = WebGLRenderingContext.REPEAT;
        if (!Texture2D.maxTextureSize) {
            Texture2D.maxTextureSize = gl.getParameter(WebGLRenderingContext.MAX_TEXTURE_SIZE);
        }
        _this.texture = gl.createTexture();
        return _this;
    }

    _createClass(Texture2D, [{
        key: "update",
        value: function update(levelOrImage, widthOrConfig, height, border, format, type, pixels, config) {
            this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, this.texture);
            var uploadConfig = void 0;
            var image = void 0;
            var width = void 0;
            var level = void 0;
            if (height === void 0) {
                uploadConfig = widthOrConfig || {
                    flipY: false,
                    premultipliedAlpha: false
                };
                image = levelOrImage;
            } else {
                level = levelOrImage;
                width = widthOrConfig;
                uploadConfig = config || {
                    flipY: false,
                    premultipliedAlpha: false
                };
            }
            if (uploadConfig.flipY === void 0) {
                uploadConfig.flipY = false;
            }
            if (uploadConfig.premultipliedAlpha === void 0) {
                uploadConfig.premultipliedAlpha = false;
            }
            this.gl.pixelStorei(WebGLRenderingContext.UNPACK_FLIP_Y_WEBGL, uploadConfig.flipY ? 1 : 0);
            this.gl.pixelStorei(WebGLRenderingContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL, uploadConfig.premultipliedAlpha ? 1 : 0);
            if (height === void 0) {
                if (image instanceof HTMLImageElement) {
                    this.gl.texImage2D(WebGLRenderingContext.TEXTURE_2D, 0, WebGLRenderingContext.RGBA, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE, this._justifyImage(image));
                } else if (image instanceof HTMLCanvasElement) {
                    this.gl.texImage2D(WebGLRenderingContext.TEXTURE_2D, 0, WebGLRenderingContext.RGBA, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE, this._justifyCanvas(image));
                } else if (image instanceof HTMLVideoElement) {
                    this.gl.texImage2D(WebGLRenderingContext.TEXTURE_2D, 0, WebGLRenderingContext.RGBA, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE, this._justifyVideo(image));
                }
            } else {
                if (pixels === void 0) {
                    pixels = null;
                }
                this.gl.texImage2D(WebGLRenderingContext.TEXTURE_2D, level, format, Math.max(1, width), Math.max(1, height), border, format, type, pixels);
            }
            this._ensureMipmap();
            this.valid = true;
        }
    }, {
        key: "register",
        value: function register(registerNumber) {
            this.gl.activeTexture(WebGLRenderingContext.TEXTURE0 + registerNumber);
            this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, this.texture);
            if (this._texParameterChanged) {
                this._updateTexParameter();
            }
        }
    }, {
        key: "destroy",
        value: function destroy() {
            _get(Texture2D.prototype.__proto__ || Object.getPrototypeOf(Texture2D.prototype), "destroy", this).call(this);
            this.gl.deleteTexture(this.texture);
        }
        // There should be more effective way to resize texture

    }, {
        key: "_justifyImage",
        value: function _justifyImage(img) {
            var w = img.naturalWidth,
                h = img.naturalHeight;
            var size = _TextureSizeCalculator2.default.getPow2Size(w, h);
            if (w !== size.width || h !== size.height) {
                var canv = Texture2D._resizerCanvas;
                canv.height = size.height;
                canv.width = size.width;
                canv.getContext("2d").drawImage(img, 0, 0, w, h, 0, 0, size.width, size.height);
                return canv;
            }
            return img;
        }
    }, {
        key: "_justifyCanvas",
        value: function _justifyCanvas(canvas) {
            var w = canvas.width;
            var h = canvas.height;
            var size = _TextureSizeCalculator2.default.getPow2Size(w, h);
            if (w !== size.width || h !== size.height) {
                canvas.width = size.width;
                canvas.height = size.height;
            }
            return canvas;
        }
    }, {
        key: "_justifyVideo",
        value: function _justifyVideo(video) {
            var w = video.videoWidth,
                h = video.videoHeight;
            var size = _TextureSizeCalculator2.default.getPow2Size(w, h); // largest 2^n integer that does not exceed s
            if (w !== size.width || h !== size.height) {
                var canv = Texture2D._resizerCanvas;
                canv.height = size.height;
                canv.width = size.width;
                canv.getContext("2d").drawImage(video, 0, 0, w, h, 0, 0, size.width, size.height);
                return canv;
            }
            return video;
        }
    }, {
        key: "_updateTexParameter",
        value: function _updateTexParameter() {
            this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MIN_FILTER, this._minFilter);
            this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MAG_FILTER, this._magFilter);
            this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_S, this._wrapS);
            this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_T, this._wrapT);
            this._texParameterChanged = false;
        }
    }, {
        key: "_ensureMipmap",
        value: function _ensureMipmap() {
            if (Texture2D._filtersNeedsMipmap.indexOf(this.magFilter) >= 0 || Texture2D._filtersNeedsMipmap.indexOf(this.minFilter) >= 0) {
                this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, this.texture);
                this.gl.generateMipmap(WebGLRenderingContext.TEXTURE_2D);
            }
        }
    }, {
        key: "magFilter",
        get: function get() {
            return this._magFilter;
        },
        set: function set(filter) {
            if (this._magFilter !== filter) {
                this._texParameterChanged = true;
                this._magFilter = filter;
                this._ensureMipmap();
            }
        }
    }, {
        key: "minFilter",
        get: function get() {
            return this._minFilter;
        },
        set: function set(filter) {
            if (this._minFilter !== filter) {
                this._texParameterChanged = true;
                this._minFilter = filter;
                this._ensureMipmap();
            }
        }
    }, {
        key: "wrapS",
        get: function get() {
            return this._wrapS;
        },
        set: function set(filter) {
            if (this._wrapS !== filter) {
                this._texParameterChanged = true;
                this._wrapS = filter;
            }
        }
    }, {
        key: "wrapT",
        get: function get() {
            return this._wrapT;
        },
        set: function set(filter) {
            if (this._wrapT !== filter) {
                this._texParameterChanged = true;
                this._wrapT = filter;
            }
        }
    }], [{
        key: "generateDefaultTexture",
        value: function generateDefaultTexture(gl) {
            Texture2D.defaultTextures.set(gl, null); // for preventing called this method recursively by instanciating default texture
            var texture = new Texture2D(gl);
            texture.update(0, 1, 1, 0, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE, new Uint8Array([0, 0, 0, 0]));
            Texture2D.defaultTextures.set(gl, texture);
        }
    }]);

    return Texture2D;
}(_ResourceBase3.default);

exports.default = Texture2D;

Texture2D.defaultTextures = new Map();
Texture2D._resizerCanvas = document.createElement("canvas");
/**
 * ミップマップの更新が必要なフィルタ
 * @type {number[]}
 */
Texture2D._filtersNeedsMipmap = [WebGLRenderingContext.LINEAR_MIPMAP_LINEAR, WebGLRenderingContext.LINEAR_MIPMAP_NEAREST, WebGLRenderingContext.NEAREST_MIPMAP_LINEAR, WebGLRenderingContext.NEAREST_MIPMAP_NEAREST];

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ResourceBase = function () {
    function ResourceBase(gl) {
        _classCallCheck(this, ResourceBase);

        this.gl = gl;
        this.destroyed = false;
        if (!gl) {
            throw new Error("missing WebGLRenderingContext");
        }
        this.index = ResourceBase._maxIndex++;
        this.valid = false;
    }

    _createClass(ResourceBase, [{
        key: "destroy",
        value: function destroy() {
            this.destroyed = true;
        }
    }, {
        key: "valid",
        get: function get() {
            return this._valid;
        },
        set: function set(val) {
            var _this = this;

            if (this._valid === val) {
                return;
            }
            this._valid = val;
            if (this._valid) {
                this._validResolve(this);
            } else {
                this.validPromise = new Promise(function (resolve) {
                    _this._validResolve = resolve;
                });
            }
        }
    }]);

    return ResourceBase;
}();

ResourceBase._maxIndex = 0;
exports.default = ResourceBase;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Matrix = __webpack_require__(9);

var _Matrix2 = _interopRequireDefault(_Matrix);

var _Vector = __webpack_require__(10);

var _Vector2 = _interopRequireDefault(_Vector);

var _Vector3 = __webpack_require__(11);

var _Vector4 = _interopRequireDefault(_Vector3);

var _GLM = __webpack_require__(29);

var _GLM2 = _interopRequireDefault(_GLM);

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var mat4 = _GLM2.default.mat4,
    vec3 = _GLM2.default.vec3,
    vec4 = _GLM2.default.vec4;
/**
 * シーン中に存在する物体の変形を司るコンポーネント
 * このコンポーネントによって物体の座標や回転量、拡大料などが定義されます。
 * シーン中の全ての物体は必ずこのコンポーネントを含まなければなりません。
 */

var TransformComponent = function (_Component) {
    _inherits(TransformComponent, _Component);

    function TransformComponent() {
        _classCallCheck(this, TransformComponent);

        /**
         * Local transform matrix representing scaling,rotation and translation of attached object.
         * @return {[type]} [description]
         */
        var _this = _possibleConstructorReturn(this, (TransformComponent.__proto__ || Object.getPrototypeOf(TransformComponent)).apply(this, arguments));

        _this.localTransform = new _Matrix2.default();
        /**
         * The children transform should be notified when this transform was updated.
         * @type {TransformComponent[]}
         */
        _this._children = [];
        /**
         * Calculation cache to
         * @return {[type]} [description]
         */
        _this._cachePVM = new _Matrix2.default();
        _this._cacheVM = new _Matrix2.default();
        /**
         * Cache of forward direction of this object
         */
        _this._forward = new _Vector2.default([0, 0, -1, 0]);
        /**
         * Cache of up direction of this object.
         */
        _this._up = new _Vector2.default([0, 1, 0, 0]);
        /**
         * Cache of right direction of this object.
         */
        _this._right = new _Vector2.default([1, 0, 0, 0]);
        _this._globalPosition = new _Vector2.default([0, 0, 0]);
        _this._globalScale = new _Vector2.default([1, 1, 1]);
        _this._matrixTransformMode = false;
        _this._updatedTransform = true;
        _this._globalTransform = new _Matrix2.default();
        return _this;
    }
    /**
     * Global transform that consider parent transform and local transform
     * @return {[type]} [description]
     */


    _createClass(TransformComponent, [{
        key: "calcPVM",
        value: function calcPVM(camera) {
            mat4.mul(this._cachePVM.rawElements, camera.ProjectionViewMatrix.rawElements, this.globalTransform.rawElements);
            return this._cachePVM;
        }
    }, {
        key: "calcVM",
        value: function calcVM(camera) {
            mat4.mul(this._cacheVM.rawElements, camera.ViewMatrix.rawElements, this.globalTransform.rawElements);
            return this._cacheVM;
        }
    }, {
        key: "$awake",
        value: function $awake() {
            var _this2 = this;

            // register observers
            this.getAttributeRaw("position").watch(function (v) {
                _this2.notifyUpdateTransform();
            });
            this.getAttributeRaw("rotation").watch(function (v) {
                _this2.notifyUpdateTransform();
            });
            this.getAttributeRaw("scale").watch(function (v) {
                _this2.notifyUpdateTransform();
            });
            // assign attribute values to field
            this.__bindAttributes();
        }
    }, {
        key: "$mount",
        value: function $mount() {
            this._parentTransform = this.node.parent.getComponent(TransformComponent);
            if (this._parentTransform) {
                this._parentTransform._children.push(this);
            }
            this._updateTransform();
        }
    }, {
        key: "$unmount",
        value: function $unmount() {
            if (this._parentTransform) {
                this._parentTransform._children.splice(this._parentTransform._children.indexOf(this), 1);
                this._parentTransform = null;
            }
        }
    }, {
        key: "notifyUpdateTransform",
        value: function notifyUpdateTransform() {
            if (!this._updatedTransform) {
                this._updatedTransform = true;
                this._children.forEach(function (c) {
                    return c.notifyUpdateTransform();
                });
            }
        }
    }, {
        key: "applyMatrix",
        value: function applyMatrix(mat) {
            var scale = mat.getScaling();
            this.setAttribute("scale", scale);
            // TODO remove this line after gl-matrix issue was solved
            mat = mat.multiplyWith(_Matrix2.default.scale(new _Vector2.default(1 / scale.X, 1 / scale.Y, 1 / scale.Z)));
            this.setAttribute("rotation", mat.getRotation());
            this.setAttribute("position", mat.getTranslation());
        }
    }, {
        key: "_updateTransform",
        value: function _updateTransform(noDirectionalUpdate) {
            if (!this._updatedTransform) {
                return;
            }
            this._updatedTransform = false;
            mat4.fromRotationTranslationScale(this.localTransform.rawElements, this.rotation.rawElements, this.position.rawElements, this.scale.rawElements);
            this._updateGlobalTransform(noDirectionalUpdate);
        }
        /**
         * Update global transoform.
         */

    }, {
        key: "_updateGlobalTransform",
        value: function _updateGlobalTransform(noDirectionalUpdate) {
            if (!this._parentTransform) {
                mat4.copy(this._globalTransform.rawElements, this.localTransform.rawElements);
            } else {
                mat4.mul(this._globalTransform.rawElements, this._parentTransform.globalTransform.rawElements, this.localTransform.rawElements);
            }
            if (this._globalTransformInverse) {
                mat4.invert(this._globalTransformInverse.rawElements, this._globalTransform.rawElements);
            }
            if (!noDirectionalUpdate) {
                this._updateDirections();
            }
            this._updateGlobalProperty();
            this.node.emit("transformUpdated", this);
        }
    }, {
        key: "_updateDirections",
        value: function _updateDirections() {
            vec4.transformMat4(this._forward.rawElements, TransformComponent._forwardBase.rawElements, this.globalTransform.rawElements);
            vec4.transformMat4(this._up.rawElements, TransformComponent._upBase.rawElements, this.globalTransform.rawElements);
            vec4.transformMat4(this._right.rawElements, TransformComponent._rightBase.rawElements, this.globalTransform.rawElements);
        }
    }, {
        key: "_updateGlobalProperty",
        value: function _updateGlobalProperty() {
            if (!this._parentTransform) {
                vec3.copy(this._globalPosition.rawElements, this.position.rawElements);
                vec3.copy(this._globalScale.rawElements, this.scale.rawElements);
            } else {
                vec3.transformMat4(this._globalPosition.rawElements, this.position.rawElements, this._parentTransform.globalTransform.rawElements);
                vec3.transformMat4(this._globalScale.rawElements, this.scale.rawElements, this._parentTransform.globalTransform.rawElements); // TODO buggy
            }
        }
    }, {
        key: "globalTransform",
        get: function get() {
            this._updateTransform();
            return this._globalTransform;
        }
    }, {
        key: "globalTransformInverse",
        get: function get() {
            if (!this._globalTransformInverse) {
                this._globalTransformInverse = new _Matrix2.default();
            }
            this._updateTransform();
            return this._globalTransformInverse;
        }
    }, {
        key: "globalPosition",
        get: function get() {
            this._updateTransform();
            return this._globalPosition;
        }
    }, {
        key: "globalScale",
        get: function get() {
            this._updateTransform();
            return this._globalScale;
        }
    }, {
        key: "forward",
        get: function get() {
            this._updateTransform();
            return this._forward;
        }
    }, {
        key: "up",
        get: function get() {
            this._updateTransform();
            return this._up;
        }
    }, {
        key: "right",
        get: function get() {
            this._updateTransform();
            return this._right;
        }
    }]);

    return TransformComponent;
}(_Component3.default);

exports.default = TransformComponent;

TransformComponent.attributes = {
    /**
     * この物体の座標
     */
    position: {
        converter: "Vector3",
        default: [0, 0, 0]
    },
    /**
     * この物体の回転量
     */
    rotation: {
        converter: "Rotation3",
        default: [0, 0, 0, 1]
    },
    /**
     * この物体の拡大率
     */
    scale: {
        converter: "Vector3",
        default: [1, 1, 1]
    }
};
/**
 * Source vector to be multiplied with global transform to calculate forward direction of attached object.
 */
TransformComponent._forwardBase = new _Vector4.default(0, 0, -1, 0);
/**
 * Source vector to be multiplied with global transform to calculate up direction of attached object.
 */
TransformComponent._upBase = new _Vector4.default(0, 1, 0, 0);
/**
 * Source vector to be multiplied with global transform to calculate right direction of attached object.
 */
TransformComponent._rightBase = new _Vector4.default(1, 0, 0, 0);

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Parser = __webpack_require__(84);

var _Parser2 = _interopRequireDefault(_Parser);

var _MacroRegistory = __webpack_require__(64);

var _MacroRegistory2 = _interopRequireDefault(_MacroRegistory);

var _TextFileResolver = __webpack_require__(31);

var _TextFileResolver2 = _interopRequireDefault(_TextFileResolver);

var _Material = __webpack_require__(25);

var _Material2 = _interopRequireDefault(_Material);

var _NameResolver = __webpack_require__(23);

var _NameResolver2 = _interopRequireDefault(_NameResolver);

var _header = __webpack_require__(90);

var _header2 = _interopRequireDefault(_header);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

/**
 * Manage materialGenerators for materials.
 * Materials can be instanciated with this instance.
 * Every gl reference can contain 1 of MaterialFactory at most.
 */
var MaterialFactory = function () {
    function MaterialFactory(gl) {
        _classCallCheck(this, MaterialFactory);

        this.gl = gl;
        this.shaderHeader = MaterialFactory.defaultShaderHeader;
        this.macro = new _MacroRegistory2.default();
        if (MaterialFactory.factories.has(gl)) {
            throw new Error("MaterialFactory can not be instanciated dupelicately for a WebGLRenderingContext.");
        }
        MaterialFactory.factories.set(gl, this);
    }
    /**
     * Obtain an instance of MaterialFactory from WebGLRenderingContext
     * @param  {WebGLRenderingContext} gl [description]
     * @return {MaterialFactory}          [description]
     */


    _createClass(MaterialFactory, [{
        key: "instanciate",
        value: function instanciate(typeName) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                var generator;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return MaterialFactory.materialGeneratorResolver.get(typeName);

                            case 2:
                                generator = _context.sent;
                                return _context.abrupt("return", generator(this));

                            case 4:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }], [{
        key: "get",
        value: function get(gl) {
            var factory = this.factories.get(gl);
            if (!factory) {
                throw new Error("There was no associated MaterialFactory with specified WebGLRenderingContext");
            }
            return factory;
        }
    }, {
        key: "addMaterialType",
        value: function addMaterialType(typeName, materialGenerator) {
            this.materialGeneratorResolver.register(typeName, Promise.resolve(materialGenerator));
        }
        /**
         * Add source of .sort material as specified typename.
         * @param  {string}        typeName [description]
         * @param  {string}        source   [description]
         * @return {Promise<void>}          [description]
         */

    }, {
        key: "addSORTMaterial",
        value: function addSORTMaterial(typeName, source) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee3() {
                var _this = this;

                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                return _context3.abrupt("return", this.materialGeneratorResolver.register(typeName, function () {
                                    return __awaiter(_this, void 0, void 0, regeneratorRuntime.mark(function _callee2() {
                                        var techniques;
                                        return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                            while (1) {
                                                switch (_context2.prev = _context2.next) {
                                                    case 0:
                                                        _context2.next = 2;
                                                        return _Parser2.default.parse(source);

                                                    case 2:
                                                        techniques = _context2.sent;
                                                        return _context2.abrupt("return", function (factory) {
                                                            return new _Material2.default(factory.gl, techniques);
                                                        });

                                                    case 4:
                                                    case "end":
                                                        return _context2.stop();
                                                }
                                            }
                                        }, _callee2, this);
                                    }));
                                }()));

                            case 1:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));
        }
        /**
         * Add source of .sort material from external url as specified typeName.
         * @param  {string}        typeName [description]
         * @param  {string}        url      [description]
         * @return {Promise<void>}          [description]
         */

    }, {
        key: "addSORTMaterialFromURL",
        value: function addSORTMaterialFromURL(typeName, url) {
            var _this2 = this;

            return this.materialGeneratorResolver.register(typeName, function () {
                return __awaiter(_this2, void 0, void 0, regeneratorRuntime.mark(function _callee4() {
                    var source, techniques;
                    return regeneratorRuntime.wrap(function _callee4$(_context4) {
                        while (1) {
                            switch (_context4.prev = _context4.next) {
                                case 0:
                                    _context4.next = 2;
                                    return _TextFileResolver2.default.resolve(url);

                                case 2:
                                    source = _context4.sent;
                                    _context4.next = 5;
                                    return _Parser2.default.parse(source);

                                case 5:
                                    techniques = _context4.sent;
                                    return _context4.abrupt("return", function (factory) {
                                        return new _Material2.default(factory.gl, techniques);
                                    });

                                case 7:
                                case "end":
                                    return _context4.stop();
                            }
                        }
                    }, _callee4, this);
                }));
            }());
        }
    }]);

    return MaterialFactory;
}();
/**
 * Map for gl reference and MaterialFactory.
 * @type {Map<WebGLRenderingContext,MaterialFactory>}
 */


exports.default = MaterialFactory;
MaterialFactory.factories = new Map();
MaterialFactory.defaultShaderHeader = _header2.default;
MaterialFactory.materialGeneratorResolver = new _NameResolver2.default();

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Texture2D = __webpack_require__(1);

var _Texture2D2 = _interopRequireDefault(_Texture2D);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextureSizeCalculator = function () {
    function TextureSizeCalculator() {
        _classCallCheck(this, TextureSizeCalculator);
    }

    _createClass(TextureSizeCalculator, null, [{
        key: "getPow2Size",
        value: function getPow2Size(width, height) {
            var nw = Math.pow(2, Math.ceil(Math.log2(width))); // largest 2^n integer that does not exceed s
            var nh = Math.pow(2, Math.ceil(Math.log2(height))); // largest 2^n integer that does not exceed s
            return {
                width: Math.max(1, Math.min(nw, _Texture2D2.default.maxTextureSize)),
                height: Math.max(1, Math.min(nh, _Texture2D2.default.maxTextureSize))
            };
        }
    }]);

    return TextureSizeCalculator;
}();

exports.default = TextureSizeCalculator;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Texture2D = __webpack_require__(1);

var _Texture2D2 = _interopRequireDefault(_Texture2D);

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TextureComponent = function (_Component) {
    _inherits(TextureComponent, _Component);

    function TextureComponent() {
        _classCallCheck(this, TextureComponent);

        return _possibleConstructorReturn(this, (TextureComponent.__proto__ || Object.getPrototypeOf(TextureComponent)).apply(this, arguments));
    }

    _createClass(TextureComponent, [{
        key: "$mount",
        value: function $mount() {
            var _this2 = this;

            this.texture = new _Texture2D2.default(this.companion.get("gl"));
            this.texture.magFilter = this.getAttribute("magFilter");
            this.texture.minFilter = this.getAttribute("minFilter");
            this.texture.wrapT = this.getAttribute("wrapT");
            this.texture.wrapS = this.getAttribute("wrapS");
            this.getAttributeRaw("magFilter").watch(function (v) {
                return _this2.texture.magFilter = v;
            });
            this.getAttributeRaw("minFilter").watch(function (v) {
                return _this2.texture.minFilter = v;
            });
            this.getAttributeRaw("wrapS").watch(function (v) {
                return _this2.texture.wrapS = v;
            });
            this.getAttributeRaw("wrapT").watch(function (v) {
                return _this2.texture.wrapT = v;
            });
        }
    }]);

    return TextureComponent;
}(_Component3.default);

exports.default = TextureComponent;

TextureComponent.attributes = {
    minFilter: {
        converter: "Enum",
        default: "LINEAR",
        table: {
            LINEAR: WebGLRenderingContext.LINEAR,
            NEAREST: WebGLRenderingContext.NEAREST,
            NEAREST_MIPMAP_NEAREST: WebGLRenderingContext.NEAREST_MIPMAP_NEAREST,
            NEAREST_MIPMAP_LINEAR: WebGLRenderingContext.NEAREST_MIPMAP_LINEAR,
            LINEAR_MIPMAP_NEAREST: WebGLRenderingContext.LINEAR_MIPMAP_NEAREST,
            LINEAR_MIPMAP_LINEAR: WebGLRenderingContext.LINEAR_MIPMAP_LINEAR
        }
    },
    magFilter: {
        converter: "Enum",
        default: "LINEAR",
        table: {
            LINEAR: WebGLRenderingContext.LINEAR,
            NEAREST: WebGLRenderingContext.NEAREST
        }
    },
    wrapS: {
        converter: "Enum",
        default: "REPEAT",
        table: {
            REPEAT: WebGLRenderingContext.REPEAT,
            MIRRORED_REPEAT: WebGLRenderingContext.MIRRORED_REPEAT,
            CLAMP_TO_EDGE: WebGLRenderingContext.CLAMP_TO_EDGE
        }
    },
    wrapT: {
        converter: "Enum",
        default: "REPEAT",
        table: {
            REPEAT: WebGLRenderingContext.REPEAT,
            MIRRORED_REPEAT: WebGLRenderingContext.MIRRORED_REPEAT,
            CLAMP_TO_EDGE: WebGLRenderingContext.CLAMP_TO_EDGE
        }
    }
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UniformResolverRegistry = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UniformResolverContainer = __webpack_require__(70);

var _UniformResolverContainer2 = _interopRequireDefault(_UniformResolverContainer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UniformResolverRegistry = exports.UniformResolverRegistry = function () {
    function UniformResolverRegistry() {
        _classCallCheck(this, UniformResolverRegistry);

        this._generators = {};
    }

    _createClass(UniformResolverRegistry, [{
        key: "add",
        value: function add(semantic, generator) {
            if (typeof generator !== "function") {
                throw new Error("secound argument of add must be function");
            }
            this._generators[semantic.toUpperCase()] = generator;
        }
    }, {
        key: "generateRegisterers",
        value: function generateRegisterers(material, passInfo) {
            var registerers = [],
                disposers = [],
                updators = {};
            for (var key in passInfo.uniforms) {
                var valueInfo = passInfo.uniforms[key];
                var semantic = valueInfo.semantic;
                var registeredGenerator = this._generators[semantic];
                if (!registeredGenerator) {
                    throw new Error("There was no suitable registerer for specified semantic " + semantic);
                }
                var registerer = registeredGenerator(valueInfo, material);
                if (typeof registerer === "function") {
                    registerers.push(registerer);
                } else {
                    registerers.push(registerer.register);
                    if (registerer.dispose) {
                        disposers.push(registerer.dispose);
                    }
                    if (registerer.update) {
                        updators[key] = registerer.update;
                    }
                }
            }
            return new _UniformResolverContainer2.default(registerers, disposers, updators);
        }
    }]);

    return UniformResolverRegistry;
}();

exports.default = new UniformResolverRegistry();

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HashCalculator = function () {
    function HashCalculator() {
        _classCallCheck(this, HashCalculator);
    }

    _createClass(HashCalculator, null, [{
        key: "calcHash",
        value: function calcHash(source) {
            var hash = 0;
            if (source.length === 0) return hash;
            for (var i = 0; i < source.length; i++) {
                var char = source.charCodeAt(i);
                hash = (hash << 5) - hash + char;
                hash = hash & hash; // Convert to 32bit integer
            }
            return hash;
        }
    }]);

    return HashCalculator;
}();

exports.default = HashCalculator;

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math.Matrix;

/***/ }),
/* 10 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math.Vector3;

/***/ }),
/* 11 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math.Vector4;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

var _Timer = __webpack_require__(88);

var _Timer2 = _interopRequireDefault(_Timer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 全体のループを管理しているコンポーネント。あまり直接ユーザーがいじることはありません。
 */
var LoopManagerComponent = function (_Component) {
    _inherits(LoopManagerComponent, _Component);

    function LoopManagerComponent() {
        _classCallCheck(this, LoopManagerComponent);

        var _this = _possibleConstructorReturn(this, (LoopManagerComponent.__proto__ || Object.getPrototypeOf(LoopManagerComponent)).apply(this, arguments));

        _this._loopActions = [];
        return _this;
    }

    _createClass(LoopManagerComponent, [{
        key: "$awake",
        value: function $awake() {
            var _this2 = this;

            this._registerNextLoop = window.requestAnimationFrame // if window.requestAnimationFrame is defined or undefined
            ? function () {
                window.requestAnimationFrame(_this2._loop.bind(_this2));
            } : function () {
                window.setTimeout(_this2._loop.bind(_this2), 1000 / 60);
            };
        }
    }, {
        key: "$mount",
        value: function $mount() {
            var _this3 = this;

            this.getAttributeRaw("loopEnabled").watch(function (attr) {
                if (attr) {
                    _this3._begin();
                }
            });
            this._timer = new _Timer2.default();
            this.getAttributeRaw("fpsRestriction").watch(function (attr) {
                _this3._timer.fpsRestriction = attr;
            }, true);
            this._timer.internalUpdate();
        }
    }, {
        key: "register",
        value: function register(action, priorty) {
            this._loopActions.push({
                action: action,
                priorty: priorty
            });
            this._loopActions.sort(function (a, b) {
                return a.priorty - b.priorty;
            });
        }
    }, {
        key: "_begin",
        value: function _begin() {
            this._registerNextLoop();
        }
    }, {
        key: "_loop",
        value: function _loop() {
            var _this4 = this;

            if (this._timer.internalUpdate()) {
                this.node.emit("loop", {
                    timer: this._timer
                });
                this._loopActions.forEach(function (a) {
                    return a.action(_this4._timer);
                });
            }
            this._registerNextLoop();
        }
    }]);

    return LoopManagerComponent;
}(_Component3.default);

LoopManagerComponent.attributes = {
    loopEnabled: {
        default: false,
        converter: "Boolean"
    },
    fpsRestriction: {
        default: 60,
        converter: "Number"
    }
};
exports.default = LoopManagerComponent;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DrawPriorty = __webpack_require__(78);

var _DrawPriorty2 = _interopRequireDefault(_DrawPriorty);

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

var _grimoirejs = __webpack_require__(28);

var _grimoirejs2 = _interopRequireDefault(_grimoirejs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

/**
 * マテリアルとマテリアルへの属性を管理するためのコンポーネント
 * このコンポーネントは将来的に`MeshRenderer`と統合されます。
 * 指定されたマテリアルの初期化の管理や、マテリアルによって動的に追加される属性の管理を行います、
 */
var MaterialContainerComponent = function (_Component) {
    _inherits(MaterialContainerComponent, _Component);

    function MaterialContainerComponent() {
        _classCallCheck(this, MaterialContainerComponent);

        var _this = _possibleConstructorReturn(this, (MaterialContainerComponent.__proto__ || Object.getPrototypeOf(MaterialContainerComponent)).apply(this, arguments));

        _this.materialArgs = {};
        _this.materialReady = false;
        _this.useMaterial = false;
        return _this;
    }

    _createClass(MaterialContainerComponent, [{
        key: "getDrawPriorty",
        value: function getDrawPriorty(depth) {
            if (!this.materialReady) {
                return Number.MAX_VALUE;
            }
            var orderCriteria = _DrawPriorty2.default[this._drawOrder ? this._drawOrder : this.material.techniques["default"].drawOrder];
            if (orderCriteria === void 0) {
                throw new Error("Specified drawing order \"" + this.material.techniques["default"].drawOrder + "\" is not defined");
            }
            if (orderCriteria.descending) {
                return (1.0 - depth / 10000) * orderCriteria.priorty;
            } else {
                return depth / 10000 * orderCriteria.priorty;
            }
        }
    }, {
        key: "$mount",
        value: function $mount() {
            this.getAttributeRaw("material").watch(this._onMaterialChanged.bind(this));
            this.companion.get("loader").register(this._onMaterialChanged());
            this.getAttributeRaw("drawOrder").boundTo("_drawOrder");
        }
        /**
         * When the material attribute is changed.
         */

    }, {
        key: "_onMaterialChanged",
        value: function _onMaterialChanged() {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                var materialPromise;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                materialPromise = this.getAttribute("material");

                                if (!(materialPromise === void 0)) {
                                    _context.next = 4;
                                    break;
                                }

                                this.useMaterial = false;
                                return _context.abrupt("return");

                            case 4:
                                this.useMaterial = true;
                                if (this._registeredAttributes) {
                                    this.__removeAttributes();
                                }
                                if (!this._materialComponent) {
                                    this._prepareInternalMaterial(materialPromise);
                                } else {
                                    this._prepareExternalMaterial(materialPromise);
                                }

                            case 7:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
        /**
         * Resolve materials only when the material required from external material component.
         * @return {Promise<void>} [description]
         */

    }, {
        key: "_prepareExternalMaterial",
        value: function _prepareExternalMaterial(materialPromise) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee2() {
                var loader, material;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                loader = this.companion.get("loader");

                                loader.register(materialPromise);
                                _context2.next = 4;
                                return materialPromise;

                            case 4:
                                material = _context2.sent;
                                // waiting for material load completion
                                this.material = material;
                                this.materialArgs = this._materialComponent.materialArgs;
                                this.materialReady = true;

                            case 8:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));
        }
    }, {
        key: "_prepareInternalMaterial",
        value: function _prepareInternalMaterial(materialPromise) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee3() {
                var _this2 = this;

                var loader, material, lastArguments, _loop, key, _ret, _loop2;

                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                // obtain promise of instanciating material
                                loader = this.companion.get("loader");

                                loader.register(materialPromise);

                                if (materialPromise) {
                                    _context3.next = 4;
                                    break;
                                }

                                return _context3.abrupt("return");

                            case 4:
                                _context3.next = 6;
                                return materialPromise;

                            case 6:
                                material = _context3.sent;
                                // waiting for material load completion
                                this.material = material;
                                lastArguments = material.arguments;

                                material.arguments = {};

                                _loop = function _loop(key) {
                                    _this2.__addAttribute(key, _this2.material.argumentDeclarations[key]);
                                    try {
                                        _this2.getAttributeRaw(key).watch(function (n) {
                                            _this2.material.setArgument(key, n);
                                        }, true);
                                        if (lastArguments[key] !== void 0) {
                                            _this2.setAttribute(key, lastArguments[key]);
                                        }
                                    } catch (e) {
                                        // TODO more convinient error handling
                                        _this2.node.emit("error-parse-material-args", e);
                                        _this2.__removeAttributes();
                                        _this2._registeredAttributes = false;
                                        _this2.materialReady = false;
                                        return {
                                            v: void 0
                                        };
                                    }
                                };

                                _context3.t0 = regeneratorRuntime.keys(this.material.argumentDeclarations);

                            case 12:
                                if ((_context3.t1 = _context3.t0()).done) {
                                    _context3.next = 19;
                                    break;
                                }

                                key = _context3.t1.value;
                                _ret = _loop(key);

                                if (!((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object")) {
                                    _context3.next = 17;
                                    break;
                                }

                                return _context3.abrupt("return", _ret.v);

                            case 17:
                                _context3.next = 12;
                                break;

                            case 19:
                                _loop2 = function _loop2(key) {
                                    _this2.__addAttribute(key, _this2.material.macroDeclarations[key]);
                                    _this2.getAttributeRaw(key).watch(function (v) {
                                        _this2.material.setMacroValue(key, v);
                                    }, true);
                                };

                                for (key in this.material.macroDeclarations) {
                                    _loop2(key);
                                }
                                this._registeredAttributes = true;
                                this.materialReady = true;

                            case 23:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));
        }
    }], [{
        key: "rewriteDefaultMaterial",
        value: function rewriteDefaultMaterial(materialName) {
            if (materialName !== MaterialContainerComponent._defaultMaterial) {
                MaterialContainerComponent._defaultMaterial = materialName;
                _grimoirejs2.default.componentDeclarations.get("MaterialContainer").attributes["material"].default = "new(" + materialName + ")";
            }
        }
    }, {
        key: "defaultMaterial",
        get: function get() {
            return this._defaultMaterial;
        }
    }]);

    return MaterialContainerComponent;
}(_Component3.default);

exports.default = MaterialContainerComponent;

MaterialContainerComponent.attributes = {
    /**
     * 対象のマテリアル
     */
    material: {
        converter: "Material",
        default: "new(unlit)",
        componentBoundTo: "_materialComponent" // When the material was specified with the other material tag, this field would be assigned.
    },
    /**
     * 描画順序
     *
     * デフォルトの状態では、マテリアルから読み込んだ描画順序設定を用います
     */
    drawOrder: {
        converter: "String",
        default: null
    }
};
MaterialContainerComponent._defaultMaterial = "unlit";

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

var _FrameBuffer = __webpack_require__(18);

var _FrameBuffer2 = _interopRequireDefault(_FrameBuffer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RenderSceneComponent = function (_Component) {
    _inherits(RenderSceneComponent, _Component);

    function RenderSceneComponent() {
        _classCallCheck(this, RenderSceneComponent);

        return _possibleConstructorReturn(this, (RenderSceneComponent.__proto__ || Object.getPrototypeOf(RenderSceneComponent)).apply(this, arguments));
    }

    _createClass(RenderSceneComponent, [{
        key: "$awake",

        // messages
        value: function $awake() {
            this.getAttributeRaw("layer").boundTo("layer");
            this.getAttributeRaw("clearColor").boundTo("clearColor");
            this.getAttributeRaw("clearColorEnabled").boundTo("clearColorEnabled");
            this.getAttributeRaw("clearDepthEnabled").boundTo("clearDepthEnabled");
            this.getAttributeRaw("clearDepth").boundTo("clearDepth");
            this.getAttributeRaw("camera").boundTo("_camera");
            this.getAttributeRaw("technique").boundTo("technique");
        }
    }, {
        key: "$mount",
        value: function $mount() {
            this._gl = this.companion.get("gl");
            this._canvas = this.companion.get("canvasElement");
        }
    }, {
        key: "$bufferUpdated",
        value: function $bufferUpdated(args) {
            var out = this.getAttribute("out");
            if (out !== "default") {
                this._fbo = new _FrameBuffer2.default(this.companion.get("gl"));
                this._fbo.update(args.buffers[out]);
                this._fboSize = args.bufferSizes[out];
            }
            var depthBuffer = this.getAttribute("depthBuffer");
            if (depthBuffer && this._fbo) {
                this._fbo.update(args.buffers[depthBuffer]);
            }
        }
    }, {
        key: "$render",
        value: function $render(args) {
            var camera = this.camera ? this.camera : args.camera;
            if (!camera) {
                return;
            }
            if (this._fbo) {
                this._fbo.bind();
                this._gl.viewport(0, 0, this._fboSize.width, this._fboSize.height);
            } else {
                this._gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, null);
                this._gl.viewport(args.viewport.Left, this._canvas.height - args.viewport.Bottom, args.viewport.Width, args.viewport.Height);
            }
            // clear buffer if needed
            if (this._fbo && this.clearColorEnabled) {
                this._gl.clearColor(this.clearColor.R, this.clearColor.G, this.clearColor.B, this.clearColor.A);
                this._gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT);
            }
            if (this.clearDepthEnabled) {
                this._gl.clearDepth(this.clearDepth);
                this._gl.clear(WebGLRenderingContext.DEPTH_BUFFER_BIT);
            }
            camera.updateContainedScene(args.timer);
            camera.renderScene({
                renderer: this,
                camera: camera,
                buffers: args.buffers,
                layer: this.layer,
                viewport: args.viewport,
                timer: args.timer,
                technique: this.technique,
                sceneDescription: {}
            });
        }
    }]);

    return RenderSceneComponent;
}(_Component3.default);

exports.default = RenderSceneComponent;

RenderSceneComponent.attributes = {
    layer: {
        converter: "String",
        default: "default"
    },
    depthBuffer: {
        default: null,
        converter: "String"
    },
    out: {
        converter: "String",
        default: "default"
    },
    clearColor: {
        default: "#0000",
        converter: "Color4"
    },
    clearColorEnabled: {
        default: true,
        converter: "Boolean"
    },
    clearDepthEnabled: {
        default: true,
        converter: "Boolean"
    },
    clearDepth: {
        default: 1.0,
        converter: "Number"
    },
    camera: {
        default: null,
        converter: "Component",
        target: "Camera"
    },
    technique: {
        default: "default",
        converter: "String"
    }
};

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _RenderQueueRegistry = __webpack_require__(80);

var _RenderQueueRegistry2 = _interopRequireDefault(_RenderQueueRegistry);

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 特定のシーン内に関連する処理を行うためのコンポーネント
 * このコンポーネントには属性が存在しません。
 */
var SceneComponent = function (_Component) {
    _inherits(SceneComponent, _Component);

    function SceneComponent() {
        _classCallCheck(this, SceneComponent);

        var _this = _possibleConstructorReturn(this, (SceneComponent.__proto__ || Object.getPrototypeOf(SceneComponent)).apply(this, arguments));

        _this.queueRegistory = new _RenderQueueRegistry2.default();
        return _this;
    }

    _createClass(SceneComponent, [{
        key: "$mount",
        value: function $mount() {
            var _this2 = this;

            this.sceneDescription = {};
            SceneComponent._sceneDescriptionCreationHandlers.forEach(function (v) {
                return v(_this2.sceneDescription, _this2);
            });
        }
        /**
         * Notify update scene only when send update message is needed.
         * @param {Timer} timer [description]
         */

    }, {
        key: "updateScene",
        value: function updateScene(timer) {
            if (this._lastUpdateIndex !== timer.frameCount) {
                var sceneUpdateInfo = {
                    sceneDescription: this.sceneDescription,
                    timer: timer
                };
                this.node.broadcastMessage("update", sceneUpdateInfo);
                this._lastUpdateIndex = timer.frameCount;
            }
        }
    }], [{
        key: "onSceneDescriptionCreation",
        value: function onSceneDescriptionCreation(handler) {
            SceneComponent._sceneDescriptionCreationHandlers.push(handler);
        }
    }]);

    return SceneComponent;
}(_Component3.default);

exports.default = SceneComponent;

SceneComponent.attributes = {};
SceneComponent._sceneDescriptionCreationHandlers = [];

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Vector = __webpack_require__(10);

var _Vector2 = _interopRequireDefault(_Vector);

var _AABB = __webpack_require__(89);

var _AABB2 = _interopRequireDefault(_AABB);

var _Buffer = __webpack_require__(71);

var _Buffer2 = _interopRequireDefault(_Buffer);

var _GLExtRequestor = __webpack_require__(26);

var _GLExtRequestor2 = _interopRequireDefault(_GLExtRequestor);

var _HashCalculator = __webpack_require__(8);

var _HashCalculator2 = _interopRequireDefault(_HashCalculator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The geometry class for managing buffer resource
 */
var Geometry = function () {
    function Geometry(gl) {
        _classCallCheck(this, Geometry);

        this.gl = gl;
        /**
         * Vertex buffer
         * @type {Buffer[]}
         */
        this.buffers = [];
        this.indices = {};
        this.accessors = {};
        this.aabb = new _AABB2.default([_Vector2.default.Zero]);
        this._accessorHashCache = 0;
        _GLExtRequestor2.default.request("ANGLE_instanced_arrays", true);
        this.instanciator = _GLExtRequestor2.default.get(gl).extensions["ANGLE_instanced_arrays"];
    }
    /**
     * Hash calculator of accessors map.
     * If this value was same with the other geometry, the 2 geometries have same accessors.
     * 'Same' DOES NOT mean that these geometries have a buffers containing same elements.
     * But, if there was a accessor named 'A' in one of them, the other one should exist.
     */


    _createClass(Geometry, [{
        key: "addAttributes",
        value: function addAttributes(buffer, accessors) {
            var usage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : WebGLRenderingContext.STATIC_DRAW;

            buffer = this._ensureToBeVertexBuffer(buffer, usage);
            var index = this.buffers.length;
            this.buffers.push(buffer);
            for (var semantic in accessors) {
                var accessor = accessors[semantic];
                accessor.bufferIndex = index;
                if (accessor.size === void 0) {
                    throw new Error("Accessor specified with the semantics \"" + semantic + "\" is not containing size as paranmeter.");
                }
                if (accessor.type === void 0) {
                    accessor.type = WebGLRenderingContext.FLOAT;
                }
                if (accessor.stride === void 0) {
                    accessor.stride = accessor.size * this._attribTypeToByteSize(accessor.type);
                }
                if (accessor.offset === void 0) {
                    accessor.offset = 0;
                }
                if (accessor.normalized === void 0) {
                    accessor.normalized = false;
                }
                this.accessors[semantic] = accessor;
            }
            this._recalculateAccsessorHash();
        }
    }, {
        key: "addIndex",
        value: function addIndex(indexName, bufferOrInstanceCount, bufferOrTopology, offsetOrTopology) {
            var countOrOffset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
            var typeOrCount = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
            var type = arguments[6];

            var buffer = void 0;
            var topology = void 0;
            var offset = void 0;
            var count = void 0;
            var instanceCount = void 0;
            if (typeof bufferOrInstanceCount === "number") {
                instanceCount = bufferOrInstanceCount;
                buffer = bufferOrTopology;
                topology = offsetOrTopology;
                offset = countOrOffset;
                count = typeOrCount;
                if (!type) {
                    type = 0;
                }
                if (typeof offset !== "number") {
                    offset = 0;
                }
                if (typeof topology !== "number") {
                    topology = WebGLRenderingContext.TRIANGLES;
                }
            } else {
                buffer = bufferOrInstanceCount;
                topology = bufferOrTopology;
                offset = offsetOrTopology;
                count = countOrOffset;
                type = typeOrCount;
                if (typeof topology !== "number") {
                    topology = WebGLRenderingContext.TRIANGLES;
                }
            }
            if (!count) {
                if (buffer instanceof _Buffer2.default || buffer instanceof ArrayBuffer || buffer instanceof DataView) {
                    throw new Error("The argument 'count' is necessary if you specified buffer with an instance of Buffer or ArrayBuffer");
                } else {
                    count = buffer["length"];
                }
            }
            if (type === 0) {
                type = this._indexTypeFromCount(count);
            }
            buffer = this._ensureToBeIndexBuffer(buffer, type);
            this.indices[indexName] = {
                byteOffset: offset,
                byteSize: this._indexTypeToByteSize(type),
                type: type,
                topology: topology,
                count: count,
                index: buffer,
                instanceCount: instanceCount
            };
        }
    }, {
        key: "drawByDefault",
        value: function drawByDefault(indexName, attribNames, program) {
            var _this = this;

            var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Number.MAX_VALUE;
            var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

            attribNames.forEach(function (name) {
                Geometry.bindBufferToAttribute(_this, program, name, name);
            });
            Geometry.drawWithCurrentVertexBuffer(this, indexName, count, offset);
        }
    }, {
        key: "clone",
        value: function clone() {
            var geometry = new Geometry(this.gl);
            geometry.buffers = [].concat(this.buffers);
            geometry.accessors = Object.assign({}, this.accessors);
            geometry.indices = Object.assign({}, this.indices);
            geometry.aabb = new _AABB2.default([this.aabb.pointLBF, this.aabb.pointRTN]);
            return geometry;
        }
        /**
         * Make sure buffer sources converted into Buffer
         * @param  {Buffer|BufferSource|number[]} buffer [description]
         * @return {Buffer}                              [description]
         */

    }, {
        key: "_ensureToBeVertexBuffer",
        value: function _ensureToBeVertexBuffer(buffer, usage) {
            if (!(buffer instanceof _Buffer2.default)) {
                var bufferSource = buffer;
                if (Array.isArray(bufferSource)) {
                    bufferSource = new Float32Array(bufferSource);
                }
                buffer = new _Buffer2.default(this.gl, WebGLRenderingContext.ARRAY_BUFFER, usage);
                buffer.update(bufferSource);
            }
            return buffer;
        }
        /**
         * Make sure buffer sources converted into Buffer
         * @param  {Buffer|BufferSource|number[]} buffer [description]
         * @return {Buffer}                              [description]
         */

    }, {
        key: "_ensureToBeIndexBuffer",
        value: function _ensureToBeIndexBuffer(buffer, type) {
            if (!(buffer instanceof _Buffer2.default)) {
                var bufferSource = buffer;
                if (Array.isArray(bufferSource)) {
                    bufferSource = new (this._indexTypeToArrayConstructor(type))(bufferSource);
                }
                buffer = new _Buffer2.default(this.gl, WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW);
                buffer.update(bufferSource);
            } else {
                if (buffer.target !== WebGLRenderingContext.ELEMENT_ARRAY_BUFFER) {
                    throw new Error("The usage of buffer specified as index buffer is not ELEMENT_ARRAY_BUFFER");
                }
            }
            return buffer;
        }
    }, {
        key: "_indexTypeFromCount",
        value: function _indexTypeFromCount(count) {
            if (count < 256) {
                return WebGLRenderingContext.UNSIGNED_BYTE;
            } else if (count < 65536) {
                return WebGLRenderingContext.UNSIGNED_SHORT;
            } else if (count < 4294967296) {
                return WebGLRenderingContext.UNSIGNED_INT;
            } else {
                throw new Error("Index count exceeds 4,294,967,296. WebGL can not handle such a big index buffer");
            }
        }
    }, {
        key: "_indexTypeToArrayConstructor",
        value: function _indexTypeToArrayConstructor(type) {
            switch (type) {
                case WebGLRenderingContext.UNSIGNED_BYTE:
                    return Uint8Array;
                case WebGLRenderingContext.UNSIGNED_SHORT:
                    return Uint16Array;
                case WebGLRenderingContext.UNSIGNED_INT:
                    return Uint32Array;
                default:
                    throw new Error("Unsupported index type");
            }
        }
    }, {
        key: "_indexTypeToByteSize",
        value: function _indexTypeToByteSize(type) {
            switch (type) {
                case WebGLRenderingContext.UNSIGNED_BYTE:
                    return 1;
                case WebGLRenderingContext.UNSIGNED_SHORT:
                    return 2;
                case WebGLRenderingContext.UNSIGNED_INT:
                    return 4;
                default:
                    throw new Error("Unsupported index type");
            }
        }
    }, {
        key: "_attribTypeToByteSize",
        value: function _attribTypeToByteSize(type) {
            switch (type) {
                case WebGLRenderingContext.FLOAT:
                case WebGLRenderingContext.UNSIGNED_INT:
                    return 4;
                case WebGLRenderingContext.UNSIGNED_SHORT:
                    return 2;
                case WebGLRenderingContext.UNSIGNED_BYTE:
                    return 1;
                default:
                    throw new Error("Unsupported attribute variable type \"" + type + "\"");
            }
        }
    }, {
        key: "_recalculateAccsessorHash",
        value: function _recalculateAccsessorHash() {
            var hashSource = "";
            for (var key in this.accessors) {
                hashSource += key + "|";
            }
            this._accessorHashCache = _HashCalculator2.default.calcHash(hashSource);
        }
    }, {
        key: "accessorHash",
        get: function get() {
            return this._accessorHashCache;
        }
        /**
         * bind a vertex buffer to specified attribute variable.
         * @param  {Geometry} geometry      [description]
         * @param  {Program}  program       [description]
         * @param  {string}   attributeName [description]
         * @param  {string}   semantics    [description]
         * @return {boolean}                [description]
         */

    }], [{
        key: "bindBufferToAttribute",
        value: function bindBufferToAttribute(geometry, program, attributeName, semantics) {
            var index = program.findAttributeLocation(attributeName);
            if (index < 0) {
                return false;
            }
            var accessors = geometry.accessors[semantics];
            if (!accessors) {
                throw new Error("Specified buffer \"" + semantics + " was not found on this geometry while attempt to bind \"" + attributeName + "\" of attribute variables.\n\n      All of the vertex buffer available on this geometry is " + Object.keys(geometry.accessors) + "\"");
            }
            var buffer = geometry.buffers[accessors.bufferIndex];
            buffer.bind();
            program.gl.vertexAttribPointer(index, accessors.size, accessors.type, accessors.normalized, accessors.stride, accessors.offset);
            if (accessors.instancingDivisor > 0) {
                geometry.instanciator.vertexAttribDivisorANGLE(index, accessors.instancingDivisor);
            }
            return true;
        }
    }, {
        key: "drawWithCurrentVertexBuffer",
        value: function drawWithCurrentVertexBuffer(geometry, indexName) {
            var count = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.MAX_VALUE;
            var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

            var targetIndex = geometry.indices[indexName];
            if (targetIndex === void 0) {
                throw new Error("Specified index buffer \"" + indexName + "\" was not found on this geometry.All of the index buffer available on this geometry is \"" + Object.keys(geometry.indices) + "\"");
            }
            targetIndex.index.bind();
            if (targetIndex.instanceCount > 0) {
                geometry.instanciator.drawElementsInstancedANGLE(targetIndex.topology, Math.min(targetIndex.count, count), targetIndex.type, Math.min(offset * targetIndex.byteSize + targetIndex.byteOffset, targetIndex.byteOffset + (targetIndex.count - 1) * targetIndex.byteSize), targetIndex.instanceCount);
            } else {
                targetIndex.index.gl.drawElements(targetIndex.topology, Math.min(targetIndex.count, count), targetIndex.type, Math.min(offset * targetIndex.byteSize + targetIndex.byteOffset, targetIndex.byteOffset + (targetIndex.count - 1) * targetIndex.byteSize));
            }
        }
    }]);

    return Geometry;
}();

exports.default = Geometry;

Geometry._lastGeometry = new Map();

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * Provides the feature to instanciate primitive geometry.
 */

var GeometryFactory = function () {
    function GeometryFactory(gl) {
        _classCallCheck(this, GeometryFactory);

        this.gl = gl;
    }
    /**
     * Add new type geometry
     * @param {string}                   typeName        [description]
     * @param {IAttributeDeclaration }}             argumentDeclarations [description]
     * @param {IGeometryFactoryDelegate} factoryDelegate [description]
     */


    _createClass(GeometryFactory, [{
        key: "instanciate",
        value: function instanciate(type, args) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                var factoryDelegate, geometry, exts, i, p;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                factoryDelegate = GeometryFactory.factoryDelegates[type];

                                if (factoryDelegate) {
                                    _context.next = 3;
                                    break;
                                }

                                throw new Error("Can not instanciate unknown geometry type " + type);

                            case 3:
                                _context.next = 5;
                                return factoryDelegate(this.gl, args);

                            case 5:
                                geometry = _context.sent;

                                if (!(GeometryFactory.factoryExtentions[type] !== void 0)) {
                                    _context.next = 17;
                                    break;
                                }

                                exts = GeometryFactory.factoryExtentions[type];
                                i = 0;

                            case 9:
                                if (!(i < exts.length)) {
                                    _context.next = 17;
                                    break;
                                }

                                p = exts[i](geometry, args);

                                if (!p) {
                                    _context.next = 14;
                                    break;
                                }

                                _context.next = 14;
                                return p;

                            case 14:
                                i++;
                                _context.next = 9;
                                break;

                            case 17:
                                return _context.abrupt("return", geometry);

                            case 18:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }, {
        key: "instanciateAsDefault",
        value: function instanciateAsDefault(type) {
            var decl = GeometryFactory.factoryArgumentDeclarations[type];
            var args = {};
            for (var attr in decl) {
                var attrDecl = decl[attr];
                args[attr] = attrDecl.default;
            }
            return this.instanciate(type, args);
        }
    }], [{
        key: "addType",
        value: function addType(typeName, argumentDeclarations, factoryDelegate) {
            GeometryFactory.factoryDelegates[typeName] = factoryDelegate;
            GeometryFactory.factoryArgumentDeclarations[typeName] = argumentDeclarations;
        }
    }, {
        key: "extend",
        value: function extend(typeName, extender) {
            if (GeometryFactory.factoryExtentions[typeName] === void 0) {
                GeometryFactory.factoryExtentions[typeName] = [];
            }
            GeometryFactory.factoryExtentions[typeName].push(extender);
        }
    }]);

    return GeometryFactory;
}();
/**
 * Delegates to be used as factory
 */


exports.default = GeometryFactory;
GeometryFactory.factoryDelegates = {};
/**
 * Argument inputs to be used for construction of geometry.
 */
GeometryFactory.factoryArgumentDeclarations = {};
GeometryFactory.factoryExtentions = {};

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _RenderBuffer = __webpack_require__(19);

var _RenderBuffer2 = _interopRequireDefault(_RenderBuffer);

var _Texture2D = __webpack_require__(1);

var _Texture2D2 = _interopRequireDefault(_Texture2D);

var _ResourceBase2 = __webpack_require__(2);

var _ResourceBase3 = _interopRequireDefault(_ResourceBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FrameBuffer = function (_ResourceBase) {
    _inherits(FrameBuffer, _ResourceBase);

    function FrameBuffer(gl) {
        _classCallCheck(this, FrameBuffer);

        var _this = _possibleConstructorReturn(this, (FrameBuffer.__proto__ || Object.getPrototypeOf(FrameBuffer)).call(this, gl));

        _this.fbo = gl.createFramebuffer();
        return _this;
    }

    _createClass(FrameBuffer, [{
        key: "update",
        value: function update(boundTo, level, bindIndex) {
            this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, this.fbo);
            if (boundTo instanceof _Texture2D2.default) {
                if (typeof bindIndex === "undefined") {
                    bindIndex = 0;
                }
                if (typeof level === "undefined") {
                    level = 0;
                }
                this.gl.framebufferTexture2D(WebGLRenderingContext.FRAMEBUFFER, WebGLRenderingContext.COLOR_ATTACHMENT0 + bindIndex, WebGLRenderingContext.TEXTURE_2D, boundTo.texture, level);
                if (this.gl.checkFramebufferStatus(WebGLRenderingContext.FRAMEBUFFER) !== WebGLRenderingContext.FRAMEBUFFER_COMPLETE) {
                    throw new Error("INCOMPLETE framebuffer");
                }
            } else if (boundTo instanceof _RenderBuffer2.default) {
                var registerTarget = level;
                if (typeof level === "undefined") {
                    registerTarget = WebGLRenderingContext.DEPTH_ATTACHMENT;
                }
                this.gl.framebufferRenderbuffer(WebGLRenderingContext.FRAMEBUFFER, registerTarget, WebGLRenderingContext.RENDERBUFFER, boundTo.renderBuffer);
            }
            this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, null);
        }
    }, {
        key: "bind",
        value: function bind() {
            this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, this.fbo);
        }
    }, {
        key: "destroy",
        value: function destroy() {
            _get(FrameBuffer.prototype.__proto__ || Object.getPrototypeOf(FrameBuffer.prototype), "destroy", this).call(this);
            this.gl.deleteFramebuffer(this.fbo);
        }
    }]);

    return FrameBuffer;
}(_ResourceBase3.default);

exports.default = FrameBuffer;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _ResourceBase2 = __webpack_require__(2);

var _ResourceBase3 = _interopRequireDefault(_ResourceBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RenderBuffer = function (_ResourceBase) {
    _inherits(RenderBuffer, _ResourceBase);

    function RenderBuffer(gl) {
        _classCallCheck(this, RenderBuffer);

        var _this = _possibleConstructorReturn(this, (RenderBuffer.__proto__ || Object.getPrototypeOf(RenderBuffer)).call(this, gl));

        _this.renderBuffer = gl.createRenderbuffer();
        return _this;
    }

    _createClass(RenderBuffer, [{
        key: "update",
        value: function update(format, width, height) {
            this.gl.bindRenderbuffer(WebGLRenderingContext.RENDERBUFFER, this.renderBuffer);
            this.gl.renderbufferStorage(WebGLRenderingContext.RENDERBUFFER, format, width, height);
            this.valid = true;
        }
    }, {
        key: "bind",
        value: function bind() {
            this.gl.bindRenderbuffer(WebGLRenderingContext.RENDERBUFFER, this.renderBuffer);
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.gl.deleteRenderbuffer(this.renderBuffer);
            _get(RenderBuffer.prototype.__proto__ || Object.getPrototypeOf(RenderBuffer.prototype), "destroy", this).call(this);
        }
    }]);

    return RenderBuffer;
}(_ResourceBase3.default);

exports.default = RenderBuffer;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * Resolve resources with caching.
 */
/**
 * Resolve resources with caching.
 */
var CacheResolver = function () {
    function CacheResolver(toAbsolute) {
        _classCallCheck(this, CacheResolver);

        this.toAbsolute = toAbsolute;
        this.cache = {};
        this.resolvers = {};
    }

    _createClass(CacheResolver, [{
        key: "resolve",
        value: function resolve(src, resolver) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                var abs, result;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                abs = this.toAbsolute(src);

                                if (!this._cached(abs)) {
                                    _context.next = 5;
                                    break;
                                }

                                return _context.abrupt("return", this.cache[abs]);

                            case 5:
                                if (!this._resolving(abs)) {
                                    _context.next = 11;
                                    break;
                                }

                                _context.next = 8;
                                return this.resolvers[abs];

                            case 8:
                                return _context.abrupt("return", _context.sent);

                            case 11:
                                this.resolvers[abs] = resolver(abs);
                                _context.next = 14;
                                return this.resolvers[abs];

                            case 14:
                                result = _context.sent;

                                this._resolved(abs, result);
                                return _context.abrupt("return", result);

                            case 17:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }, {
        key: "_cached",
        value: function _cached(abs) {
            return typeof this.cache[abs] !== "undefined";
        }
    }, {
        key: "_resolving",
        value: function _resolving(abs) {
            return typeof this.resolvers[abs] !== "undefined";
        }
    }, {
        key: "_resolved",
        value: function _resolved(abs, result) {
            delete this.resolvers[abs];
            this.cache[abs] = result;
        }
    }]);

    return CacheResolver;
}();

exports.default = CacheResolver;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _CacheResolver2 = __webpack_require__(20);

var _CacheResolver3 = _interopRequireDefault(_CacheResolver2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ExternalResourceResolver = function (_CacheResolver) {
    _inherits(ExternalResourceResolver, _CacheResolver);

    function ExternalResourceResolver() {
        _classCallCheck(this, ExternalResourceResolver);

        return _possibleConstructorReturn(this, (ExternalResourceResolver.__proto__ || Object.getPrototypeOf(ExternalResourceResolver)).call(this, ExternalResourceResolver._toAbsolute));
    }
    /**
     * Check specified url is dataUrl or not
     * @param  {string}  dataUrl [description]
     * @return {boolean}         [description]
     */


    _createClass(ExternalResourceResolver, null, [{
        key: "isDataURL",
        value: function isDataURL(dataUrl) {
            return !!dataUrl.match(/^\s*data\:.*;base64/);
        }
        /**
         * Make sure that is data URL.
         * @param  {string} href [description]
         * @return {string}      [description]
         */

    }, {
        key: "_toAbsolute",
        value: function _toAbsolute(href) {
            if (href.match(/^blob\:/m) || ExternalResourceResolver.isDataURL(href)) {
                return href;
            }
            var link = document.createElement("a");
            link.href = href;
            return link.protocol + "//" + link.host + link.pathname + link.search + link.hash;
        }
    }]);

    return ExternalResourceResolver;
}(_CacheResolver3.default);

exports.default = ExternalResourceResolver;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ImageResolver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _ExternalResourceResolver = __webpack_require__(21);

var _ExternalResourceResolver2 = _interopRequireDefault(_ExternalResourceResolver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ImageResolver = exports.ImageResolver = function (_ExternalResourceReso) {
    _inherits(ImageResolver, _ExternalResourceReso);

    function ImageResolver() {
        _classCallCheck(this, ImageResolver);

        return _possibleConstructorReturn(this, (ImageResolver.__proto__ || Object.getPrototypeOf(ImageResolver)).apply(this, arguments));
    }

    _createClass(ImageResolver, [{
        key: "resolve",
        value: function resolve(path) {
            var _this2 = this;

            return _get(ImageResolver.prototype.__proto__ || Object.getPrototypeOf(ImageResolver.prototype), "resolve", this).call(this, path, function (abs) {
                return new Promise(function (resolve, reject) {
                    var imgTag = new Image();
                    imgTag.crossOrigin = _this2._getCORSConfig(abs);
                    imgTag.onload = function () {
                        resolve(imgTag);
                    };
                    imgTag.onerror = function (e) {
                        reject("Error has been occured during loading \"" + abs + "(" + path + ")\"\n" + e);
                    };
                    imgTag.src = abs;
                });
            });
        }
    }, {
        key: "_getCORSConfig",
        value: function _getCORSConfig(path) {
            var corsConfig = null;
            for (var i = 0; i < ImageResolver.corsResolvers.length; i++) {
                corsConfig = ImageResolver.corsResolvers[i](path);
                if (corsConfig !== null) {
                    break;
                }
            }
            if (corsConfig === null) {
                corsConfig = ImageResolver.defaultCORSConfig;
            }
            return corsConfig;
        }
    }]);

    return ImageResolver;
}(_ExternalResourceResolver2.default);

ImageResolver.defaultCORSConfig = "anonymous";
/**
 * Cors config resolvers.
 * If all of resolvers returns null, defaultCORSConfig will be used.
 */
ImageResolver.corsResolvers = [];
exports.default = new ImageResolver();

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * Provide abstraction of resolving named resource such as Geometry, Materials.
 */
/**
 * Provide abstraction of resolving named resource such as Geometry, Materials.
 */
var NameResolver = function () {
    function NameResolver() {
        _classCallCheck(this, NameResolver);

        /**
         * Resolved items
         */
        this._resolved = {};
        /**
         * Name to Resource-resolvers
         */
        this._resolvers = {};
        /**
         * Name to waiting resolvers
         */
        this._handlers = {};
    }
    /**
     * Obtain the named resource.
     * @return {Promise<T>} the resource
     */


    _createClass(NameResolver, [{
        key: "get",
        value: function get(name) {
            if (this._resolved[name] !== void 0) {
                return Promise.resolve(this._resolved[name]);
            } else {
                return this._waitForResolved(name);
            }
        }
        /**
         * Get status of specified resource.
         * This method would return NameResolver.UNLOADED,NameResolver.RESOLVED or NameResolver.RESOLVING
         * @param  {string} name resource name to check status
         * @return {number}      status code
         */

    }, {
        key: "getStatus",
        value: function getStatus(name) {
            if (this._resolvers[name] !== void 0) {
                return NameResolver.RESOLVING;
            } else if (this._resolved[name] !== void 0) {
                return NameResolver.RESOLVED;
            } else {
                return NameResolver.UNLOADED;
            }
        }
        /**
         * Register named resource
         * @param  {string}     name      name of the resource
         * @param  {Promise<T>} generator Promise to resolve the resource
         * @return {Promise<T>} The promise of resource
         */

    }, {
        key: "register",
        value: function register(name, generator) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                var resolved;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (!this._isPromise(generator)) {
                                    _context.next = 19;
                                    break;
                                }

                                _context.prev = 1;

                                if (!(this._resolvers[name] !== void 0)) {
                                    _context.next = 4;
                                    break;
                                }

                                throw new Error("Dupelicated named resource '" + name + "' was registered.");

                            case 4:
                                this._resolvers[name] = generator;
                                _context.next = 7;
                                return generator;

                            case 7:
                                resolved = _context.sent;

                                this._resolvers[name] = void 0;
                                this._callHandlers(name, resolved);
                                this._resolved[name] = resolved;
                                return _context.abrupt("return", resolved);

                            case 14:
                                _context.prev = 14;
                                _context.t0 = _context["catch"](1);
                                throw new Error("Unexpected error has occured during resolution of named resource '" + name + "'\n" + _context.t0);

                            case 17:
                                _context.next = 20;
                                break;

                            case 19:
                                return _context.abrupt("return", this.register(name, Promise.resolve(generator)));

                            case 20:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[1, 14]]);
            }));
        }
        /**
         * Get promise to wait the named resource registered.
         * @param  {string}     name name of the resource
         * @return {Promise<T>}     Promise to wait for registering
         */

    }, {
        key: "_waitForResolved",
        value: function _waitForResolved(name) {
            var _this = this;

            return new Promise(function (resolve, reject) {
                if (_this._handlers[name] === void 0) {
                    _this._handlers[name] = [];
                }
                _this._handlers[name].push(function (resolved) {
                    resolve(resolved);
                });
            });
        }
        /**
         * Call handler to notify the named resource was loaded.
         * @param {string} name      name of the resource
         * @param {T}      resolved Promise to wait for registering
         */

    }, {
        key: "_callHandlers",
        value: function _callHandlers(name, resolved) {
            if (this._handlers[name] === void 0) {
                return;
            }
            this._handlers[name].forEach(function (f) {
                return f(resolved);
            });
            delete this._handlers[name];
        }
    }, {
        key: "_isPromise",
        value: function _isPromise(generator) {
            return typeof generator["then"] === "function";
        }
    }]);

    return NameResolver;
}();

exports.default = NameResolver;

NameResolver.UNLOADED = 0;
NameResolver.RESOLVING = 1;
NameResolver.RESOLVED = 2;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

var MaterialComponent = function (_Component) {
    _inherits(MaterialComponent, _Component);

    function MaterialComponent() {
        _classCallCheck(this, MaterialComponent);

        var _this = _possibleConstructorReturn(this, (MaterialComponent.__proto__ || Object.getPrototypeOf(MaterialComponent)).apply(this, arguments));

        _this.materialArgs = {};
        return _this;
    }

    _createClass(MaterialComponent, [{
        key: "$mount",
        value: function $mount() {
            var typeName = this.getAttribute("type");
            if (typeName && typeof typeName === "string") {
                this.materialPromise = this.companion.get("MaterialFactory").instanciate(typeName);
                this._registerAttributes();
            } else {
                throw new Error("Material type name must be sppecified and string");
            }
        }
    }, {
        key: "_registerAttributes",
        value: function _registerAttributes() {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                var _this2 = this;

                var _loop, key, _loop2;

                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return this.materialPromise;

                            case 2:
                                this.material = _context.sent;

                                _loop = function _loop(key) {
                                    _this2.__addAttribute(key, _this2.material.argumentDeclarations[key]);
                                    var lastValue = void 0;
                                    if (_this2.material.arguments[key] !== void 0) {
                                        lastValue = _this2.material.arguments[key];
                                    }
                                    _this2.getAttributeRaw(key).watch(function (n) {
                                        _this2.material.setArgument(key, n);
                                    }, true);
                                    if (lastValue !== void 0) {
                                        _this2.material.setArgument(key, lastValue);
                                    }
                                };

                                for (key in this.material.argumentDeclarations) {
                                    _loop(key);
                                }

                                _loop2 = function _loop2(key) {
                                    _this2.__addAttribute(key, _this2.material.macroDeclarations[key]);
                                    _this2.getAttributeRaw(key).watch(function (v) {
                                        _this2.material.setMacroValue(key, v);
                                    }, true);
                                };

                                for (key in this.material.macroDeclarations) {
                                    _loop2(key);
                                }
                                this.ready = true;

                            case 8:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }]);

    return MaterialComponent;
}(_Component3.default);

exports.default = MaterialComponent;

MaterialComponent.attributes = {
    type: {
        converter: "String",
        default: null
    }
};

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Technique = __webpack_require__(68);

var _Technique2 = _interopRequireDefault(_Technique);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides abstraction of configurations for multiple shaders.
 */
var Material = function () {
    function Material(gl, techniqueRecipes) {
        _classCallCheck(this, Material);

        this.gl = gl;
        this.techniqueRecipes = techniqueRecipes;
        /**
         * Material arguments.
         * Thease are mainly created by USER_VALUE semantics.
         */
        this.argumentDeclarations = {};
        /**
         * Values of materila arguments.
         * Thease values would be passed to GPU for rendering.
         */
        this.arguments = {};
        /**
         * Dynamic macro declarations.
         */
        this.macroDeclarations = {};
        this.techniques = {};
        this._macroObserver = {};
        for (var key in techniqueRecipes) {
            this.techniques[key] = new _Technique2.default(this, techniqueRecipes[key]);
        }
    }

    _createClass(Material, [{
        key: "draw",
        value: function draw(arg) {
            var technique = this.techniques[arg.technique];
            if (technique) {
                technique.draw(arg);
            }
        }
    }, {
        key: "setArgument",
        value: function setArgument(variableName, newValue) {
            var _this = this;

            if (this.arguments[variableName] !== newValue) {
                (function () {
                    var o = _this.arguments[variableName];
                    _this.arguments[variableName] = newValue;
                    for (var key in _this.techniques) {
                        var t = _this.techniques[key];
                        t.passes.forEach(function (p) {
                            return p.update(variableName, newValue, o);
                        });
                    }
                })();
            }
        }
    }, {
        key: "addMacroObserver",
        value: function addMacroObserver(key, macroDeclaration, onChanged) {
            if (!this._macroObserver[key]) {
                this._macroObserver[key] = [];
            }
            this._macroObserver[key].push(onChanged);
            this.macroDeclarations[key] = macroDeclaration;
        }
    }, {
        key: "setMacroValue",
        value: function setMacroValue(key, value) {
            if (this._macroObserver[key]) {
                this._macroObserver[key].forEach(function (o) {
                    return o(value);
                });
            }
        }
    }, {
        key: "addArgument",
        value: function addArgument(key, argumentDeclaration) {
            this.argumentDeclarations[key] = argumentDeclaration;
        }
    }, {
        key: "deleteArgument",
        value: function deleteArgument(key) {
            delete this.argumentDeclarations[key];
        }
        /**
         * Clone this material to new instance.
         * @return {Material} new material instance
         */

    }, {
        key: "clone",
        value: function clone() {
            var cloned = new Material(this.gl, this.techniqueRecipes);
            for (var key in this.arguments) {
                cloned.arguments[key] = this.arguments[key];
            }
            return cloned;
        }
    }]);

    return Material;
}();

exports.default = Material;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _MaterialFactory = __webpack_require__(4);

var _MaterialFactory2 = _interopRequireDefault(_MaterialFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GLExtRequestor = function () {
    function GLExtRequestor(gl) {
        _classCallCheck(this, GLExtRequestor);

        this.gl = gl;
        this.extensions = {};
        this._readyExtensions = {};
        GLExtRequestor._glToRequestorMap.set(gl, this);
        this._resolveRequested();
        GLExtRequestor._requestObserver.push(this._resolveExtensionSafely.bind(this));
    }
    /**
     * Get GLExtRequestor from WebGLRenderingContext
     * @param  {WebGLRenderingContext} gl [description]
     * @return {GLExtRequestor}           [description]
     */


    _createClass(GLExtRequestor, [{
        key: "_resolveRequested",

        /**
         * Resolve all extension requested already.
         */
        value: function _resolveRequested() {
            var _this = this;

            GLExtRequestor._requestedExtensions.forEach(function (e) {
                _this._resolveExtensionSafely(e.extensionName);
            });
        }
    }, {
        key: "_resolveExtensionSafely",
        value: function _resolveExtensionSafely(extName) {
            var e = GLExtRequestor._requestedExtensions[GLExtRequestor._requestIndexOf(extName)];
            if (!this._resolveExtension(e.extensionName) && e.isNecessary) {
                throw new Error("A WebGL extension '" + e.extensionName + "' was requested. But that is not supported on this device.");
            }
        }
    }, {
        key: "_resolveExtension",
        value: function _resolveExtension(name) {
            if (this._readyExtensions[name]) {
                return true;
            }
            var ext = void 0;
            if (typeof GLExtRequestor._customExtensionResolvers[name] === "undefined") {
                ext = this.extensions[name] = this.gl.getExtension(name);
            } else {
                ext = this.extensions[name] = GLExtRequestor._customExtensionResolvers[name](this.gl);
            }
            this._readyExtensions[name] = this.extensions[name] !== void 0;
            if (ext) {
                _MaterialFactory2.default.get(this.gl).macro.setValue(name.toUpperCase(), "");
            }
            return !!this._readyExtensions[name];
        }
    }], [{
        key: "get",
        value: function get(gl) {
            return GLExtRequestor._glToRequestorMap.get(gl);
        }
        /**
         * Check specified extension was supported on this device.
         * Note: This method would throw an exception if there was no WebGL context initialized yet.
         * @param  {string}  extName [description]
         * @return {boolean}         [description]
         */

    }, {
        key: "supported",
        value: function supported(extName) {
            var fg = GLExtRequestor._getFirst();
            if (!fg) {
                throw new Error("There was no WebGLRenderingContext initialized yet");
            } else {
                return fg.extensions[extName] !== undefined && fg.extensions[extName] !== null;
            }
        }
    }, {
        key: "_getFirst",
        value: function _getFirst() {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = GLExtRequestor._glToRequestorMap.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var f = _step.value;

                    return f;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
        /**
         * Request extension to use.
         * @param {string} str [description]
         */

    }, {
        key: "request",
        value: function request(extName) {
            var isNecessary = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var index = GLExtRequestor._requestIndexOf(extName);
            if (index > -1 && isNecessary) {
                GLExtRequestor._requestedExtensions[index] = { extensionName: extName, isNecessary: isNecessary };
            } else if (index === -1) {
                GLExtRequestor._requestedExtensions.push({ extensionName: extName, isNecessary: isNecessary });
            }
            GLExtRequestor._requestObserver.forEach(function (o) {
                return o(extName);
            });
        }
    }, {
        key: "_requestIndexOf",
        value: function _requestIndexOf(extName) {
            for (var i = 0; i < GLExtRequestor._requestedExtensions.length; i++) {
                if (GLExtRequestor._requestedExtensions[i].extensionName === extName) {
                    return i;
                }
            }
            return -1;
        }
    }]);

    return GLExtRequestor;
}();
/**
 * Extension list requested to use.
 * @type {string[]}
 */


exports.default = GLExtRequestor;
GLExtRequestor._requestedExtensions = [];
GLExtRequestor._glToRequestorMap = new Map();
/**
 * Some of extensions needed to override resolving extensions by this.
 */
GLExtRequestor._customExtensionResolvers = {};
GLExtRequestor._requestObserver = [];
GLExtRequestor._customExtensionResolvers["WEBGL_color_buffer_float"] = function (gl) {
    var isSupported = void 0;
    if (gl.getExtension("WEBGL_color_buffer_float") === null) {
        var fbo = gl.createFramebuffer();
        var tex = gl.createTexture();
        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
        gl.bindTexture(gl.TEXTURE_2D, tex);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.FLOAT, null);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
        if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) !== gl.FRAMEBUFFER_COMPLETE) {
            isSupported = false;
        } else {
            isSupported = true;
        }
        gl.deleteTexture(tex);
        gl.deleteFramebuffer(fbo);
    } else {
        isSupported = true;
    }
    return isSupported;
};

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Vector = __webpack_require__(11);

var _Vector2 = _interopRequireDefault(_Vector);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var rc = 511;
var gc = rc << 8;
var bc = gc << 8;
var ac = bc << 8;

var MeshIndexCalculator = function () {
    function MeshIndexCalculator() {
        _classCallCheck(this, MeshIndexCalculator);
    }

    _createClass(MeshIndexCalculator, null, [{
        key: "fromIndex",
        value: function fromIndex(index) {
            return new _Vector2.default((index & rc) / 255, ((index & gc) >> 8) / 255, ((index & bc) >> 16) / 255, ((index & ac) >> 24) / 255);
        }
    }, {
        key: "fromColor",
        value: function fromColor(color) {
            return color[0] + (color[1] << 8) + (color[2] << 16) + (color[3] << 24);
        }
    }]);

    return MeshIndexCalculator;
}();

exports.default = MeshIndexCalculator;

/***/ }),
/* 28 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS;

/***/ }),
/* 29 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math.GLM;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _EEObject2 = __webpack_require__(101);

var _EEObject3 = _interopRequireDefault(_EEObject2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

/**
 * Provides managing all promise on initializing resources.
 */
var AssetLoader = function (_EEObject) {
    _inherits(AssetLoader, _EEObject);

    function AssetLoader() {
        _classCallCheck(this, AssetLoader);

        /**
         * Promise count registered.
         * @type {number}
         */
        var _this = _possibleConstructorReturn(this, (AssetLoader.__proto__ || Object.getPrototypeOf(AssetLoader)).apply(this, arguments));

        _this.registerCount = 0;
        /**
         * Promise count finished successfully.
         * @type {number}
         */
        _this.loadCount = 0;
        /**
         * Promise count completed(success and errored)
         * @type {number}
         */
        _this.completeCount = 0;
        /**
         * Promise count errored
         * @type {number}
         */
        _this.errorCount = 0;
        /**
         * Main promise to provide tasks for waiting for all resource loading.
         * @type {Promise<void>}
         */
        _this.promise = new Promise(function (resolve) {
            _this._resolve = resolve;
        });
        return _this;
    }
    /**
     * Register an promise to be waited until finished.
     */


    _createClass(AssetLoader, [{
        key: "register",
        value: function register(promise) {
            var _this2 = this;

            this.registerCount++;
            return new Promise(function (resolve, reject) {
                (function () {
                    return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                        return regeneratorRuntime.wrap(function _callee$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        _context.prev = 0;
                                        _context.t0 = resolve;
                                        _context.next = 4;
                                        return promise;

                                    case 4:
                                        _context.t1 = _context.sent;
                                        (0, _context.t0)(_context.t1);

                                        this.loadCount++;
                                        _context.next = 13;
                                        break;

                                    case 9:
                                        _context.prev = 9;
                                        _context.t2 = _context["catch"](0);

                                        reject(_context.t2);
                                        this.errorCount++;

                                    case 13:
                                        this.completeCount++;
                                        this._checkLoadCompleted();

                                    case 15:
                                    case "end":
                                        return _context.stop();
                                }
                            }
                        }, _callee, this, [[0, 9]]);
                    }));
                }).bind(_this2)();
            });
        }
        /**
         * Verify all promises are completed.
         */

    }, {
        key: "_checkLoadCompleted",
        value: function _checkLoadCompleted() {
            this.emit("progress", this);
            if (this.registerCount === this.completeCount) {
                this._resolve();
            }
        }
    }]);

    return AssetLoader;
}(_EEObject3.default);

exports.default = AssetLoader;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TextFileResolver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _ExternalResourceResolver = __webpack_require__(21);

var _ExternalResourceResolver2 = _interopRequireDefault(_ExternalResourceResolver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TextFileResolver = exports.TextFileResolver = function (_ExternalResourceReso) {
    _inherits(TextFileResolver, _ExternalResourceReso);

    function TextFileResolver() {
        _classCallCheck(this, TextFileResolver);

        return _possibleConstructorReturn(this, (TextFileResolver.__proto__ || Object.getPrototypeOf(TextFileResolver)).apply(this, arguments));
    }

    _createClass(TextFileResolver, [{
        key: "resolve",
        value: function resolve(path) {
            var _this2 = this;

            return _get(TextFileResolver.prototype.__proto__ || Object.getPrototypeOf(TextFileResolver.prototype), "resolve", this).call(this, path, function (abs) {
                if (TextFileResolver.isDataURL(abs)) {
                    return Promise.resolve(_this2._dataUriToText(abs));
                }
                return new Promise(function (resolve, reject) {
                    var xhr = new XMLHttpRequest();
                    xhr.open("GET", abs);
                    xhr.onload = function (v) {
                        resolve(xhr.responseText);
                    };
                    xhr.onerror = function (e) {
                        reject(e);
                    };
                    xhr.send();
                });
            });
        }
    }, {
        key: "_dataUriToText",
        value: function _dataUriToText(dataUrl) {
            var splittedUri = dataUrl.split(",");
            var byteString = atob(splittedUri[1]);
            return byteString;
        }
    }]);

    return TextFileResolver;
}(_ExternalResourceResolver2.default);

exports.default = new TextFileResolver();

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * VideoResolver provides abstraction of loading feature for video element.
 * Despite the other resolvers, VideoResolver doesn't extends ExternalResourceResolver since
 * that element contains frame operation also and it affects frame control in each function of grimoire using.
 * @param  {string}                    path [description]
 * @return {Promise<HTMLVideoElement>}      [description]
 */
/**
 * VideoResolver provides abstraction of loading feature for video element.
 * Despite the other resolvers, VideoResolver doesn't extends ExternalResourceResolver since
 * that element contains frame operation also and it affects frame control in each function of grimoire using.
 * @param  {string}                    path [description]
 * @return {Promise<HTMLVideoElement>}      [description]
 */var VideoResolver = exports.VideoResolver = function () {
    function VideoResolver() {
        _classCallCheck(this, VideoResolver);
    }

    _createClass(VideoResolver, [{
        key: "resolve",
        value: function resolve(path) {
            var _this = this;

            return new Promise(function (resolve, reject) {
                var video = document.createElement("video");
                video.crossOrigin = _this._getCORSConfig(path);
                video.preload = "auto";
                video.addEventListener("canplay", function () {
                    resolve(video);
                });
                video.addEventListener("canplaythrough", function () {
                    resolve(video);
                });
                video.onerror = function (e) {
                    reject("Error has been occured during loading \"" + path + "\"\n" + e);
                };
                video.src = path;
                video.load();
                if (video.readyState > 3) {
                    resolve(video);
                }
            });
        }
    }, {
        key: "_getCORSConfig",
        value: function _getCORSConfig(path) {
            var corsConfig = null;
            for (var i = 0; i < VideoResolver.corsResolvers.length; i++) {
                corsConfig = VideoResolver.corsResolvers[i](path);
                if (corsConfig !== null) {
                    break;
                }
            }
            if (corsConfig === null) {
                corsConfig = VideoResolver.defaultCORSConfig;
            }
            return corsConfig;
        }
    }]);

    return VideoResolver;
}();

VideoResolver.defaultCORSConfig = "anonymous";
/**
 * Cors config resolvers.
 * If all of resolvers returns null, defaultCORSConfig will be used.
 */
VideoResolver.corsResolvers = [];
exports.default = new VideoResolver();

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AssetLoader = __webpack_require__(30);

var _AssetLoader2 = _interopRequireDefault(_AssetLoader);

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

var _defaultLoader = __webpack_require__(106);

var _defaultLoader2 = _interopRequireDefault(_defaultLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

/**
 * アセットの読み込みを司るコンポーネント。ローダーの表示などを司る。
 */
var AssetLoadingManagerComponent = function (_Component) {
    _inherits(AssetLoadingManagerComponent, _Component);

    function AssetLoadingManagerComponent() {
        _classCallCheck(this, AssetLoadingManagerComponent);

        var _this = _possibleConstructorReturn(this, (AssetLoadingManagerComponent.__proto__ || Object.getPrototypeOf(AssetLoadingManagerComponent)).apply(this, arguments));

        _this.loader = new _AssetLoader2.default();
        return _this;
    }

    _createClass(AssetLoadingManagerComponent, [{
        key: "$treeInitialized",
        value: function $treeInitialized() {
            if (this.getAttribute("autoStart")) {
                this._autoStart();
            }
            this._documentResolver();
        }
    }, {
        key: "$awake",
        value: function $awake() {
            var _this2 = this;

            this.companion.set(this.name.ns.for("loader"), this.loader);
            this.loader.register(new Promise(function (resolve) {
                _this2._documentResolver = resolve;
            }));
            var canvasContainer = this.companion.get("canvasContainer");
            if (!this.getAttribute("enableLoader")) {
                return;
            }
            var loaderContainer = document.createElement("div");
            loaderContainer.innerHTML = _defaultLoader2.default;
            loaderContainer.style.width = loaderContainer.style.height = "100%";
            canvasContainer.appendChild(loaderContainer);
            this._loaderElement = loaderContainer;
        }
    }, {
        key: "_autoStart",
        value: function _autoStart() {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                var canvas;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return this.loader.promise;

                            case 2:
                                if (this._loaderElement) {
                                    this._loaderElement.remove();
                                }
                                this.node.emit("asset-load-completed");
                                this.tree("goml").setAttribute("loopEnabled", true);
                                canvas = this.companion.get("canvasElement");

                                canvas.classList.add("gr-resource-loaded-canvas");

                            case 7:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }]);

    return AssetLoadingManagerComponent;
}(_Component3.default);

exports.default = AssetLoadingManagerComponent;

AssetLoadingManagerComponent.attributes = {
    /**
     * ローディング状況(読み取り専用)
     *
     * 現在の読み込み状況を0-1で表す。
     */
    loadingProgress: {
        default: 0,
        converter: "Number"
    },
    /**
     * リソースの読み込み完了後に、自動的にレンダリングループを開始するかどうか
     */
    autoStart: {
        default: true,
        converter: "Boolean"
    },
    /**
     * リソースのロード時にローディング画面を表示するかどうか
     */
    enableLoader: {
        default: true,
        converter: "Boolean"
    }
};

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GLM = __webpack_require__(29);

var _GLM2 = _interopRequireDefault(_GLM);

var _Vector = __webpack_require__(11);

var _Vector2 = _interopRequireDefault(_Vector);

var _Vector3 = __webpack_require__(10);

var _Vector4 = _interopRequireDefault(_Vector3);

var _Matrix = __webpack_require__(9);

var _Matrix2 = _interopRequireDefault(_Matrix);

var _RenderQueue = __webpack_require__(79);

var _RenderQueue2 = _interopRequireDefault(_RenderQueue);

var _TransformComponent = __webpack_require__(3);

var _TransformComponent2 = _interopRequireDefault(_TransformComponent);

var _SceneComponent = __webpack_require__(15);

var _SceneComponent2 = _interopRequireDefault(_SceneComponent);

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var vec3 = _GLM2.default.vec3,
    vec4 = _GLM2.default.vec4,
    mat4 = _GLM2.default.mat4;

/**
 * シーンを描画するカメラのコンポーネント
 * このコンポーネントによって、透視射影や正方射影などの歪みを調整します。
 * また、このコンポーネントの付属するノードに属する`Transoform`によって、カメラの位置や向きが確定されます。
 */
var CameraComponent = function (_Component) {
    _inherits(CameraComponent, _Component);

    function CameraComponent() {
        _classCallCheck(this, CameraComponent);

        var _this = _possibleConstructorReturn(this, (CameraComponent.__proto__ || Object.getPrototypeOf(CameraComponent)).apply(this, arguments));

        _this.__viewMatrix = new _Matrix2.default();
        _this.__projectionMatrix = new _Matrix2.default();
        _this.__invProjectionMatrix = new _Matrix2.default();
        _this.__projectionViewMatrix = new _Matrix2.default();
        _this._renderQueue = new _RenderQueue2.default();
        _this._eyeCache = _Vector4.default.Zero;
        _this._lookAtCache = _Vector4.default.Zero;
        _this._upCache = _Vector4.default.Zero;
        _this._orthographic = false;
        return _this;
    }

    _createClass(CameraComponent, [{
        key: "$awake",
        value: function $awake() {
            var _this2 = this;

            this.getAttributeRaw("far").watch(function (v) {
                _this2.Far = v;
            }, true);
            this.getAttributeRaw("near").watch(function (v) {
                _this2.Near = v;
            }, true);
            this.getAttributeRaw("fovy").watch(function (v) {
                _this2.Fovy = v;
            }, true);
            this.getAttributeRaw("aspect").watch(function (v) {
                _this2.Aspect = v;
            }, true);
            this.getAttributeRaw("orthoSize").watch(function (v) {
                _this2.OrthoSize = v;
            }, true);
            this.getAttributeRaw("orthogonal").watch(function (v) {
                _this2.OrthographicMode = v;
            }, true);
            this.getAttributeRaw("autoAspect").boundTo("_autoAspect");
        }
    }, {
        key: "$mount",
        value: function $mount() {
            this.transform = this.node.getComponent(_TransformComponent2.default);
            this.containedScene = CameraComponent._findContainedScene(this.node);
            this.containedScene.queueRegistory.registerQueue(this._renderQueue);
            this.node.on("transformUpdated", this.updateTransform.bind(this));
            this.updateTransform();
        }
    }, {
        key: "$unmount",
        value: function $unmount() {
            this.containedScene.queueRegistory.unregisterQueue(this._renderQueue);
            this.containedScene = null;
        }
    }, {
        key: "updateContainedScene",
        value: function updateContainedScene(timer) {
            if (this.containedScene) {
                this.containedScene.updateScene(timer);
            }
        }
    }, {
        key: "renderScene",
        value: function renderScene(args) {
            if (this.containedScene) {
                this._justifyAspect(args);
                args.sceneDescription = this.containedScene.sceneDescription;
                this._renderQueue.renderAll(args, true, args.timer);
            }
        }
    }, {
        key: "updateTransform",
        value: function updateTransform() {
            var transform = this.transform;
            vec3.transformMat4(this._eyeCache.rawElements, _Vector4.default.Zero.rawElements, transform.globalTransform.rawElements);
            vec4.transformMat4(this._lookAtCache.rawElements, CameraComponent._frontOrigin.rawElements, transform.globalTransform.rawElements);
            vec3.add(this._lookAtCache.rawElements, this._lookAtCache.rawElements, this._eyeCache.rawElements);
            vec4.transformMat4(this._upCache.rawElements, CameraComponent._upOrigin.rawElements, transform.globalTransform.rawElements);
            mat4.lookAt(this.__viewMatrix.rawElements, this._eyeCache.rawElements, this._lookAtCache.rawElements, this._upCache.rawElements);
            mat4.mul(this.__projectionViewMatrix.rawElements, this.__projectionMatrix.rawElements, this.__viewMatrix.rawElements);
        }
    }, {
        key: "_justifyAspect",
        value: function _justifyAspect(args) {
            if (this._autoAspect) {
                var asp = args.viewport.Width / args.viewport.Height;
                if (this._aspectCache !== asp) {
                    this.setAttribute("aspect", asp);
                    this._aspectCache = asp;
                }
            }
        }
    }, {
        key: "_recalculateProjection",
        value: function _recalculateProjection() {
            if (!this._orthographic) {
                mat4.perspective(this.__projectionMatrix.rawElements, this._fovy, this._aspect, this._near, this._far);
            } else {
                mat4.ortho(this.__projectionMatrix.rawElements, -this._orthoSize * this._aspect, this._orthoSize * this._aspect, -this._orthoSize, this._orthoSize, this._near, this._far);
            }
            mat4.mul(this.__projectionViewMatrix.rawElements, this.__projectionMatrix.rawElements, this.__viewMatrix.rawElements);
            mat4.invert(this.__invProjectionMatrix.rawElements, this.__projectionMatrix.rawElements);
        }
    }, {
        key: "ViewMatrix",
        get: function get() {
            return this.__viewMatrix;
        }
    }, {
        key: "ProjectionMatrix",
        get: function get() {
            return this.__projectionMatrix;
        }
    }, {
        key: "InvProjectionMatrix",
        get: function get() {
            return this.__invProjectionMatrix;
        }
    }, {
        key: "ProjectionViewMatrix",
        get: function get() {
            return this.__projectionViewMatrix;
        }
    }, {
        key: "Far",
        get: function get() {
            return this._far;
        },
        set: function set(far) {
            this._far = far;
            this._recalculateProjection();
        }
    }, {
        key: "Near",
        get: function get() {
            return this._near;
        },
        set: function set(near) {
            this._near = near;
            this._recalculateProjection();
        }
    }, {
        key: "Aspect",
        get: function get() {
            return this._aspect;
        },
        set: function set(aspect) {
            this._aspect = aspect;
            this._recalculateProjection();
        }
    }, {
        key: "Fovy",
        get: function get() {
            return this._fovy;
        },
        set: function set(fov) {
            this._fovy = fov;
            this._recalculateProjection();
        }
    }, {
        key: "OrthoSize",
        get: function get() {
            return this._orthoSize;
        },
        set: function set(size) {
            this._orthoSize = size;
        }
    }, {
        key: "OrthographicMode",
        set: function set(isOrtho) {
            this._orthographic = isOrtho;
            this._recalculateProjection();
        },
        get: function get() {
            return this._orthographic;
        }
    }, {
        key: "AutoAspect",
        set: function set(autoMode) {
            if (this._autoAspect !== autoMode) {
                this._autoAspect = autoMode;
                this._recalculateProjection();
            }
        },
        get: function get() {
            return this._autoAspect;
        }
        /**
        * Find scene tag recursively.
        * @param  {GomlNode}       node [the node to searching currently]
        * @return {SceneComponent}      [the scene component found]
        */

    }], [{
        key: "_findContainedScene",
        value: function _findContainedScene(node) {
            if (node.parent) {
                var scene = node.parent.getComponent(_SceneComponent2.default);
                if (scene) {
                    return scene;
                } else {
                    return CameraComponent._findContainedScene(node.parent);
                }
            } else {
                return null;
            }
        }
    }]);

    return CameraComponent;
}(_Component3.default);

exports.default = CameraComponent;

CameraComponent.attributes = {
    /**
     * カメラの視野角。
     * orthogonal属性がtrueである場合この属性は無視されます。
     */
    fovy: {
        default: "45d",
        converter: "Angle2D"
    },
    /**
     * カメラに映るもっとも近い距離です。
     * 0よりも大きく、far属性よりも小さい必要があります。
     */
    near: {
        default: 0.01,
        converter: "Number"
    },
    /**
     * カメラに映る最も遠い距離です。
     * near属性よりも大きい必要があります。
     *
     * far - nearの値があまりにも大きいと、Z-fighting(手前の物体が奥に表示されたように見えたりする)現象が起きる可能性があります。
     * この差があまりに大きい時、カメラに映る物体の座標の小さいz座標の値の差は0に近似されます。
     * 逆にこの値が小さい時は、カメラに映る物体はある程度小さいz座標の差でも問題なく表示されます。
     * **大切なのは、写したい空間よりも無駄に大きくしないこと。常に適切な値を設定するべきです**
     */
    far: {
        default: 100,
        converter: "Number"
    },
    /**
     * カメラのアスペクト比
     * カメラの横の大きさと縦の大きさの比率を指定します。autoAspect属性がtrueである時、毎回のレンダリング時にこの値を自動調整します。
     */
    aspect: {
        default: 1.6,
        converter: "Number"
    },
    /**
     * アスペクト比の自動調整が有効か否か
     * レンダリング時にそのビューポートの大きさに応じて比率を自動調整するかどうかを示します。
     */
    autoAspect: {
        default: true,
        converter: "Boolean"
    },
    /**
     * 正射影時の横の基準サイズ
     * 正射影時はfovy属性を用いて自動的に写す領域を決定できません。
     * そのため、横の一片のサイズをこの属性で指定します。**アスペクト比は計算に用いられることに注意してください。**
     */
    orthoSize: {
        default: 100,
        converter: "Number"
    },
    /**
     * このカメラが正射影かどうか
     *
     * この属性がfalseである場合、カメラは透視射影としてシーンをレンダリングします。この場合、レンダリング結果にパース(奥行き感)が出ます。
     * 一方、この属性がtrueである場合、カメラは正射影としてシーンをレンダリングします。この場合、レンダリング結果には奥行き感は出ません。
     */
    orthogonal: {
        default: false,
        converter: "Boolean"
    }
};
CameraComponent._frontOrigin = new _Vector2.default(0, 0, -1, 0);
CameraComponent._upOrigin = new _Vector2.default(0, 1, 0, 0);

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _MaterialFactory = __webpack_require__(4);

var _MaterialFactory2 = _interopRequireDefault(_MaterialFactory);

var _Namespace = __webpack_require__(102);

var _Namespace2 = _interopRequireDefault(_Namespace);

var _Texture2D = __webpack_require__(1);

var _Texture2D2 = _interopRequireDefault(_Texture2D);

var _GrimoireInterface = __webpack_require__(103);

var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);

var _GLExtRequestor = __webpack_require__(26);

var _GLExtRequestor2 = _interopRequireDefault(_GLExtRequestor);

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ns = _Namespace2.default.define("grimoirejs-fundamental");
var ResizeMode;
(function (ResizeMode) {
    ResizeMode[ResizeMode["Aspect"] = 0] = "Aspect";
    ResizeMode[ResizeMode["Fit"] = 1] = "Fit";
    ResizeMode[ResizeMode["Manual"] = 2] = "Manual";
})(ResizeMode || (ResizeMode = {}));
/**
 * キャンバスの初期化及び設定を司るコンポーネント
 * このコンポーネントによって、適切な位置に`<canvas>`を初期化してWebGLコンテキストを初期化します。
 */

var CanvasInitializerComponent = function (_Component) {
    _inherits(CanvasInitializerComponent, _Component);

    function CanvasInitializerComponent() {
        _classCallCheck(this, CanvasInitializerComponent);

        return _possibleConstructorReturn(this, (CanvasInitializerComponent.__proto__ || Object.getPrototypeOf(CanvasInitializerComponent)).apply(this, arguments));
    }

    _createClass(CanvasInitializerComponent, [{
        key: "$awake",
        value: function $awake() {
            var _this2 = this;

            this._scriptTag = this.companion.get("scriptElement");
            if (this._isContainedInBody(this._scriptTag)) {
                // canvas should be placed siblings of the script tag
                this._generateCanvas(this._scriptTag);
            } else {
                throw new Error("goml script should have body as ancesotor to instanciate canvas element in the location");
            }
            // apply sizes on changed
            this.getAttributeRaw("width").watch(function (v) {
                _this2._resize();
            });
            this.getAttributeRaw("height").watch(function (v) {
                _this2._resize();
            });
            this.getAttributeRaw("antialias").watch(function (v) {
                console.warn("Changing antialias attribute is not supported. This is only works when the canvas element created.");
            });
            this.getAttributeRaw("preserveDrawingBuffer").watch(function (v) {
                console.warn("Changing preserveDrawingBuffer attribute is not supported. This is only works when the canvas element created.");
            });
        }
        /**
         * Generate canvas element
         * @param  {Element}           parent [description]
         * @return {HTMLCanvasElement}        [description]
         */

    }, {
        key: "_generateCanvas",
        value: function _generateCanvas(scriptTag) {
            var _this3 = this;

            this._autoFixForBody(scriptTag);
            this.canvas = document.createElement("canvas");
            window.addEventListener("resize", function () {
                return _this3._onWindowResize();
            });
            this._configureCanvas(this.canvas, scriptTag);
            var gl = this._getContext(this.canvas);
            this.companion.set(ns.for("gl"), gl);
            this.companion.set(ns.for("canvasElement"), this.canvas);
            this.companion.set(ns.for("MaterialFactory"), new _MaterialFactory2.default(gl));
            this.companion.set(ns.for("GLExtRequestor"), new _GLExtRequestor2.default(gl));
            _Texture2D2.default.generateDefaultTexture(gl);
            return this.canvas;
        }
    }, {
        key: "_resize",
        value: function _resize(supressBroadcast) {
            var canvas = this.companion.get("canvasElement");
            var widthRaw = this.getAttribute("width");
            var heightRaw = this.getAttribute("height");
            this._widthMode = this._asResizeMode(widthRaw);
            this._heightMode = this._asResizeMode(heightRaw);
            if (this._widthMode === this._heightMode && this._widthMode === ResizeMode.Aspect) {
                throw new Error("Width and height could not have aspect mode in same time!");
            }
            if (this._widthMode === ResizeMode.Aspect) {
                this._ratio = widthRaw.aspect;
            }
            if (this._heightMode === ResizeMode.Aspect) {
                this._ratio = heightRaw.aspect;
            }
            if (this._widthMode === ResizeMode.Manual) {
                this._applyManualWidth(widthRaw.size, supressBroadcast);
            }
            if (this._heightMode === ResizeMode.Manual) {
                this._applyManualHeight(heightRaw.size, supressBroadcast);
            }
            this._onWindowResize(supressBroadcast);
        }
    }, {
        key: "_onWindowResize",
        value: function _onWindowResize(supressBroadcast) {
            var size = this._getParentSize();
            if (this._widthMode === ResizeMode.Fit) {
                this._applyManualWidth(size.width, supressBroadcast);
            }
            if (this._heightMode === ResizeMode.Fit) {
                if (size.height === 0 && _GrimoireInterface2.default.debug) {
                    console.warn("Canvas height parameter specified as fit and height of parent element is 0.\n This is possibly the reason you haven't set css to html or body element.");
                }
                this._applyManualHeight(size.height, supressBroadcast);
            }
        }
    }, {
        key: "_applyManualWidth",
        value: function _applyManualWidth(width, supressBroadcast) {
            if (width === this.canvas.width) {
                return;
            }
            this.canvas.width = width;
            this._canvasContainer.style.width = width + "px";
            if (!supressBroadcast) {
                this.node.broadcastMessage(1, "resizeCanvas");
            }
            if (this._heightMode === ResizeMode.Aspect) {
                this._applyManualHeight(width / this._ratio, supressBroadcast);
            }
        }
    }, {
        key: "_applyManualHeight",
        value: function _applyManualHeight(height, supressBroadcast) {
            if (height === this.canvas.height) {
                return;
            }
            this.canvas.height = height;
            this._canvasContainer.style.height = height + "px";
            if (!supressBroadcast) {
                this.node.broadcastMessage(1, "resizeCanvas");
            }
            if (this._widthMode === ResizeMode.Aspect) {
                this._applyManualWidth(height * this._ratio, supressBroadcast);
            }
        }
    }, {
        key: "_getParentSize",
        value: function _getParentSize() {
            var parent = this._canvasContainer.parentElement;
            var boundingBox = parent.getBoundingClientRect();
            return boundingBox;
        }
        /**
         * Get resize mode from raw attribute of height or width
         * @param  {string  | number}      mode [description]
         * @return {ResizeMode}   [description]
         */

    }, {
        key: "_asResizeMode",
        value: function _asResizeMode(cso) {
            if (cso.mode === "fit") {
                return ResizeMode.Fit;
            } else if (cso.mode === "aspect") {
                return ResizeMode.Aspect;
            } else {
                return ResizeMode.Manual;
            }
        }
    }, {
        key: "_configureCanvas",
        value: function _configureCanvas(canvas, scriptTag) {
            canvas.style.position = "absolute";
            canvas.style.top = "0px";
            canvas.style.left = "0px";
            this._canvasContainer = document.createElement("div");
            this._canvasContainer.style.position = "relative";
            this._canvasContainer.style.overflow = "hidden";
            this._canvasContainer.appendChild(canvas);
            if (this.getAttribute("containerId")) {
                this._canvasContainer.id = this.getAttribute("containerId");
            }
            if (this.getAttribute("containerClass")) {
                this._canvasContainer.className = this.getAttribute("containerClass");
            }
            this.companion.set(ns.for("canvasContainer"), this._canvasContainer);
            scriptTag.parentElement.insertBefore(this._canvasContainer, scriptTag.nextSibling);
            this._resize(true);
        }
    }, {
        key: "_getContext",
        value: function _getContext(canvas) {
            var contextConfig = {
                antialias: this.getAttribute("antialias"),
                preserveDrawingBuffer: this.getAttribute("preserveDrawingBuffer")
            };
            var context = canvas.getContext("webgl", contextConfig);
            if (!context) {
                context = canvas.getContext("experimental-webgl", contextConfig);
            }
            if (!context) {
                throw new Error("Failed to initializing WebGL context. Make sure your browser supporting WebGL.");
            }
            return context;
        }
        /**
         * Check the tag is included in the body
         * @param  {Element} tag [description]
         * @return {boolean}     [description]
         */

    }, {
        key: "_isContainedInBody",
        value: function _isContainedInBody(tag) {
            if (!tag.parentElement) {
                return false;
            }
            if (tag.parentNode.nodeName === "BODY") {
                return true;
            }
            return this._isContainedInBody(tag.parentElement);
        }
    }, {
        key: "_autoFixForBody",
        value: function _autoFixForBody(scriptTag) {
            if (scriptTag.parentElement.nodeName === "BODY") {
                var boudningBox = document.body.getBoundingClientRect();
                if (boudningBox.height === 0) {
                    document.body.style.height = "100%";
                    document.body.parentElement.style.height = "100%";
                }
            }
        }
    }]);

    return CanvasInitializerComponent;
}(_Component3.default);

CanvasInitializerComponent.attributes = {
    /**
     * キャンバスタグの横幅を指定します。
     */
    width: {
        default: "fit",
        converter: "CanvasSize"
    },
    /**
     * キャンバスタグの縦幅を指定します。
     */
    height: {
        default: "fit",
        converter: "CanvasSize"
    },
    /**
     * キャンバス要素の直接の親要素のコンテナに割り当てるidを指定します。
     */
    containerId: {
        default: "",
        converter: "String"
    },
    /**
     * キャンバス要素の直接の親要素のコンテナに割り当てるクラス名を指定します。
     */
    containerClass: {
        default: "gr-container",
        converter: "String"
    },
    /**
     * GLコンテキストの初期化時に、preserveDrawingBufferフラグを有効にするか指定します。
     *
     * 描画結果をdataURLに変換する際などはこの属性がtrueでないと正常にレンダリング結果を取得できません。
     */
    preserveDrawingBuffer: {
        default: true,
        converter: "Boolean"
    },
    /**
     * GLコンテキストの初期化時に、MSAAによるアンチエイリアスを有効にするか指定します。
     *
     * この属性は、途中で動的に変更することができません。
     */
    antialias: {
        default: true,
        converter: "Boolean"
    }
};
exports.default = CanvasInitializerComponent;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * フルスクリーン状態を管理するコンポーネント
 * Grimoire.jsによって管理されているキャンバス(正確にはその親のコンテナ)のフルスクリーン状態等を管理します。
 * (他の要素をフルスクリーン化することも可能ですが、通常このGrimoire.jsによって生成されるキャンバスを含むDOM要素に対して用いられます。)
 * また、一部の古いブラウザでは動作しない機能であることに注意してください。
 * また、`fullscreen`属性は必ず マウスのイベントなどのユーザーのインタラクションを伴うイベントからの呼び出しで **動的に** trueにされる必要があります。
 * 最初からtrueに設定して初期状態でキャンバスをフルスクリーン状態にすることはWebAPIの制約上できません。
 */
var FullscreenComponent = function (_Component) {
    _inherits(FullscreenComponent, _Component);

    function FullscreenComponent() {
        _classCallCheck(this, FullscreenComponent);

        var _this = _possibleConstructorReturn(this, (FullscreenComponent.__proto__ || Object.getPrototypeOf(FullscreenComponent)).apply(this, arguments));

        _this._fullscreen = false;
        return _this;
    }

    _createClass(FullscreenComponent, [{
        key: "$awake",
        value: function $awake() {
            var _this2 = this;

            this.getAttributeRaw("fullscreen").watch(function (attr) {
                if (_this2._fullscreen === attr) {
                    return;
                }
                _this2._fullscreen = attr;
                _this2._switchFullscreen();
            });
        }
    }, {
        key: "_switchFullscreen",
        value: function _switchFullscreen() {
            if (this._fullscreen) {
                this.requestFullscreen(this.getAttribute("fullscreenTarget") || this.companion.get("canvasContainer"));
            } else {
                this.exitFullscreen();
            }
        }
    }, {
        key: "requestFullscreen",
        value: function requestFullscreen(target) {
            if (target.webkitRequestFullscreen) {
                target.webkitRequestFullscreen(); //Chrome15+, Safari5.1+, Opera15+
            } else if (target["mozRequestFullScreen"]) {
                target["mozRequestFullScreen"](); //FF10+
            } else if (target["msRequestFullscreen"]) {
                target["msRequestFullscreen"](); //IE11+
            } else if (target.requestFullscreen) {
                target.requestFullscreen(); // HTML5 Fullscreen API仕様
            } else {
                console.error('ご利用のブラウザはフルスクリーン操作に対応していません');
                return;
            }
        }
        /*フルスクリーン終了用ファンクション*/

    }, {
        key: "exitFullscreen",
        value: function exitFullscreen() {
            if (document.webkitCancelFullScreen) {
                document.webkitCancelFullScreen(); //Chrome15+, Safari5.1+, Opera15+
            } else if (document["mozCancelFullScreen"]) {
                document["mozCancelFullScreen"](); //FF10+
            } else if (document["msExitFullscreen"]) {
                document["msExitFullscreen"](); //IE11+
            } else if (document["cancelFullScreen"]) {
                document["cancelFullScreen"](); //Gecko:FullScreenAPI仕様
            } else if (document.exitFullscreen) {
                document.exitFullscreen(); // HTML5 Fullscreen API仕様
            }
        }
    }]);

    return FullscreenComponent;
}(_Component3.default);

exports.default = FullscreenComponent;

FullscreenComponent.attributes = {
    /**
     * フルスクリーン状態かどうか
     *
     * このフラグをtrueにする際は、**必ず**、マウスイベントなどのユーザーのインタラクションを伴うイベントからの呼び出しで変更されなければなりません。
     *
     * したがって、GOMLで初期状態からこのフラグをtrueにすることはできません。
     */
    fullscreen: {
        converter: "Boolean",
        default: false
    },
    /**
     * フルスクリーンにするDOM要素へのクエリ
     *
     * nullが指定された場合、キャンバスの親要素が用いられます。
     */
    fullscreenTarget: {
        converter: "String",
        default: null
    }
};

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GeometryFactory = __webpack_require__(17);

var _GeometryFactory2 = _interopRequireDefault(_GeometryFactory);

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

/**
 * ジオメトリを生成するためのコンポーネント
 * `type`属性に指定されたタイプのジオメトリを生成して、`name`属性に指定された名前で利用できる形にして登録します。
 * このコンポーネントは`type`属性に応じて、**動的** に属性が増えることに気をつけてください。
 */
var GeometryComponent = function (_Component) {
    _inherits(GeometryComponent, _Component);

    function GeometryComponent() {
        _classCallCheck(this, GeometryComponent);

        return _possibleConstructorReturn(this, (GeometryComponent.__proto__ || Object.getPrototypeOf(GeometryComponent)).apply(this, arguments));
    }

    _createClass(GeometryComponent, [{
        key: "$mount",
        value: function $mount() {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                var type, gf, attrs, geometryArgument, key, generator, gr, name;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                type = this.getAttribute("type");

                                if (!type) {
                                    _context.next = 15;
                                    break;
                                }

                                gf = this.companion.get("GeometryFactory");
                                attrs = _GeometryFactory2.default.factoryArgumentDeclarations[type];
                                geometryArgument = {};

                                for (key in attrs) {
                                    this.__addAttribute(key, attrs[key]);
                                    geometryArgument[key] = this.getAttribute(key);
                                }
                                generator = gf.instanciate(type, geometryArgument);
                                gr = this.companion.get("GeometryRegistory");
                                name = this.getAttribute("name");

                                if (name) {
                                    _context.next = 11;
                                    break;
                                }

                                throw new Error("Name was not specified");

                            case 11:
                                gr.addGeometry(name, generator);
                                _context.next = 14;
                                return generator;

                            case 14:
                                this.geometry = _context.sent;

                            case 15:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }]);

    return GeometryComponent;
}(_Component3.default);

exports.default = GeometryComponent;

GeometryComponent.attributes = {
    /**
     * 生成するプリミティブのタイプ
     *
     * `GeometryFactory`に登録されたプリミティブのジェネレーターの名前を指します。
     * この指定する名前によって、動的に属性が増えることに気をつけてください。
     * また、増えたジオメトリの属性は動的に操作できないことに気をつけてください。
     */
    type: {
        converter: "String",
        default: null
    },
    /**
     * ジオメトリにつける名前
     *
     * `GeometryConverter`によって取得される際に利用されるジオメトリ名です。
     * もし、`quad`など事前に登録されたジオメトリを指定した場合、そのジオメトリを上書きすることができます。
     */
    name: {
        converter: "String",
        default: null
    }
};

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GeometryFactory = __webpack_require__(17);

var _GeometryFactory2 = _interopRequireDefault(_GeometryFactory);

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

var _NameResolver = __webpack_require__(23);

var _NameResolver2 = _interopRequireDefault(_NameResolver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * ジオメトリを管理するコンポーネント
 * あまりユーザーが直接操作することはありません。
 */
var GeometryRegistoryComponent = function (_Component) {
    _inherits(GeometryRegistoryComponent, _Component);

    function GeometryRegistoryComponent() {
        _classCallCheck(this, GeometryRegistoryComponent);

        var _this = _possibleConstructorReturn(this, (GeometryRegistoryComponent.__proto__ || Object.getPrototypeOf(GeometryRegistoryComponent)).apply(this, arguments));

        _this._geometryResolver = new _NameResolver2.default();
        return _this;
    }

    _createClass(GeometryRegistoryComponent, [{
        key: "$awake",
        value: function $awake() {
            this._factory = new _GeometryFactory2.default(this.companion.get("gl"));
            this.companion.set(this.name, this);
            this.companion.set(this.name.ns.for("GeometryFactory"), this._factory);
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.getAttribute("defaultGeometry")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var geometry = _step.value;

                    this.addGeometry(geometry, this._factory.instanciateAsDefault(geometry));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "addGeometry",
        value: function addGeometry(name, geometry) {
            this._geometryResolver.register(name, geometry);
        }
    }, {
        key: "getGeometry",
        value: function getGeometry(name) {
            return this._geometryResolver.get(name);
        }
    }]);

    return GeometryRegistoryComponent;
}(_Component3.default);

exports.default = GeometryRegistoryComponent;

GeometryRegistoryComponent.attributes = {
    /**
     * デフォルトで生成するジオメトリの種類
     */
    defaultGeometry: {
        converter: "StringArray",
        default: ["quad", "cube", "sphere"]
    }
};

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _RenderSceneComponent = __webpack_require__(14);

var _RenderSceneComponent2 = _interopRequireDefault(_RenderSceneComponent);

var _TransformComponent = __webpack_require__(3);

var _TransformComponent2 = _interopRequireDefault(_TransformComponent);

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

var _Vector = __webpack_require__(11);

var _Vector2 = _interopRequireDefault(_Vector);

var _Matrix = __webpack_require__(9);

var _Matrix2 = _interopRequireDefault(_Matrix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * (Deprecated)DOM要素とTransformを同期させるためのコンポーネント
 * このコンポーネントはfundamentalからは削除されます。(別のパッケージとして分離予定)
 */
var HTMLBinderComponent = function (_Component) {
    _inherits(HTMLBinderComponent, _Component);

    function HTMLBinderComponent() {
        _classCallCheck(this, HTMLBinderComponent);

        var _this = _possibleConstructorReturn(this, (HTMLBinderComponent.__proto__ || Object.getPrototypeOf(HTMLBinderComponent)).apply(this, arguments));

        _this._isFirstCall = true;
        return _this;
    }

    _createClass(HTMLBinderComponent, [{
        key: "$awake",
        value: function $awake() {
            this._canvasContainer = this.companion.get("canvasContainer");
            this._currentTransform = this.node.getComponent(_TransformComponent2.default);
        }
    }, {
        key: "$mount",
        value: function $mount() {
            this._canvasContainer = this.companion.get("canvasContainer");
            this._currentTransform = this.node.getComponent(_TransformComponent2.default);
            this.node.on("render", this._onRender.bind(this));
        }
    }, {
        key: "$treeInitialized",
        value: function $treeInitialized() {
            var _this2 = this;

            this.getAttributeRaw("targetRenderer").watch(function (v) {
                if (_this2._rendererQuery !== v) {
                    _this2._onRendererChanged();
                }
            }, true);
            this.getAttributeRaw("htmlQuery").watch(function (v) {
                _this2._onQueryChanged(v);
            }, true);
        }
    }, {
        key: "_onRender",
        value: function _onRender(args) {
            if (this._isFirstCall) {
                this._onRendererChanged();
                this._isFirstCall = false;
            }
            if (this._queriedElement && args.renderer === this._targetRenderer) {
                var vp = args.viewport;
                var rawPos = _Matrix2.default.transform(this._currentTransform.calcPVM(args.camera), new _Vector2.default(0, 0, 0, 1));
                var rawScPos = {
                    x: rawPos.X / rawPos.W,
                    y: rawPos.Y / rawPos.W,
                    z: rawPos.Z / rawPos.W
                };
                if (rawScPos.z >= -1 && rawScPos.z <= 1) {
                    var scPos = {
                        x: vp.Left + (rawScPos.x + 1) / 2 * vp.Width,
                        y: vp.Top + (rawScPos.y + 1) / 2 * vp.Height
                    };
                    this._queriedElement.style.visibility = "visible";
                    this._queriedElement.style.left = scPos.x + "px";
                    this._queriedElement.style.bottom = scPos.y + "px";
                } else {
                    this._queriedElement.style.visibility = "hidden";
                }
            }
        }
        /**
         * Restore default position of queried html
         */

    }, {
        key: "_restoreDefault",
        value: function _restoreDefault() {
            this._canvasContainer.removeChild(this._queriedElement);
            this._parentCache.appendChild(this._queriedElement);
            var s = this._queriedElement.style;
            var c = this._styleCache;
            s.position = c["position"];
            s.left = c["left"];
            s.bottom = c["bottom"];
            s.visibility = c["visibility"];
        }
    }, {
        key: "_beginTrack",
        value: function _beginTrack() {
            this._parentCache.removeChild(this._queriedElement);
            this._canvasContainer.appendChild(this._queriedElement);
            this._queriedElement.style.position = "absolute";
        }
    }, {
        key: "_onRendererChanged",
        value: function _onRendererChanged() {
            var _this3 = this;

            var returned = false;
            this.tree(this.getAttribute("targetRenderer")).forEach(function (n) {
                if (returned) {
                    return true;
                } else {
                    _this3._targetRenderer = n.getComponent(_RenderSceneComponent2.default);
                    if (_this3._targetRenderer) {
                        returned = true;
                    }
                }
            });
        }
    }, {
        key: "_onQueryChanged",
        value: function _onQueryChanged(query) {
            var queried = void 0;
            if (query && query !== "") {
                queried = document.querySelectorAll(query);
            }
            if (this._queriedElement) {
                this._restoreDefault();
            }
            if (!queried || queried.length === 0) {
                this._queriedElement = undefined;
                this._parentCache = undefined;
            } else {
                this._queriedElement = queried.item(0);
                var s = this._queriedElement.style;
                this._styleCache = {
                    position: s.position,
                    visibility: s.visibility,
                    left: s.left,
                    bottom: s.bottom
                };
                this._parentCache = this._queriedElement.parentElement;
                this._beginTrack();
            }
        }
    }]);

    return HTMLBinderComponent;
}(_Component3.default);

exports.default = HTMLBinderComponent;

HTMLBinderComponent.attributes = {
    htmlQuery: {
        default: null,
        converter: "String"
    },
    targetRenderer: {
        default: "render-scene",
        converter: "String"
    }
};

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

var _TextureComponent = __webpack_require__(6);

var _TextureComponent2 = _interopRequireDefault(_TextureComponent);

var _ImageResolver = __webpack_require__(22);

var _ImageResolver2 = _interopRequireDefault(_ImageResolver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

var ImageTextureComponent = function (_Component) {
    _inherits(ImageTextureComponent, _Component);

    function ImageTextureComponent() {
        _classCallCheck(this, ImageTextureComponent);

        return _possibleConstructorReturn(this, (ImageTextureComponent.__proto__ || Object.getPrototypeOf(ImageTextureComponent)).apply(this, arguments));
    }

    _createClass(ImageTextureComponent, [{
        key: "$mount",
        value: function $mount() {
            var _this2 = this;

            this.__bindAttributes();
            this._textureComponent = this.node.getComponent(_TextureComponent2.default);
            this.getAttributeRaw("src").watch(function (v) {
                if (v !== null) {
                    _this2._loadTask(v);
                }
            }, true);
        }
    }, {
        key: "_loadTask",
        value: function _loadTask(src) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                var image;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return _ImageResolver2.default.resolve(src);

                            case 2:
                                image = _context.sent;

                                this._textureComponent.texture.update(image, {
                                    premultipliedAlpha: this.premultipliedAlpha,
                                    flipY: this.flipY
                                });

                            case 4:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }]);

    return ImageTextureComponent;
}(_Component3.default);

exports.default = ImageTextureComponent;

ImageTextureComponent.attributes = {
    src: {
        converter: "String",
        default: null
    },
    flipY: {
        converter: "Boolean",
        default: false
    },
    premultipliedAlpha: {
        converter: "Boolean",
        default: false
    }
};

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _MaterialFactory = __webpack_require__(4);

var _MaterialFactory2 = _interopRequireDefault(_MaterialFactory);

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * マテリアル設定ファイルを読み込むためのコンポーネント
 */
var MaterialImporterComponent = function (_Component) {
    _inherits(MaterialImporterComponent, _Component);

    function MaterialImporterComponent() {
        _classCallCheck(this, MaterialImporterComponent);

        return _possibleConstructorReturn(this, (MaterialImporterComponent.__proto__ || Object.getPrototypeOf(MaterialImporterComponent)).apply(this, arguments));
    }

    _createClass(MaterialImporterComponent, [{
        key: "$awake",
        value: function $awake() {
            this.getAttributeRaw("typeName").watch(function (v) {
                console.warn("Changeing 'typeName' on MaterialImporter makes no sense. This change won't affect anything.");
            });
            this.getAttributeRaw("src").watch(function (v) {
                console.warn("Changeing 'src' on MaterialImporter makes no sense. This change won't affect anything.");
            });
            if (!this.getAttribute("typeName") || !this.getAttribute("src")) {
                throw new Error("type or src cannot be null in material importer");
            } else {
                var typeName = this.getAttribute("typeName");
                if (_MaterialFactory2.default.factories[typeName] !== void 0) {
                    throw new Error("A material type '" + typeName + "' is already loaded.");
                }
                _MaterialFactory2.default.addSORTMaterialFromURL(this.getAttribute("typeName"), this.getAttribute("src"));
            }
        }
    }]);

    return MaterialImporterComponent;
}(_Component3.default);

exports.default = MaterialImporterComponent;

MaterialImporterComponent.attributes = {
    /**
     * マテリアル名として登録される名前
     */
    typeName: {
        default: null,
        converter: "String"
    },
    /**
     * 読み込み先のファイルパス
     */
    src: {
        default: null,
        converter: "String"
    }
};

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _SceneComponent = __webpack_require__(15);

var _SceneComponent2 = _interopRequireDefault(_SceneComponent);

var _MaterialContainerComponent = __webpack_require__(13);

var _MaterialContainerComponent2 = _interopRequireDefault(_MaterialContainerComponent);

var _TransformComponent = __webpack_require__(3);

var _TransformComponent2 = _interopRequireDefault(_TransformComponent);

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

var _GLM = __webpack_require__(29);

var _GLM2 = _interopRequireDefault(_GLM);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var vec3 = _GLM2.default.vec3;
/**
 * シーン中に存在するメッシュ一つあたりのレンダリングを司るコンポーネント
 * このメッシュが、対象となるノードの`Transform`や描画に用いる`Camera`、マテリアルなどを考慮して実際のレンダリングを行います。
 */

var MeshRenderer = function (_Component) {
    _inherits(MeshRenderer, _Component);

    function MeshRenderer() {
        _classCallCheck(this, MeshRenderer);

        var _this = _possibleConstructorReturn(this, (MeshRenderer.__proto__ || Object.getPrototypeOf(MeshRenderer)).apply(this, arguments));

        _this.renderArgs = {};
        _this._priortyCalcCache = new Float32Array(3);
        return _this;
    }
    /**
    * Find scene tag recursively.
    * @param  {GomlNode}       node [the node to searching currently]
    * @return {SceneComponent}      [the scene component found]
    */


    _createClass(MeshRenderer, [{
        key: "getRenderingPriorty",
        value: function getRenderingPriorty(camera, cameraMoved, lastPriorty) {
            if (!this.geometryInstance) {
                return Number.NEGATIVE_INFINITY;
            }
            vec3.add(this._priortyCalcCache, camera.transform.globalPosition.rawElements, this.geometryInstance.aabb.Center.rawElements);
            vec3.sub(this._priortyCalcCache, this._priortyCalcCache, this._transformComponent.globalPosition.rawElements);
            return this._materialContainer.getDrawPriorty(vec3.sqrLen(this._priortyCalcCache)); // Obtains distance between camera and center of aabb
        }
    }, {
        key: "$awake",
        value: function $awake() {
            var _this2 = this;

            this.__bindAttributes();
            this.getAttributeRaw("geometry").watch(function () {
                return __awaiter(_this2, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    _context.next = 2;
                                    return this.geometry;

                                case 2:
                                    this.geometryInstance = _context.sent;

                                case 3:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee, this);
                }));
            }, true);
        }
    }, {
        key: "$mount",
        value: function $mount() {
            this._transformComponent = this.node.getComponent(_TransformComponent2.default);
            this._materialContainer = this.node.getComponent(_MaterialContainerComponent2.default);
            this._containedScene = MeshRenderer._findContainedScene(this.node);
            this._containedScene.queueRegistory.addRenderable(this);
        }
    }, {
        key: "$unmount",
        value: function $unmount() {
            this._containedScene.queueRegistory.removeRenderable(this);
        }
    }, {
        key: "render",
        value: function render(args) {
            if (!this.node.isActive || !this.enabled || this.layer !== args.layer) {
                return;
            }
            if (!this.geometryInstance || !args.material && !this._materialContainer.material) {
                return; // material is not instanciated yet.
            }
            var renderArgs = {
                targetBuffer: this.targetBuffer,
                geometry: this.geometryInstance,
                attributeValues: null,
                camera: args.camera,
                transform: this._transformComponent,
                buffers: args.buffers,
                viewport: args.viewport,
                drawCount: this.drawCount,
                drawOffset: this.drawOffset,
                sceneDescription: args.sceneDescription,
                technique: args.technique,
                renderable: this
            };
            renderArgs.attributeValues = this._materialContainer.materialArgs; //TODO should be deprecated
            this._materialContainer.material.draw(renderArgs);
            this.node.emit("render", args);
        }
    }, {
        key: "setRenderableIndex",
        value: function setRenderableIndex(index) {
            this.index = index;
        }
    }], [{
        key: "_findContainedScene",
        value: function _findContainedScene(node) {
            if (node.parent) {
                var scene = node.parent.getComponent(_SceneComponent2.default);
                if (scene) {
                    return scene;
                } else {
                    return MeshRenderer._findContainedScene(node.parent);
                }
            } else {
                return null;
            }
        }
    }]);

    return MeshRenderer;
}(_Component3.default);

exports.default = MeshRenderer;

MeshRenderer.attributes = {
    /**
     * 描画に用いる形状データ
     */
    geometry: {
        converter: "Geometry",
        default: "quad"
    },
    /**
     * 描画に用いるインデックスバッファ名
     */
    targetBuffer: {
        converter: "String",
        default: "default"
    },
    /**
     * このメッシュが属するレイヤー
     *
     * 詳しくは`render-scene`ノードを参考にしてください。
     */
    layer: {
        converter: "String",
        default: "default"
    },
    /**
     * 描画するインデックスの個数
     *
     * デフォルトの状態でジオメトリの全インデックスを描画する
     */
    drawCount: {
        converter: "Number",
        default: Number.MAX_VALUE
    },
    /**
     * 描画するジオメトリのインデックスのオフセット
     */
    drawOffset: {
        converter: "Number",
        default: 0
    }
};

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Vector = __webpack_require__(10);

var _Vector2 = _interopRequireDefault(_Vector);

var _Quaternion = __webpack_require__(98);

var _Quaternion2 = _interopRequireDefault(_Quaternion);

var _Matrix = __webpack_require__(9);

var _Matrix2 = _interopRequireDefault(_Matrix);

var _TransformComponent = __webpack_require__(3);

var _TransformComponent2 = _interopRequireDefault(_TransformComponent);

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MouseCameraControlComponent = function (_Component) {
    _inherits(MouseCameraControlComponent, _Component);

    function MouseCameraControlComponent() {
        _classCallCheck(this, MouseCameraControlComponent);

        var _this = _possibleConstructorReturn(this, (MouseCameraControlComponent.__proto__ || Object.getPrototypeOf(MouseCameraControlComponent)).apply(this, arguments));

        _this._updated = false;
        _this._lastCenter = null;
        _this._lastScreenPos = null;
        _this._xsum = 0;
        _this._ysum = 0;
        _this._d = _Vector2.default.Zero;
        return _this;
    }

    _createClass(MouseCameraControlComponent, [{
        key: "$awake",
        value: function $awake() {
            this.__bindAttributes();
            this._listeners = {
                mousemove: this._mouseMove.bind(this),
                contextmenu: this._contextMenu.bind(this),
                wheel: this._mouseWheel.bind(this)
            };
        }
    }, {
        key: "$mount",
        value: function $mount() {
            this._transform = this.node.getComponent(_TransformComponent2.default);
            var canvasElement = this.companion.get("canvasElement");
            canvasElement.addEventListener("mousemove", this._listeners.mousemove);
            canvasElement.addEventListener("contextmenu", this._listeners.contextmenu);
            canvasElement.addEventListener("wheel", this._listeners.wheel);
            this._lastScreenPos = null;
            this._xsum = 0;
            this._ysum = 0;
        }
    }, {
        key: "$unmount",
        value: function $unmount() {
            var canvasElement = this.companion.get("canvasElement");
            canvasElement.removeEventListener("mousemove", this._listeners.mousemove);
            canvasElement.removeEventListener("contextmenu", this._listeners.contextmenu);
            canvasElement.removeEventListener("wheel", this._listeners.wheel);
        }
    }, {
        key: "$initialized",
        value: function $initialized() {
            var look = _Vector2.default.normalize(this.center.subtractWith(this._transform.position));
            var g = _Quaternion2.default.fromToRotation(this._transform.forward, look).normalize();
            this._transform.rotation = g;
            this._initialRotation = g;
            this._initialDirection = _Vector2.default.copy(this._transform.forward.negateThis()).normalized;
            if (this.distance !== null) {
                this._transform.position = this.center.addWith(this._initialDirection.multiplyWith(this.distance));
            } else {
                this.distance = this._transform.position.subtractWith(this.center).magnitude;
            }
        }
    }, {
        key: "$update",
        value: function $update() {
            if (this.isActive && this._updated || !this._lastCenter || !this.center.equalWith(this._lastCenter)) {
                this._updated = false;
                this._lastCenter = this.center;
                // rotate excution
                var rotationVartical = _Quaternion2.default.angleAxis(-this._xsum * this.rotateSpeed * 0.01, _Vector2.default.YUnit);
                var rotationHorizontal = _Quaternion2.default.angleAxis(-this._ysum * this.rotateSpeed * 0.01, _Vector2.default.XUnit);
                var rotation = _Quaternion2.default.multiply(rotationVartical, rotationHorizontal);
                var rotationMat = _Matrix2.default.rotationQuaternion(rotation);
                var direction = _Matrix2.default.transformNormal(rotationMat, this._initialDirection);
                this._transform.position = this.center.addWith(this._d).addWith(_Vector2.default.normalize(direction).multiplyWith(this.distance));
                this._transform.rotation = rotation;
                this._transform.rotation = _Quaternion2.default.multiply(rotation, this._initialRotation);
            }
        }
    }, {
        key: "_contextMenu",
        value: function _contextMenu(m) {
            if (!this.isActive) {
                return;
            }
            m.preventDefault();
        }
    }, {
        key: "_mouseMove",
        value: function _mouseMove(m) {
            if (!this.isActive) {
                return;
            }
            if (this._lastScreenPos === null) {
                this._lastScreenPos = {
                    x: m.screenX,
                    y: m.screenY
                };
                return;
            }
            var diffX = m.screenX - this._lastScreenPos.x;
            var diffY = m.screenY - this._lastScreenPos.y;
            if (this._checkButtonPress(m, true)) {
                this._xsum += diffX;
                this._ysum += diffY;
                this._ysum = Math.min(Math.PI * 50, this._ysum);
                this._ysum = Math.max(-Math.PI * 50, this._ysum);
                this._updated = true;
            }
            if (this._checkButtonPress(m, false)) {
                var moveX = -diffX * this.moveSpeed * 0.01;
                var moveY = diffY * this.moveSpeed * 0.01;
                this._d = this._d.addWith(this._transform.right.multiplyWith(moveX)).addWith(this._transform.up.multiplyWith(moveY));
                this._updated = true;
            }
            this._lastScreenPos = {
                x: m.screenX,
                y: m.screenY
            };
        }
    }, {
        key: "_checkButtonPress",
        value: function _checkButtonPress(m, isRight) {
            if ("buttons" in m) {
                if (isRight) {
                    return (m.buttons & 1) > 0;
                } else {
                    return (m.buttons & 2) > 0;
                }
            } else {
                if (isRight) {
                    return m.which === 1;
                } else {
                    return m.which === 3;
                }
            }
        }
    }, {
        key: "_mouseWheel",
        value: function _mouseWheel(m) {
            if (!this.isActive) {
                return;
            }
            var dir = _Vector2.default.subtract(this._transform.position, this.center).normalized;
            var moveDist = m.deltaY * this.zoomSpeed * 0.05;
            this.distance = Math.max(1, this.distance + moveDist);
            this._transform.position = this.center.addWith(dir.multiplyWith(this.distance));
            if (this.getAttribute("preventScroll")) {
                m.preventDefault();
            }
        }
    }]);

    return MouseCameraControlComponent;
}(_Component3.default);

exports.default = MouseCameraControlComponent;

MouseCameraControlComponent.attributes = {
    rotateSpeed: {
        default: 1,
        converter: "Number"
    },
    zoomSpeed: {
        default: 1,
        converter: "Number"
    },
    moveSpeed: {
        default: 1,
        converter: "Number"
    },
    center: {
        default: "0,0,0",
        converter: "Position",
        lazy: true
    },
    distance: {
        default: null,
        converter: "Number"
    },
    preventScroll: {
        default: true,
        converter: "Boolean"
    }
};

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _RenderBuffer = __webpack_require__(19);

var _RenderBuffer2 = _interopRequireDefault(_RenderBuffer);

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

var _TextureSizeCalculator = __webpack_require__(5);

var _TextureSizeCalculator2 = _interopRequireDefault(_TextureSizeCalculator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RenderBufferComponent = function (_Component) {
    _inherits(RenderBufferComponent, _Component);

    function RenderBufferComponent() {
        _classCallCheck(this, RenderBufferComponent);

        return _possibleConstructorReturn(this, (RenderBufferComponent.__proto__ || Object.getPrototypeOf(RenderBufferComponent)).apply(this, arguments));
    }

    _createClass(RenderBufferComponent, [{
        key: "$mount",
        value: function $mount() {
            this.buffer = new _RenderBuffer2.default(this.companion.get("gl"));
        }
    }, {
        key: "$unmount",
        value: function $unmount() {
            this.buffer.destroy();
            this.buffer = null;
        }
    }, {
        key: "$resizeBuffer",
        value: function $resizeBuffer(arg) {
            var name = this.getAttribute("name");
            if (!name) {
                throw new Error("Attribute 'name' must be specified.");
            }
            var newSize = _TextureSizeCalculator2.default.getPow2Size(arg.width, arg.height);
            this.buffer.update(WebGLRenderingContext.DEPTH_COMPONENT16, newSize.width, newSize.height);
            arg.bufferSizes[name] = { width: newSize.width, height: newSize.height };
            arg.buffers[name] = this.buffer;
        }
    }]);

    return RenderBufferComponent;
}(_Component3.default);

exports.default = RenderBufferComponent;

RenderBufferComponent.attributes = {
    name: {
        converter: "String",
        default: null
    }
};

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _MeshIndexCalculator = __webpack_require__(27);

var _MeshIndexCalculator2 = _interopRequireDefault(_MeshIndexCalculator);

var _FrameBuffer = __webpack_require__(18);

var _FrameBuffer2 = _interopRequireDefault(_FrameBuffer);

var _Texture2D = __webpack_require__(1);

var _Texture2D2 = _interopRequireDefault(_Texture2D);

var _RenderBuffer = __webpack_require__(19);

var _RenderBuffer2 = _interopRequireDefault(_RenderBuffer);

var _TextureSizeCalculator = __webpack_require__(5);

var _TextureSizeCalculator2 = _interopRequireDefault(_TextureSizeCalculator);

var _RenderSceneComponent = __webpack_require__(14);

var _RenderSceneComponent2 = _interopRequireDefault(_RenderSceneComponent);

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RenderHitareaComponent = function (_Component) {
    _inherits(RenderHitareaComponent, _Component);

    function RenderHitareaComponent() {
        _classCallCheck(this, RenderHitareaComponent);

        var _this = _possibleConstructorReturn(this, (RenderHitareaComponent.__proto__ || Object.getPrototypeOf(RenderHitareaComponent)).apply(this, arguments));

        _this._readCache = new Uint8Array(4);
        return _this;
    }

    _createClass(RenderHitareaComponent, [{
        key: "$mount",
        value: function $mount() {
            this._sceneRenderer = this.node.getComponent(_RenderSceneComponent2.default);
            if (!this._sceneRenderer) {
                throw new Error("The node attaching RenderHitArea should contain RenderScene.");
            }
            this._gl = this.companion.get("gl");
            this._canvas = this.companion.get("canvasElement");
            this.hitareaTexture = new _Texture2D2.default(this._gl);
            this.hitareaRenderbuffer = new _RenderBuffer2.default(this._gl);
            if (this.hitareaFBO) {
                this.hitareaFBO.destroy();
                this.hitareaFBO = null;
            }
        }
    }, {
        key: "$resizeBuffer",
        value: function $resizeBuffer(args) {
            var size = _TextureSizeCalculator2.default.getPow2Size(args.width, args.height);
            this._bufferSize = [size.width, size.height];
            this.hitareaTexture.update(0, size.width, size.height, 0, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE);
            this.hitareaRenderbuffer.update(WebGLRenderingContext.DEPTH_COMPONENT16, size.width, size.height);
            if (!this.hitareaFBO) {
                this.hitareaFBO = new _FrameBuffer2.default(this._gl);
                this.hitareaFBO.update(this.hitareaTexture);
                this.hitareaFBO.update(this.hitareaRenderbuffer);
            }
        }
    }, {
        key: "$render",
        value: function $render(args) {
            if (!this._mouseInside) {
                return;
            }
            this.hitareaFBO.bind();
            this._gl.viewport(0, 0, this._bufferSize[0], this._bufferSize[1]);
            // clear buffer if needed
            this._gl.clearColor(0, 0, 0, 0);
            this._gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT);
            this._gl.clearDepth(1);
            this._gl.clear(WebGLRenderingContext.DEPTH_BUFFER_BIT);
            var camera = this._sceneRenderer.camera || args.camera;
            camera.renderScene({
                renderer: this._sceneRenderer,
                camera: camera,
                buffers: args.buffers,
                layer: this._sceneRenderer.layer,
                viewport: args.viewport,
                timer: args.timer,
                technique: "hitarea",
                sceneDescription: {}
            });
            this._gl.flush();
            this._gl.readPixels(this._lastPosition[0] * this._bufferSize[0], this._lastPosition[1] * this._bufferSize[1], 1, 1, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE, this._readCache);
            var index = _MeshIndexCalculator2.default.fromColor(this._readCache);
            if (index === 0) {
                if (this._lastRenderable instanceof _Component3.default) {
                    this._lastRenderable.node.emit("mouseleave", this._lastRenderable);
                }
                this._lastRenderable = null;
            } else {
                var r = camera.containedScene.queueRegistory.getByIndex(index - 1);
                if (this._lastRenderable !== r) {
                    if (this._lastRenderable instanceof _Component3.default) {
                        this._lastRenderable.node.emit("mouseleave", this._lastRenderable);
                    }
                    if (r instanceof _Component3.default) {
                        r.node.emit("mouseenter", r);
                    }
                } else {
                    if (r instanceof _Component3.default) {
                        if (this._mouseMoved) {
                            r.node.emit("mousemove", r);
                        } else {
                            r.node.emit("mouseon", r);
                        }
                    }
                }
                this._lastRenderable = r;
            }
            this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, null);
        }
    }, {
        key: "$mousemove",
        value: function $mousemove(v) {
            this._lastPosition = [v.viewportNormalizedX, 1.0 - v.viewportNormalizedY];
            this._mouseMoved = true;
        }
    }, {
        key: "$mouseenter",
        value: function $mouseenter(v) {
            this._mouseInside = true;
            this._lastPosition = [v.viewportNormalizedX, 1.0 - v.viewportNormalizedY];
            this._mouseMoved = true;
        }
    }, {
        key: "$mouseleave",
        value: function $mouseleave(v) {
            this._mouseInside = false;
            this._lastPosition = [v.viewportNormalizedX, 1.0 - v.viewportNormalizedY];
            this._mouseMoved = true;
            if (this._lastRenderable instanceof _Component3.default) {
                this._lastRenderable.node.emit("mouseleave", this._lastRenderable);
            }
            this._lastRenderable = null;
        }
    }]);

    return RenderHitareaComponent;
}(_Component3.default);

exports.default = RenderHitareaComponent;

RenderHitareaComponent.attributes = {};

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _MaterialContainerComponent = __webpack_require__(13);

var _MaterialContainerComponent2 = _interopRequireDefault(_MaterialContainerComponent);

var _FrameBuffer = __webpack_require__(18);

var _FrameBuffer2 = _interopRequireDefault(_FrameBuffer);

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

var RenderQuadComponent = function (_Component) {
    _inherits(RenderQuadComponent, _Component);

    function RenderQuadComponent() {
        _classCallCheck(this, RenderQuadComponent);

        return _possibleConstructorReturn(this, (RenderQuadComponent.__proto__ || Object.getPrototypeOf(RenderQuadComponent)).apply(this, arguments));
    }

    _createClass(RenderQuadComponent, [{
        key: "$awake",
        value: function $awake() {
            this.getAttributeRaw("targetBuffer").boundTo("_targetBuffer");
            this.getAttributeRaw("clearColor").boundTo("_clearColor");
            this.getAttributeRaw("clearColorEnabled").boundTo("_clearColorEnabled");
            this.getAttributeRaw("clearDepthEnabled").boundTo("_clearDepthEnabled");
            this.getAttributeRaw("clearDepth").boundTo("_clearDepth");
            this.getAttributeRaw("technique").boundTo("_technique");
        }
    }, {
        key: "$mount",
        value: function $mount() {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                var gr;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this._gl = this.companion.get("gl");
                                this._canvas = this.companion.get("canvasElement");
                                this._materialContainer = this.node.getComponent(_MaterialContainerComponent2.default);
                                gr = this.companion.get("GeometryRegistory");
                                _context.next = 6;
                                return gr.getGeometry("quad");

                            case 6:
                                this._geom = _context.sent;

                            case 7:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }, {
        key: "$bufferUpdated",
        value: function $bufferUpdated(args) {
            var out = this.getAttribute("out");
            if (out !== "default") {
                this._fbo = new _FrameBuffer2.default(this.companion.get("gl"));
                this._fbo.update(args.buffers[out]);
                this._fboSize = args.bufferSizes[out];
            }
            var depthBuffer = this.getAttribute("depthBuffer");
            if (depthBuffer && this._fbo) {
                this._fbo.update(args.buffers[depthBuffer]);
            }
        }
    }, {
        key: "$render",
        value: function $render(args) {
            if (!this._materialContainer.materialReady || !this._geom) {
                return;
            }
            // bound render target
            if (this._fbo) {
                this._fbo.bind();
                this._gl.viewport(0, 0, this._fboSize.width, this._fboSize.height);
            } else {
                this._gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, null);
                this._gl.viewport(args.viewport.Left, this._canvas.height - args.viewport.Bottom, args.viewport.Width, args.viewport.Height);
            }
            // clear buffer if needed
            if (this._fbo && this._clearColorEnabled) {
                this._gl.clearColor(this._clearColor.R, this._clearColor.G, this._clearColor.B, this._clearColor.A);
                this._gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT);
            }
            if (this._clearDepthEnabled) {
                this._gl.clearDepth(this._clearDepth);
                this._gl.clear(WebGLRenderingContext.DEPTH_BUFFER_BIT);
            }
            // make rendering argument
            var renderArgs = {
                targetBuffer: this._targetBuffer,
                geometry: this._geom,
                attributeValues: {},
                camera: null,
                transform: null,
                buffers: args.buffers,
                viewport: args.viewport,
                technique: this._technique
            };
            renderArgs.attributeValues = this._materialContainer.materialArgs;
            // do render
            this._materialContainer.material.draw(renderArgs);
            this._gl.flush();
        }
    }]);

    return RenderQuadComponent;
}(_Component3.default);

exports.default = RenderQuadComponent;

RenderQuadComponent.attributes = {
    out: {
        default: "default",
        converter: "String"
    },
    depthBuffer: {
        default: null,
        converter: "String"
    },
    targetBuffer: {
        default: "default",
        converter: "String"
    },
    clearColor: {
        default: "#0000",
        converter: "Color4"
    },
    clearColorEnabled: {
        default: true,
        converter: "Boolean"
    },
    clearDepthEnabled: {
        default: true,
        converter: "Boolean"
    },
    clearDepth: {
        default: 1.0,
        converter: "Number"
    },
    technique: {
        default: "default",
        converter: "String"
    }
};

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

var _TextureSizeCalculator = __webpack_require__(5);

var _TextureSizeCalculator2 = _interopRequireDefault(_TextureSizeCalculator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RendererComponent = function (_Component) {
    _inherits(RendererComponent, _Component);

    function RendererComponent() {
        _classCallCheck(this, RendererComponent);

        var _this = _possibleConstructorReturn(this, (RendererComponent.__proto__ || Object.getPrototypeOf(RendererComponent)).apply(this, arguments));

        _this._buffers = {};
        _this._bufferSizes = {};
        _this._wasInside = false;
        return _this;
    }

    _createClass(RendererComponent, [{
        key: "$awake",
        value: function $awake() {
            var _this2 = this;

            // initializing attributes
            this.getAttributeRaw("camera").boundTo("camera");
            this.getAttributeRaw("viewport").watch(function (v) {
                _this2._viewportSizeGenerator = v;
                _this2.$resizeCanvas();
            });
            this._viewportSizeGenerator = this.getAttribute("viewport");
            // initializing mouse handlers
            this._mouseMoveHandler = function (e) {
                if (_this2._isViewportInside(e)) {
                    if (!_this2._wasInside) {
                        _this2.node.emit("mouseenter");
                        _this2.node.broadcastMessage("mouseenter", _this2._toViewportMouseArgs(e));
                    }
                    _this2.node.emit("mousemove");
                    _this2.node.broadcastMessage("mousemove", _this2._toViewportMouseArgs(e));
                    _this2._wasInside = true; // Mark as last pointer was inside of viewport
                } else {
                    if (_this2._wasInside) {
                        _this2.node.emit("mouseleave");
                        _this2.node.broadcastMessage("mouseleave", _this2._toViewportMouseArgs(e));
                    }
                    _this2._wasInside = false; // Mark as last pointer was not inside of viewport
                }
            };
            this._mouseEnterHandler = function (e) {
                if (_this2._isViewportInside(e)) {
                    _this2.node.emit("mouseenter");
                    _this2.node.broadcastMessage("mouseenter", _this2._toViewportMouseArgs(e));
                    _this2._wasInside = true;
                }
            };
            this._mouseLeaveHandler = function (e) {
                if (_this2._wasInside) {
                    _this2.node.emit("mouseleave");
                    _this2.node.broadcastMessage("mouseleave", _this2._toViewportMouseArgs(e));
                }
                _this2._wasInside = false;
            };
        }
    }, {
        key: "$mount",
        value: function $mount() {
            var _this3 = this;

            this._gl = this.companion.get("gl");
            this._canvas = this.companion.get("canvasElement");
            this.getAttributeRaw("handleMouse").watch(function (a) {
                if (a) {
                    _this3._enableMouseHandling();
                } else {
                    _this3._disableMouseHandling();
                }
            }, true);
        }
    }, {
        key: "$treeInitialized",
        value: function $treeInitialized() {
            // This should be called after mounting all of tree nodes in children
            this.$resizeCanvas();
        }
    }, {
        key: "$resizeCanvas",
        value: function $resizeCanvas() {
            this._viewportCache = this._viewportSizeGenerator(this._canvas);
            if (this.node.children.length === 0) {
                this.node.addChildByName("render-scene", {});
            }
            var pow2Size = _TextureSizeCalculator2.default.getPow2Size(this._viewportCache.Width, this._viewportCache.Height);
            this.node.broadcastMessage("resizeBuffer", {
                width: this._viewportCache.Width,
                height: this._viewportCache.Height,
                pow2Width: pow2Size.width,
                pow2Height: pow2Size.height,
                buffers: this._buffers,
                bufferSizes: this._bufferSizes
            });
            this.node.broadcastMessage("bufferUpdated", {
                buffers: this._buffers,
                bufferSizes: this._bufferSizes
            });
        }
    }, {
        key: "$renderViewport",
        value: function $renderViewport(args) {
            this.node.broadcastMessage("render", {
                camera: this.camera,
                viewport: this._viewportCache,
                bufferSizes: this._bufferSizes,
                buffers: this._buffers,
                timer: args.timer
            });
        }
    }, {
        key: "_enableMouseHandling",
        value: function _enableMouseHandling() {
            this._canvas.addEventListener("mousemove", this._mouseMoveHandler);
            this._canvas.addEventListener("mouseleave", this._mouseLeaveHandler);
            this._canvas.addEventListener("mouseenter", this._mouseEnterHandler);
        }
    }, {
        key: "_disableMouseHandling",
        value: function _disableMouseHandling() {
            this._canvas.removeEventListener("mousemove", this._mouseMoveHandler);
            this._canvas.removeEventListener("mouseleave", this._mouseLeaveHandler);
            this._canvas.removeEventListener("mouseenter", this._mouseEnterHandler);
        }
        /**
         * Check mouse is inside of viewport
         * @param  {MouseEvent} e [description]
         * @return {boolean}      [description]
         */

    }, {
        key: "_isViewportInside",
        value: function _isViewportInside(e) {
            var rc = this._getRelativePosition(e);
            var n = this._viewportCache.toLocalNormalized(rc[0], rc[1]);
            return n[0] >= 0 && n[0] <= 1 && n[1] >= 0 && n[1] <= 1;
        }
        /**
         * Obtain mouse point of relative coordinate from element.
         * @param  {MouseEvent} e [description]
         * @return {number[]}     [description]
         */

    }, {
        key: "_getRelativePosition",
        value: function _getRelativePosition(e) {
            var rect = this._canvas.getBoundingClientRect();
            var positionX = rect.left + window.pageXOffset;
            var positionY = rect.top + window.pageYOffset;
            return [e.pageX - positionX, e.pageY - positionY];
        }
        /**
         * Convert mouse args into viewport mouse event
         * @param  {MouseEvent}         e [description]
         * @return {ViewportMouseEvent}   [description]
         */

    }, {
        key: "_toViewportMouseArgs",
        value: function _toViewportMouseArgs(e) {
            var ro = this._getRelativePosition(e);
            var r = this._viewportCache.toLocal(ro[0], ro[1]);
            var n = this._viewportCache.toLocalNormalized(ro[0], ro[1]);
            return Object.assign(e, {
                viewportX: r[0],
                viewportY: r[1],
                viewportNormalizedX: n[0],
                viewportNormalizedY: n[1]
            });
        }
    }]);

    return RendererComponent;
}(_Component3.default);

exports.default = RendererComponent;

RendererComponent.attributes = {
    camera: {
        converter: "Component",
        default: "camera",
        target: "Camera"
    },
    viewport: {
        converter: "Viewport",
        default: "auto"
    },
    handleMouse: {
        converter: "Boolean",
        default: true
    }
};

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Color = __webpack_require__(97);

var _Color2 = _interopRequireDefault(_Color);

var _LoopManagerComponent = __webpack_require__(12);

var _LoopManagerComponent2 = _interopRequireDefault(_LoopManagerComponent);

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 全レンダラーを管理するためのコンポーネント
 */
var RendererManagerComponent = function (_Component) {
    _inherits(RendererManagerComponent, _Component);

    function RendererManagerComponent() {
        _classCallCheck(this, RendererManagerComponent);

        return _possibleConstructorReturn(this, (RendererManagerComponent.__proto__ || Object.getPrototypeOf(RendererManagerComponent)).apply(this, arguments));
    }

    _createClass(RendererManagerComponent, [{
        key: "$awake",
        value: function $awake() {
            this.getAttributeRaw("bgColor").boundTo("_bgColor");
            this.getAttributeRaw("clearDepth").boundTo("_clearDepth");
        }
    }, {
        key: "$mount",
        value: function $mount() {
            this.gl = this.companion.get("gl");
        }
    }, {
        key: "$treeInitialized",
        value: function $treeInitialized() {
            this.node.getComponent(_LoopManagerComponent2.default).register(this.onloop.bind(this), 1000);
            if (this.getAttribute("complementRenderer") && this.node.getChildrenByNodeName("renderer").length === 0) {
                this.node.addChildByName("renderer", {});
            }
        }
    }, {
        key: "onloop",
        value: function onloop(timer) {
            if (this.enabled) {
                var c = this._bgColor;
                this.gl.clearColor(c.R, c.G, c.B, c.A);
                this.gl.clearDepth(this._clearDepth);
                this.gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT | WebGLRenderingContext.DEPTH_BUFFER_BIT);
                this.node.broadcastMessage(1, "renderViewport", {
                    timer: timer
                });
            }
        }
    }]);

    return RendererManagerComponent;
}(_Component3.default);

exports.default = RendererManagerComponent;

RendererManagerComponent.attributes = {
    /**
     * キャンバスの初期化色
     */
    bgColor: {
        default: new _Color2.default(0, 0, 0, 0),
        converter: "Color4"
    },
    /**
     * キャンバスの初期化深度値
     */
    clearDepth: {
        default: 1.0,
        converter: "Number"
    },
    /**
     * goml内にrendererが一つもなかった場合に自動的に補完するかどうか
     */
    complementRenderer: {
        default: true,
        converter: "Boolean"
    }
};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Texture2D = __webpack_require__(1);

var _Texture2D2 = _interopRequireDefault(_Texture2D);

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

var _TextureSizeCalculator = __webpack_require__(5);

var _TextureSizeCalculator2 = _interopRequireDefault(_TextureSizeCalculator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TextureBufferComponent = function (_Component) {
    _inherits(TextureBufferComponent, _Component);

    function TextureBufferComponent() {
        _classCallCheck(this, TextureBufferComponent);

        return _possibleConstructorReturn(this, (TextureBufferComponent.__proto__ || Object.getPrototypeOf(TextureBufferComponent)).apply(this, arguments));
    }

    _createClass(TextureBufferComponent, [{
        key: "$mount",
        value: function $mount() {
            this.buffer = new _Texture2D2.default(this.companion.get("gl"));
        }
    }, {
        key: "$unmount",
        value: function $unmount() {
            this.buffer.destroy();
            this.buffer = null;
        }
    }, {
        key: "$resizeBuffer",
        value: function $resizeBuffer(arg) {
            var bufferName = this.getAttribute("name");
            if (!bufferName) {
                throw new Error("Attribute 'name' must be specified.");
            }
            var format = this.getAttribute("format");
            var type = this.getAttribute("type");
            var newSize = _TextureSizeCalculator2.default.getPow2Size(arg.width, arg.height);
            this.buffer.update(0, newSize.width, newSize.height, 0, format, type, null);
            arg.bufferSizes[bufferName] = { width: newSize.width, height: newSize.height };
            arg.buffers[bufferName] = this.buffer;
        }
    }]);

    return TextureBufferComponent;
}(_Component3.default);

exports.default = TextureBufferComponent;

TextureBufferComponent.attributes = {
    name: {
        converter: "String",
        default: null
    },
    format: {
        converter: "Enum",
        default: WebGLRenderingContext.RGBA,
        table: {
            RGBA: WebGLRenderingContext.RGBA,
            RGB: WebGLRenderingContext.RGB,
            ALPHA: WebGLRenderingContext.ALPHA,
            LUMINANCE: WebGLRenderingContext.LUMINANCE,
            LUMINANCE_ALPHA: WebGLRenderingContext.LUMINANCE_ALPHA,
            SRGB_EXT: WebGLRenderingContext["SRGB_EXT"],
            SRGB_ALPHA_EXT: WebGLRenderingContext["SRGB_ALPHA_EXT"],
            DEPTH_COMPONENT: WebGLRenderingContext["DEPTH_COMPONENT"],
            DEPTH_STENCIL: WebGLRenderingContext["DEPTH_STENCIL"]
        }
    },
    type: {
        converter: "Enum",
        default: WebGLRenderingContext.UNSIGNED_BYTE,
        table: {
            UNSIGNED_BYTE: WebGLRenderingContext.UNSIGNED_BYTE,
            UNSIGNED_SHORT_5_6_5: WebGLRenderingContext.UNSIGNED_SHORT_5_6_5,
            UNSIGNED_SHORT_4_4_4_4: WebGLRenderingContext.UNSIGNED_SHORT_4_4_4_4,
            UNSIGNED_SHORT_5_5_5_1: WebGLRenderingContext.UNSIGNED_SHORT_5_5_5_1,
            UNSIGNED_SHORT: WebGLRenderingContext.UNSIGNED_SHORT,
            UNSIGNED_INT: WebGLRenderingContext.UNSIGNED_INT,
            FLOAT: WebGLRenderingContext.FLOAT
        }
    }
};

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TimeComponent = function (_Component) {
    _inherits(TimeComponent, _Component);

    function TimeComponent() {
        _classCallCheck(this, TimeComponent);

        var _this = _possibleConstructorReturn(this, (TimeComponent.__proto__ || Object.getPrototypeOf(TimeComponent)).apply(this, arguments));

        _this._time = 0;
        _this._startTime = 0;
        _this._lastFrame = 0;
        return _this;
    }

    _createClass(TimeComponent, [{
        key: "$awake",
        value: function $awake() {
            this._time = 0;
            this._lastFrame = 0;
            this._startTime = Date.now();
        }
    }, {
        key: "$update",
        value: function $update() {
            var now = Date.now();
            var total = now - this._startTime;
            this.setAttribute("time", total);
            this.setAttribute("deltaTime", now - this._lastFrame);
            this._lastFrame = now;
        }
    }]);

    return TimeComponent;
}(_Component3.default);

exports.default = TimeComponent;

TimeComponent.attributes = {
    time: {
        default: 0,
        converter: "Number"
    },
    deltaTime: {
        default: 0,
        converter: "Number"
    }
};

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = __webpack_require__(0);

var _Component3 = _interopRequireDefault(_Component2);

var _TextureComponent = __webpack_require__(6);

var _TextureComponent2 = _interopRequireDefault(_TextureComponent);

var _VideoResolver = __webpack_require__(32);

var _VideoResolver2 = _interopRequireDefault(_VideoResolver);

var _LoopManagerComponent = __webpack_require__(12);

var _LoopManagerComponent2 = _interopRequireDefault(_LoopManagerComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

var VideoTextureComponent = function (_Component) {
    _inherits(VideoTextureComponent, _Component);

    function VideoTextureComponent() {
        _classCallCheck(this, VideoTextureComponent);

        return _possibleConstructorReturn(this, (VideoTextureComponent.__proto__ || Object.getPrototypeOf(VideoTextureComponent)).apply(this, arguments));
    }

    _createClass(VideoTextureComponent, [{
        key: "$mount",
        value: function $mount() {
            var _this2 = this;

            this.__bindAttributes();
            this._textureComponent = this.node.getComponent(_TextureComponent2.default);
            this._loopManager = this.tree("goml").single().getComponent(_LoopManagerComponent2.default);
            this.getAttributeRaw("src").watch(function (v) {
                if (v !== null) {
                    _this2._loadTask(v);
                }
            }, true);
            this.getAttributeRaw("currentTime").watch(function (v) {
                if (_this2.video && _this2.video.currentTime !== _this2.currentTime) {
                    _this2._syncVideoPref();
                }
            });
            this.getAttributeRaw("muted").watch(function () {
                if (_this2.video) {
                    _this2._syncVideoPref();
                }
            });
            this.getAttributeRaw("playbackRate").watch(function () {
                if (_this2.video) {
                    _this2._syncVideoPref();
                }
            });
            this.getAttributeRaw("loop").watch(function () {
                if (_this2.video) {
                    _this2._syncVideoPref();
                }
            });
            this._loopManager.register(function (index) {
                _this2._update();
            }, 100);
        }
    }, {
        key: "_update",
        value: function _update() {
            if (!this.video) {
                return;
            }
            if (this.currentTime !== this.video.currentTime) {
                this.currentTime = this.video.currentTime;
            }
            if (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {
                this._textureComponent.texture.update(this.video, {
                    premultipliedAlpha: this.premultipliedAlpha,
                    flipY: this.flipY
                });
            }
        }
    }, {
        key: "_loadTask",
        value: function _loadTask(src) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return _VideoResolver2.default.resolve(src);

                            case 2:
                                this.video = _context.sent;

                                this.video.play();
                                this._syncVideoPref();
                                this._update();

                            case 6:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }, {
        key: "_syncVideoPref",
        value: function _syncVideoPref() {
            this.video.playbackRate = this.playbackRate;
            this.video.muted = this.muted;
            this.video.loop = this.loop;
            this.video.currentTime = this.currentTime;
        }
    }]);

    return VideoTextureComponent;
}(_Component3.default);

exports.default = VideoTextureComponent;

VideoTextureComponent.attributes = {
    src: {
        converter: "String",
        default: null
    },
    flipY: {
        converter: "Boolean",
        default: false
    },
    premultipliedAlpha: {
        converter: "Boolean",
        default: false
    },
    currentTime: {
        converter: "Number",
        default: 0
    },
    muted: {
        converter: "Boolean",
        default: true
    },
    playbackRate: {
        converter: "Number",
        default: 1
    },
    loop: {
        converter: "Boolean",
        default: true
    }
};

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = CanvasSizeConverter;
/**
 * キャンバスのサイズ用のコンバーター
 * 数値を指定した場合(`100`など)はその値をそのまま返す。
 * `aspect(1.6)`などと記述する時、キャンバスのアスペクト比を1.6にするようにリサイズする。
 * `fit`と指定した時、親要素にちょうどマッチするサイズを返す。
 * もし、親要素の高さが0である時かつ、親がbodyである際で`fit`が指定されていると、bodyへの高さ属性が指定されていないものと判断して、
 * 自動的にbodyに`height:100%`を割り当てる。
 */
function CanvasSizeConverter(val) {
    if (val === "fit") {
        return {
            mode: "fit"
        };
    }
    if (typeof val === "string") {
        var matched = /aspect\(([\d+(?.\d*)?]+)\)/.exec(val);
        if (matched) {
            return {
                mode: "aspect",
                aspect: Number.parseFloat(matched[1])
            };
        }
    }
    return {
        mode: "manual",
        size: Number.parseFloat(val)
    };
}

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = GeometryConverter;

var _Geometry = __webpack_require__(16);

var _Geometry2 = _interopRequireDefault(_Geometry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * ジオメトリを指定するためのコンバーター
 * `quad`など、ジオメトリ名を指定するか、Geometry型のインスタンスを渡す。
 */
function GeometryConverter(val, attr) {
    if (typeof val === "string") {
        var registory = attr.companion.get("GeometryRegistory");
        return registory.getGeometry(val);
    } else if (val instanceof _Geometry2.default) {
        return Promise.resolve(val);
    }
    throw new Error("Specified geometry \"" + val + "\" is not supported for converting into geometry.");
}

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = MaterialConverter;

var _MaterialComponent = __webpack_require__(24);

var _MaterialComponent2 = _interopRequireDefault(_MaterialComponent);

var _Material = __webpack_require__(25);

var _Material2 = _interopRequireDefault(_Material);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * マテリアルを指定するためのコンバーター
 * `<material>へのクエリ`が指定された場合は、そのクエリによって検索された先頭の`<material>`を用いる。
 * `new(マテリアル名)`が指定された場合は、新しいマテリアルのインスタンスを生成して用いる。
 * 通常、マテリアルを指定するコンポーネントはマテリアルによって、そのコンポーネントが所持する属性が置き換わる。
 * `new(マテリアル)`名で指定した場合、そのコンポーネント自身がマテリアルの属性を管理することになるので注意が必要。
 */
function MaterialConverter(val, attr) {
    if (typeof val === "string") {
        var regex = /\s*new\s*\(\s*([a-zA-Z\d\-]+)\s*\)/;
        var regexResult = void 0;
        if (regexResult = regex.exec(val)) {
            attr.component[attr.declaration["componentBoundTo"]] = null;
            return attr.companion.get("MaterialFactory").instanciate(regexResult[1]);
        } else {
            var node = attr.tree(val).first();
            if (node) {
                var mc = node.getComponent(_MaterialComponent2.default);
                attr.component[attr.declaration["componentBoundTo"]] = mc;
                return mc.materialPromise;
            } else {
                console.warn("There was no matching material component filtered by '" + val + "'");
                return null;
            }
        }
    } else if (val instanceof _Material2.default) {
        attr.component[attr.declaration["componentBoundTo"]] = null;
        return Promise.resolve(val);
    }
    return null; // TODO ??
}

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = NodeConverter;

var _GomlNode = __webpack_require__(105);

var _GomlNode2 = _interopRequireDefault(_GomlNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function NodeConverter(val, attr) {
    if (val === null) {
        return null;
    }
    if (val instanceof _GomlNode2.default) {
        return val;
    } else if (typeof val === "string") {
        return attr.component.node.tree(val).first();
    }
}

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Attribute = __webpack_require__(104);

var _Attribute2 = _interopRequireDefault(_Attribute);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _lastVal = void 0;
var _node = void 0;
/**
 * 座標を取得するためのコンバーター
 * Vector3コンバーターの受け取り売る値もしくは、任意のシーン中のノードへのクエリを受け取る。
 * クエリを受け取った場合は、そのクエリの示す対象の物体の座標が用いられる。
 */
exports.default = {
    name: "Position",
    lazy: true,
    verify: function verify(attr) {
        return true;
    },
    convert: function convert(val, attr) {
        if (val === null) {
            return null;
        }
        if (attr.convertContext._lastVal === val) {
            return attr.convertContext._node.getAttribute("position");
        } else {
            attr.convertContext._lastVal = null;
            try {
                var vec = _Attribute2.default.convert("Vector3", attr, val);
                if (vec) {
                    return vec;
                }
            } catch (e) {
                ;
            }
            attr.convertContext._node = _Attribute2.default.convert("Node", attr, val);
            if (attr.convertContext._node) {
                attr.convertContext._lastVal = val;
                return attr.convertContext._node.getAttribute("position"); // TODO should not use getAttribute on node
            }
        }
    }
};

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = TextureConverter;

var _TextureComponent = __webpack_require__(6);

var _TextureComponent2 = _interopRequireDefault(_TextureComponent);

var _TextureReference = __webpack_require__(69);

var _TextureReference2 = _interopRequireDefault(_TextureReference);

var _Texture2D = __webpack_require__(1);

var _Texture2D2 = _interopRequireDefault(_Texture2D);

var _ImageResolver = __webpack_require__(22);

var _ImageResolver2 = _interopRequireDefault(_ImageResolver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function updateVideo(tex, video) {
    tex.update(video);
    requestAnimationFrame(function () {
        return updateVideo(tex, video);
    });
}
function _parseQuery(query) {
    var regex = /(query|backbuffer|video)\((.+)\)[^\)]*$/;
    var regexResult = void 0;
    if (regexResult = regex.exec(query)) {
        return {
            type: regexResult[1],
            param: regexResult[2]
        };
    }
    return null;
}
function generateVideoTag(src) {
    var vTag = document.createElement("video");
    vTag.src = src;
    return vTag;
}
function fromVideoTexture(gl, val) {
    var tex = new _Texture2D2.default(gl);
    val.play();
    tex.update(val);
    updateVideo(tex, val);
    return tex;
}
/**
 * テクスチャへの参照を取得するためのコンバーター
 * 渡すものが文字列である場合、4つの方法がある。
 * * `url`・・・指定したアドレスから画像を解決して取得する
 * * `backbuffer(バックバッファ名)`・・・名前付きバックバッファのリストから取得する
 * * `video(ビデオファイルへのURL)`・・・指定したアドレスからビデオを取得してテクスチャとして再生する(deprecated)
 * * `query(<texture>へのクエリ)`・・・指定したクエリで`<texture>`を探索して利用する。
 * 渡すものがオブジェクトである場合、5つの方法がある。
 * * `Texture2D型`・・・そのまま利用される
 * * `HTMLImageElement`・・・必要がある場合リサイズされた上で利用される。(自動的に2の累乗に変換される)
 * * `HTMLCanvasElement`・・・必要がある場合リサイズされた上で利用される。(自動的に2の累乗に変換される)
 * * `HTMLVideoElement`・・・必要がある場合リサイズされた上で、自動的に再生される(自動的に2の累乗に変換される)
 */
function TextureConverter(val, attr) {
    if (val instanceof _Texture2D2.default) {
        return new _TextureReference2.default(val);
    } else if (val instanceof _TextureReference2.default) {
        return val;
    } else if (typeof val === "string") {
        var parseResult = _parseQuery(val);
        if (parseResult) {
            var param = parseResult.param;
            switch (parseResult.type) {
                case "backbuffer":
                    return new _TextureReference2.default(function (buffers) {
                        return buffers[param];
                    });
                case "video":
                    console.warn("The syntax \"video(URL)\" is deprecated after version 0.16.0.\n You should use <video-texture> tag instead.");
                    return new _TextureReference2.default(fromVideoTexture(attr.companion.get("gl"), generateVideoTag(param)));
                case "query":
                    var obtainedTag = attr.tree(param);
                    var texture = obtainedTag.first().getComponent(_TextureComponent2.default);
                    return new _TextureReference2.default(function () {
                        return texture.texture;
                    });
            }
        } else {
            var tex = new _Texture2D2.default(attr.companion.get("gl"));
            _ImageResolver2.default.resolve(val).then(function (t) {
                tex.update(t);
            });
            attr.companion.get("loader").register(tex.validPromise);
            return new _TextureReference2.default(tex);
        }
    }
    if ((typeof val === "undefined" ? "undefined" : _typeof(val)) === "object") {
        if (val instanceof HTMLImageElement) {
            var _tex = new _Texture2D2.default(attr.companion.get("gl"));
            if (val.complete && val.naturalWidth) {
                _tex.update(val);
            } else {
                val.onload = function () {
                    _tex.update(val);
                };
            }
            return new _TextureReference2.default(_tex);
        } else if (val instanceof HTMLCanvasElement) {
            var _tex2 = new _Texture2D2.default(attr.companion.get("gl"));
            _tex2.update(val);
            return new _TextureReference2.default(_tex2);
        } else if (val instanceof HTMLVideoElement) {
            return new _TextureReference2.default(fromVideoTexture(attr.companion.get("gl"), val));
        }
    }
    return null;
}

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = ViewportConverter;

var _Rectangle = __webpack_require__(99);

var _Rectangle2 = _interopRequireDefault(_Rectangle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toPixel(parentSize, rep) {
    var regex = /(\d+)\s*%/;
    var regexResult = void 0;
    if (regexResult = regex.exec(rep)) {
        var percentage = Number.parseFloat(regexResult[1]);
        return Math.floor(parentSize * percentage * 0.01);
    } else {
        return Math.floor(Number.parseFloat(rep));
    }
}
/**
 * ビューポートサイズを設定するためのコンバーター
 * `auto`・・・親のキャンバスのサイズにあったビューポートサイズを返す
 * `左端,上端,幅,高さ`・・・キャンバスのサイズを具体的に指定する。
 * 数値を指定するとピクセル単位になるが、数値に%をつければ親のキャンバス基準での比率指定ができる。
 */
function ViewportConverter(val) {
    if (val instanceof _Rectangle2.default) {
        return function () {
            return val;
        };
    }
    if (typeof val === "string") {
        if (val === "auto") {
            return function (canvas) {
                return new _Rectangle2.default(0, 0, canvas.width, canvas.height);
            };
        } else {
            var sizes = val.split(",");
            if (sizes.length !== 4) {
                throw new Error("Invalid viewport size was specified.");
            } else {
                return function (canvas) {
                    return new _Rectangle2.default(_toPixel(canvas.width, sizes[0]), _toPixel(canvas.height, sizes[1]), _toPixel(canvas.width, sizes[2]), _toPixel(canvas.height, sizes[3]));
                };
            }
        }
    }
    throw new Error(val + " could not be parsed");
}

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Geometry = __webpack_require__(16);

var _Geometry2 = _interopRequireDefault(_Geometry);

var _AABB = __webpack_require__(89);

var _AABB2 = _interopRequireDefault(_AABB);

var _Vector = __webpack_require__(10);

var _Vector2 = _interopRequireDefault(_Vector);

var _GeometryUtility = __webpack_require__(60);

var _GeometryUtility2 = _interopRequireDefault(_GeometryUtility);

var _GeometryFactory = __webpack_require__(17);

var _GeometryFactory2 = _interopRequireDefault(_GeometryFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var unitBox = new _AABB2.default();
unitBox.expand(new _Vector2.default(-1, -1, -1));
unitBox.expand(new _Vector2.default(1, 1, 1));
var primitiveLayout = {
    POSITION: {
        size: 3,
        stride: 32
    },
    NORMAL: {
        size: 3,
        stride: 32,
        offset: 12
    },
    TEXCOORD: {
        size: 2,
        stride: 32,
        offset: 24
    }
};

var DefaultPrimitives = function () {
    function DefaultPrimitives() {
        _classCallCheck(this, DefaultPrimitives);
    }

    _createClass(DefaultPrimitives, null, [{
        key: "register",
        value: function register() {
            DefaultPrimitives._registerQuad();
            DefaultPrimitives._registerCube();
            DefaultPrimitives._registerSphere();
            DefaultPrimitives._registerCircle();
            DefaultPrimitives._registerCylinder();
            DefaultPrimitives._registerCone();
            DefaultPrimitives._registerPlane();
            DefaultPrimitives._registerTriangle();
            DefaultPrimitives._registerCapsule();
        }
    }, {
        key: "_registerQuad",
        value: function _registerQuad() {
            _GeometryFactory2.default.addType("quad", {}, function (gl, attrs) {
                var geometry = new _Geometry2.default(gl);
                geometry.addAttributes(_GeometryUtility2.default.plane([0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], 1, 1), primitiveLayout);
                geometry.addIndex("default", _GeometryUtility2.default.planeIndex(0, 1, 1));
                geometry.addIndex("wireframe", _GeometryUtility2.default.linesFromTriangles(_GeometryUtility2.default.planeIndex(0, 1, 1)), WebGLRenderingContext.LINES);
                return geometry;
            });
        }
    }, {
        key: "_registerTriangle",
        value: function _registerTriangle() {
            _GeometryFactory2.default.addType("triangle", {}, function (gl, attrs) {
                var geometry = new _Geometry2.default(gl);
                geometry.addAttributes(_GeometryUtility2.default.triangle([0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]), primitiveLayout);
                geometry.addIndex("default", _GeometryUtility2.default.triangleIndex(0));
                geometry.addIndex("wireframe", _GeometryUtility2.default.linesFromTriangles(_GeometryUtility2.default.triangleIndex(0)), WebGLRenderingContext.LINES);
                return geometry;
            });
        }
    }, {
        key: "_registerCone",
        value: function _registerCone() {
            _GeometryFactory2.default.addType("cone", {
                divide: {
                    converter: "Number",
                    default: 50
                }
            }, function (gl, attrs) {
                var div = attrs["divide"];
                var geometry = new _Geometry2.default(gl);
                var theta = div % 2 != 0 ? Math.PI / div : 0;
                var vertices = [].concat.apply([], [_GeometryUtility2.default.circle([0, -0.5, 0], [0, -1, 0], [-Math.sin(theta), 0, Math.cos(theta)], [Math.cos(theta), 0, Math.sin(theta)], div)]);
                var g = Math.cos(Math.PI / div) / 3;
                var length = Math.sin(Math.PI / div) / Math.pow(3, 0.5) * 2;
                var radius = Math.cos(Math.PI / div) - g;
                var s = Math.PI / div;
                for (var i = 0; i < div; i++) {
                    var step = s * (i * 2 + 1);
                    Array.prototype.push.apply(vertices, _GeometryUtility2.default.coneTriangle([-Math.sin(step) * radius, 0, -Math.cos(step) * radius], [-Math.cos(Math.PI / 2 - step), 1, -Math.sin(Math.PI / 2 - step)], [Math.sin(step) * radius, 1, Math.cos(step) * radius], [-Math.cos(step) * length, 0, Math.sin(step) * length], div, i));
                }
                geometry.addAttributes(vertices, primitiveLayout);
                var os = div + 2;
                var indices = [].concat.apply([], [_GeometryUtility2.default.circleIndex(0, div)]);
                for (var _i = 0; _i < div; _i++) {
                    Array.prototype.push.apply(indices, _GeometryUtility2.default.triangleIndex(os + _i * 3));
                }
                geometry.addIndex("default", indices);
                geometry.addIndex("wireframe", _GeometryUtility2.default.linesFromTriangles(indices), WebGLRenderingContext.LINES);
                return geometry;
            });
        }
    }, {
        key: "_registerCylinder",
        value: function _registerCylinder() {
            _GeometryFactory2.default.addType("cylinder", {
                divide: {
                    converter: "Number",
                    default: 50
                }
            }, function (gl, attrs) {
                var div = attrs["divide"];
                var geometry = new _Geometry2.default(gl);
                var theta = div % 2 != 0 ? Math.PI / div : 0;
                var vertices = [].concat.apply([], [_GeometryUtility2.default.circle([0, 1, 0], [0, 1, 0], [0, 0, -1], [1, 0, 0], div), _GeometryUtility2.default.circle([0, -1, 0], [0, -1, 0], [-Math.sin(theta), 0, Math.cos(theta)], [Math.cos(theta), 0, Math.sin(theta)], div)]);
                var length = Math.sin(Math.PI / div);
                var radius = Math.cos(Math.PI / div);
                var s = Math.PI / div;
                for (var i = 0; i < div; i++) {
                    var step = s * (i * 2 + 1);
                    Array.prototype.push.apply(vertices, _GeometryUtility2.default.cylinderPlane([-Math.sin(step) * radius, 0, -Math.cos(step) * radius], [-Math.sin(step), 0, -Math.cos(step)], [0, 1, 0], [-Math.cos(step) * length, 0, Math.sin(step) * length], div, i));
                }
                geometry.addAttributes(vertices, primitiveLayout);
                var os = div + 2;
                var indices = [].concat.apply([], [_GeometryUtility2.default.circleIndex(0, div), _GeometryUtility2.default.circleIndex(os, div)]);
                for (var _i2 = 0; _i2 < div; _i2++) {
                    Array.prototype.push.apply(indices, _GeometryUtility2.default.planeIndex(os * 2 + _i2 * 4, 1, 1));
                }
                geometry.addIndex("default", indices);
                geometry.addIndex("wireframe", _GeometryUtility2.default.linesFromTriangles(indices), WebGLRenderingContext.LINES);
                return geometry;
            });
        }
    }, {
        key: "_registerCube",
        value: function _registerCube() {
            _GeometryFactory2.default.addType("cube", {
                divHorizontal: {
                    converter: "Number",
                    default: 1
                },
                divVertical: {
                    converter: "Number",
                    default: 1
                }
            }, function (gl, attrs) {
                var hdiv = attrs["divHorizontal"];
                var vdiv = attrs["divVertical"];
                var geometry = new _Geometry2.default(gl);
                var vertices = [].concat.apply([], [_GeometryUtility2.default.plane([0, 0, 1], [0, 0, 1], [0, 1, 0], [1, 0, 0], hdiv, vdiv), _GeometryUtility2.default.plane([0, 0, -1], [0, 0, -1], [0, 1, 0], [-1, 0, 0], hdiv, vdiv), _GeometryUtility2.default.plane([0, 1, 0], [0, 1, 0], [0, 0, -1], [1, 0, 0], hdiv, vdiv), _GeometryUtility2.default.plane([0, -1, 0], [0, -1, 0], [0, 0, -1], [-1, 0, 0], hdiv, vdiv), _GeometryUtility2.default.plane([1, 0, 0], [1, 0, 0], [0, 1, 0], [0, 0, -1], hdiv, vdiv), _GeometryUtility2.default.plane([-1, 0, 0], [-1, 0, 0], [0, 1, 0], [0, 0, 1], hdiv, vdiv)]);
                geometry.addAttributes(vertices, primitiveLayout);
                var os = (hdiv + 1) * (vdiv + 1);
                var indices = [].concat.apply([], [_GeometryUtility2.default.planeIndex(0, hdiv, vdiv), _GeometryUtility2.default.planeIndex(os, hdiv, vdiv), _GeometryUtility2.default.planeIndex(2 * os, hdiv, vdiv), _GeometryUtility2.default.planeIndex(3 * os, hdiv, vdiv), _GeometryUtility2.default.planeIndex(4 * os, hdiv, vdiv), _GeometryUtility2.default.planeIndex(5 * os, hdiv, vdiv)]);
                geometry.addIndex("default", indices);
                geometry.addIndex("wireframe", _GeometryUtility2.default.linesFromTriangles(indices), WebGLRenderingContext.LINES);
                return geometry;
            });
        }
    }, {
        key: "_registerSphere",
        value: function _registerSphere() {
            _GeometryFactory2.default.addType("sphere", {
                divVertical: {
                    converter: "Number",
                    default: 50
                },
                divHorizontal: {
                    converter: "Number",
                    default: 50
                }
            }, function (gl, attrs) {
                var dH = attrs["divHorizontal"];
                var dV = attrs["divVertical"];
                var geometry = new _Geometry2.default(gl);
                geometry.addAttributes(_GeometryUtility2.default.sphere([0, 0, 0], [0, 1, 0], [1, 0, 0], [0, 0, -1], dV, dH), primitiveLayout);
                geometry.addIndex("default", _GeometryUtility2.default.sphereIndex(0, dV, dH));
                geometry.addIndex("wireframe", _GeometryUtility2.default.linesFromTriangles(_GeometryUtility2.default.sphereIndex(0, dV, dH)), WebGLRenderingContext.LINES);
                return geometry;
            });
        }
    }, {
        key: "_registerCapsule",
        value: function _registerCapsule() {
            _GeometryFactory2.default.addType("capsule", {
                divide: {
                    converter: "Number",
                    default: 50
                }
            }, function (gl, attrs) {
                var dH = attrs["divide"];
                var dV = attrs["divide"] % 2 == 1 ? attrs["divide"] + 1 : attrs["divide"];
                var geometry = new _Geometry2.default(gl);
                geometry.addAttributes(_GeometryUtility2.default.capsule([0, 0, 0], [0, 1, 0], [1, 0, 0], [0, 0, -1], dV, dH), primitiveLayout);
                geometry.addIndex("default", _GeometryUtility2.default.sphereIndex(0, dV, dH));
                geometry.addIndex("wireframe", _GeometryUtility2.default.linesFromTriangles(_GeometryUtility2.default.sphereIndex(0, dV, dH)), WebGLRenderingContext.LINES);
                return geometry;
            });
        }
    }, {
        key: "_registerCircle",
        value: function _registerCircle() {
            _GeometryFactory2.default.addType("circle", {
                divide: {
                    converter: "Number",
                    default: 30
                }
            }, function (gl, attrs) {
                var div = attrs["divide"];
                var geometry = new _Geometry2.default(gl);
                geometry.addAttributes(_GeometryUtility2.default.circle([0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], div), primitiveLayout);
                geometry.addIndex("default", _GeometryUtility2.default.circleIndex(0, div));
                geometry.addIndex("wireframe", _GeometryUtility2.default.linesFromTriangles(_GeometryUtility2.default.circleIndex(0, div)), WebGLRenderingContext.LINES);
                return geometry;
            });
        }
    }, {
        key: "_registerPlane",
        value: function _registerPlane() {
            _GeometryFactory2.default.addType("plane", {
                divide: {
                    converter: "Number",
                    default: 10
                }
            }, function (gl, attrs) {
                var hdiv = attrs["divide"];
                var vdiv = attrs["divide"];
                var geometry = new _Geometry2.default(gl);
                var vertices = [].concat.apply([], [_GeometryUtility2.default.plane([0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], hdiv, vdiv), _GeometryUtility2.default.plane([0, 0, 0], [0, 0, -1], [0, 1, 0], [-1, 0, 0], hdiv, vdiv)]);
                geometry.addAttributes(vertices, primitiveLayout);
                var indices = [].concat.apply([], [_GeometryUtility2.default.planeIndex(0, hdiv, vdiv), _GeometryUtility2.default.planeIndex((hdiv + 1) * (vdiv + 1), hdiv, vdiv)]);
                geometry.addIndex("default", indices);
                geometry.addIndex("wireframe", _GeometryUtility2.default.linesFromTriangles(indices), WebGLRenderingContext.LINES);
                return geometry;
            });
        }
    }]);

    return DefaultPrimitives;
}();

exports.default = DefaultPrimitives;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GeometryUtility = function () {
    function GeometryUtility() {
        _classCallCheck(this, GeometryUtility);
    }

    _createClass(GeometryUtility, null, [{
        key: "linesFromTriangles",
        value: function linesFromTriangles(indices) {
            var ret = [];
            var ic = new Array(3);
            var i = 0;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = indices[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var index = _step.value;

                    ic[i % 3] = index;
                    if (i % 3 === 2) {
                        var a = ic[0],
                            b = ic[1],
                            c = ic[2];
                        Array.prototype.push.apply(ret, [a, b, b, c, c, a]);
                    }
                    i++;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return ret;
        }
    }, {
        key: "plane",
        value: function plane(center, normal, up, right) {
            var hdiv = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
            var vdiv = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;

            var ret = new Array(8 * (hdiv + 1) * (vdiv + 1));
            var sp = [center[0] - up[0] - right[0], center[1] - up[1] - right[1], center[2] - up[2] - right[2]];
            var sr = [right[0] / hdiv * 2, right[1] / hdiv * 2, right[2] / hdiv * 2];
            var su = [up[0] / vdiv * 2, up[1] / vdiv * 2, up[2] / vdiv * 2];
            for (var v = 0; v < vdiv + 1; v++) {
                for (var h = 0; h < hdiv + 1; h++) {
                    var fi = ((hdiv + 1) * v + h) * 8;
                    ret[fi + 0] = sp[0] + sr[0] * h + su[0] * v;
                    ret[fi + 1] = sp[1] + sr[1] * h + su[1] * v;
                    ret[fi + 2] = sp[2] + sr[2] * h + su[2] * v;
                    ret[fi + 3] = normal[0];
                    ret[fi + 4] = normal[1];
                    ret[fi + 5] = normal[2];
                    ret[fi + 6] = 1 / hdiv * h;
                    ret[fi + 7] = 1 - 1 / vdiv * v;
                }
            }
            return ret;
        }
    }, {
        key: "cylinderPlane",
        value: function cylinderPlane(center, normal, up, right, divide, order) {
            var ret = new Array(32);
            var sp = [center[0] - up[0] - right[0], center[1] - up[1] - right[1], center[2] - up[2] - right[2]];
            var sr = [right[0] * 2, right[1] * 2, right[2] * 2];
            var su = [up[0] * 2, up[1] * 2, up[2] * 2];
            for (var v = 0; v < 2; v++) {
                for (var h = 0; h < 2; h++) {
                    var fi = (2 * v + h) * 8;
                    ret[fi + 0] = sp[0] + sr[0] * h + su[0] * v;
                    ret[fi + 1] = sp[1] + sr[1] * h + su[1] * v;
                    ret[fi + 2] = sp[2] + sr[2] * h + su[2] * v;
                    var l = Math.tan(Math.PI / divide) / Math.sin(Math.PI / divide);
                    if (h == 0) {
                        ret[fi + 3] = normal[0] - l * right[0];
                        ret[fi + 4] = normal[1] - l * right[1];
                        ret[fi + 5] = normal[2] - l * right[2];
                    } else {
                        ret[fi + 3] = normal[0] + l * right[0];
                        ret[fi + 4] = normal[1] + l * right[1];
                        ret[fi + 5] = normal[2] + l * right[2];
                    }
                    ret[fi + 6] = 1 / divide * (order + 1 + h);
                    ret[fi + 7] = v == 0 ? 1 : 0;
                }
            }
            return ret;
        }
    }, {
        key: "triangle",
        value: function triangle(center, normal, up, right) {
            var ret = new Array(24);
            var delta = 2 * Math.PI / 3;
            for (var i = 0; i < 3; i++) {
                var s = Math.sin(delta * i);
                var c = Math.cos(delta * i);
                ret[0 + 8 * i] = center[0] + c * up[0] + s * right[0];
                ret[1 + 8 * i] = center[1] + c * up[1] + s * right[1];
                ret[2 + 8 * i] = center[2] + c * up[2] + s * right[2];
                ret[3 + 8 * i] = normal[0];
                ret[4 + 8 * i] = normal[1];
                ret[5 + 8 * i] = normal[2];
                ret[6 + 8 * i] = 0.5 + (c * up[0] + s * right[0]) / 2;
                ret[7 + 8 * i] = 0.5 + (c * up[1] + s * right[1]) / 2;
            }
            return ret;
        }
    }, {
        key: "coneTriangle",
        value: function coneTriangle(center, normal, up, right, divide, order) {
            var ret = new Array(24);
            var delta = 2 * Math.PI / 3;
            for (var i = 0; i < 3; i++) {
                var s = Math.sin(delta * i);
                var c = Math.cos(delta * i);
                ret[0 + 8 * i] = center[0] + c * up[0] + s * right[0];
                ret[1 + 8 * i] = center[1] + c * up[1] + s * right[1];
                ret[2 + 8 * i] = center[2] + c * up[2] + s * right[2];
                ret[3 + 8 * i] = normal[0];
                ret[4 + 8 * i] = normal[1];
                ret[5 + 8 * i] = normal[2];
                var k = Math.pow(2, 0.5);
                var l = Math.tan(Math.PI / divide) / Math.sin(Math.PI / divide) / Math.pow(3, 0.5) * 2;
                if (i == 0) {
                    ret[3 + 8 * i] = normal[0];
                    ret[4 + 8 * i] = normal[1];
                    ret[5 + 8 * i] = normal[2];
                    ret[6 + 8 * i] = 0;
                    ret[7 + 8 * i] = 0;
                } else if (i == 1) {
                    ret[3 + 8 * i] = normal[0] / k + l * right[0];
                    ret[4 + 8 * i] = normal[1] / k + l * right[1];
                    ret[5 + 8 * i] = normal[2] / k + l * right[2];
                    ret[6 + 8 * i] = Math.cos(-Math.PI / divide / 2 * (order + 1));
                    ret[7 + 8 * i] = Math.sin(-Math.PI / divide / 2 * (order + 1));
                } else {
                    ret[3 + 8 * i] = normal[0] / k - l * right[0];
                    ret[4 + 8 * i] = normal[1] / k - l * right[1];
                    ret[5 + 8 * i] = normal[2] / k - l * right[2];
                    ret[6 + 8 * i] = Math.cos(-Math.PI / divide / 2 * order);
                    ret[7 + 8 * i] = Math.sin(-Math.PI / divide / 2 * order);
                }
            }
            return ret;
        }
    }, {
        key: "triangleIndex",
        value: function triangleIndex(offset) {
            var ret = new Array(3);
            ret[0] = offset;
            ret[1] = offset + 2;
            ret[2] = offset + 1;
            return ret;
        }
    }, {
        key: "planeIndex",
        value: function planeIndex() {
            var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var hdiv = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var vdiv = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            var ret = new Array(6 * hdiv * vdiv);
            for (var v = 0; v < vdiv; v++) {
                for (var h = 0; h < hdiv; h++) {
                    var fi = (hdiv * v + h) * 6;
                    var ld = offset + (hdiv + 1) * v + h;
                    var lu = offset + (hdiv + 1) * (v + 1) + h;
                    ret[fi + 0] = ld;
                    ret[fi + 1] = ld + 1;
                    ret[fi + 2] = lu;
                    ret[fi + 3] = lu;
                    ret[fi + 4] = ld + 1;
                    ret[fi + 5] = lu + 1;
                }
            }
            return ret;
        }
    }, {
        key: "circle",
        value: function circle(center, normal, up, right) {
            var divide = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 5;

            var ret = new Array((3 + divide) * 6);
            // center
            ret[0] = center[0];
            ret[1] = center[1];
            ret[2] = center[2];
            ret[3] = normal[0];
            ret[4] = normal[1];
            ret[5] = normal[2];
            ret[6] = 0.5;
            ret[7] = 0.5;
            var delta = 2 * Math.PI / divide;
            for (var v = 0; v < divide + 1; v++) {
                var fi = 8 + v * 8;
                var s = Math.sin(delta * v);
                var c = Math.cos(delta * v);
                ret[fi + 0] = center[0] + c * up[0] + s * right[0];
                ret[fi + 1] = center[1] + c * up[1] + s * right[1];
                ret[fi + 2] = center[2] + c * up[2] + s * right[2];
                ret[fi + 3] = normal[0];
                ret[fi + 4] = normal[1];
                ret[fi + 5] = normal[2];
                ret[fi + 6] = 0.5 + 0.5 * s;
                ret[fi + 7] = 0.5 - 0.5 * c;
            }
            return ret;
        }
    }, {
        key: "circleIndex",
        value: function circleIndex(offset, divide) {
            var ret = new Array(3 * divide);
            for (var i = 0; i < divide; i++) {
                ret[3 * i + 0] = offset;
                ret[3 * i + 1] = offset + (i + 2);
                ret[3 * i + 2] = offset + (i + 1);
            }
            return ret;
        }
    }, {
        key: "capsule",
        value: function capsule(center, up, right, forward) {
            var vdiv = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 3;
            var hdiv = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 3;

            var ret = new Array((vdiv * hdiv + 2) * 8);
            //top(0)
            ret[0] = center[0] + 2 * up[0];
            ret[1] = center[1] + 2 * up[1];
            ret[2] = center[2] + 2 * up[2];
            ret[3] = up[0];
            ret[4] = up[1];
            ret[5] = up[2];
            ret[6] = 0;
            ret[7] = 0;
            // bottom(1)
            ret[8] = center[0] - 2 * up[0];
            ret[9] = center[1] - 2 * up[1];
            ret[10] = center[2] - 2 * up[2];
            ret[11] = -up[0];
            ret[12] = -up[1];
            ret[13] = -up[2];
            ret[14] = 0;
            ret[15] = 1;
            var vDelta = Math.PI / (vdiv + 1);
            var hDelta = Math.PI * 2 / hdiv;
            for (var v = 0; v < vdiv; v++) {
                var vc = Math.cos((v + 1) * vDelta);
                var vs = Math.sin((v + 1) * vDelta);
                var phi = vDelta * v;
                for (var h = 0; h < hdiv + 1; h++) {
                    var hc = Math.cos(h * hDelta);
                    var hs = Math.sin(h * hDelta);
                    var fi = 16 + (v * (hdiv + 1) + h) * 8;
                    ret[fi + 0] = center[0] + vc * up[0] + vs * (forward[0] * hc + right[0] * hs);
                    ret[fi + 1] = center[1] + vc * up[1] + vs * (forward[1] * hc + right[1] * hs);
                    ret[fi + 2] = center[2] + vc * up[2] + vs * (forward[2] * hc + right[2] * hs);
                    ret[fi + 3] = center[0] + vc * up[0] + vs * (forward[0] * hc + right[0] * hs);
                    ret[fi + 4] = center[1] + vc * up[1] + vs * (forward[1] * hc + right[1] * hs);
                    ret[fi + 5] = center[2] + vc * up[2] + vs * (forward[2] * hc + right[2] * hs);
                    var theta = hDelta * h;
                    ret[fi + 6] = theta / Math.PI / 2;
                    ret[fi + 7] = phi / Math.PI;
                    ret[fi + 0] = ret[fi + 0] > 0 ? ret[fi + 0] + up[0] : ret[fi + 0] - up[0];
                    ret[fi + 1] = ret[fi + 1] > 0 ? ret[fi + 1] + up[1] : ret[fi + 1] - up[1];
                    ret[fi + 2] = ret[fi + 2] > 0 ? ret[fi + 2] + up[2] : ret[fi + 2] - up[2];
                }
            }
            return ret;
        }
    }, {
        key: "sphere",
        value: function sphere(center, up, right, forward) {
            var vdiv = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 3;
            var hdiv = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 3;

            var ret = new Array((vdiv * hdiv + 2) * 8);
            // top(0)
            ret[0] = center[0] + up[0];
            ret[1] = center[1] + up[1];
            ret[2] = center[2] + up[2];
            ret[3] = up[0];
            ret[4] = up[1];
            ret[5] = up[2];
            ret[6] = Math.PI * 2;
            ret[7] = 0;
            // bottom(1)
            ret[8] = center[0] - up[0];
            ret[9] = center[1] - up[1];
            ret[10] = center[2] - up[2];
            ret[11] = -up[0];
            ret[12] = -up[1];
            ret[13] = -up[2];
            ret[14] = Math.PI * 2;
            ret[15] = 1;
            var vDelta = Math.PI / (vdiv + 1); // vertical delta angle per one face
            var hDelta = Math.PI * 2 / hdiv; // horizontal delta nagle per one face
            for (var v = 0; v < vdiv; v++) {
                var vc = Math.cos((v + 1) * vDelta);
                var vs = Math.sin((v + 1) * vDelta);
                var phi = vDelta * v;
                for (var h = 0; h < hdiv + 1; h++) {
                    var hc = Math.cos(h * hDelta);
                    var hs = Math.sin(h * hDelta);
                    var fi = 16 + (v * (hdiv + 1) + h) * 8;
                    ret[fi + 0] = center[0] + vc * up[0] + vs * (forward[0] * hc + right[0] * hs);
                    ret[fi + 1] = center[1] + vc * up[1] + vs * (forward[1] * hc + right[1] * hs);
                    ret[fi + 2] = center[2] + vc * up[2] + vs * (forward[2] * hc + right[2] * hs);
                    ret[fi + 3] = center[0] + vc * up[0] + vs * (forward[0] * hc + right[0] * hs);
                    ret[fi + 4] = center[1] + vc * up[1] + vs * (forward[1] * hc + right[1] * hs);
                    ret[fi + 5] = center[2] + vc * up[2] + vs * (forward[2] * hc + right[2] * hs);
                    var theta = hDelta * (hdiv - h);
                    ret[fi + 6] = theta / Math.PI / 2;
                    ret[fi + 7] = phi / Math.PI;
                }
            }
            return ret;
        }
    }, {
        key: "sphereIndex",
        value: function sphereIndex(offset) {
            var vdiv = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
            var hdiv = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;

            var ret = new Array(hdiv * vdiv * 6);
            var getIndex = function getIndex(i, j) {
                return offset + (hdiv + 1) * j + 2 + i;
            };
            var top = offset;
            var bottom = offset + 1;
            // upper side
            for (var i = 0; i < hdiv; i++) {
                ret[3 * i + 0] = top;
                ret[3 * i + 1] = getIndex(i + 1, 0);
                ret[3 * i + 2] = getIndex(i, 0);
            }
            var k = 3 * hdiv;
            // middle
            for (var j = 0; j < vdiv - 1; j++) {
                for (var _i = 0; _i < hdiv; _i++) {
                    ret[(hdiv * j + _i) * 6 + k] = getIndex(_i, j);
                    ret[(hdiv * j + _i) * 6 + k + 1] = getIndex(_i + 1, j);
                    ret[(hdiv * j + _i) * 6 + k + 2] = getIndex(_i, j + 1);
                    ret[(hdiv * j + _i) * 6 + k + 3] = getIndex(_i, j + 1);
                    ret[(hdiv * j + _i) * 6 + k + 4] = getIndex(_i + 1, j);
                    ret[(hdiv * j + _i) * 6 + k + 5] = getIndex(_i + 1, j + 1);
                }
            }
            var l = hdiv * (vdiv - 1) * 6 + k;
            // lower side
            for (var _i2 = 0; _i2 < hdiv; _i2++) {
                ret[3 * _i2 + l + 0] = bottom;
                ret[3 * _i2 + l + 1] = getIndex(_i2, vdiv - 1);
                ret[3 * _i2 + l + 2] = getIndex(_i2 + 1, vdiv - 1);
            }
            return ret;
        }
    }]);

    return GeometryUtility;
}();

exports.default = GeometryUtility;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    "GRIMOIRE": null,
    "WEBGL_VERSION": "1"
};

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _MaterialFactory = __webpack_require__(4);

var _MaterialFactory2 = _interopRequireDefault(_MaterialFactory);

var _Unlit = __webpack_require__(107);

var _Unlit2 = _interopRequireDefault(_Unlit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DefaultMaterial = function () {
    function DefaultMaterial() {
        _classCallCheck(this, DefaultMaterial);
    }

    _createClass(DefaultMaterial, null, [{
        key: "register",
        value: function register() {
            _MaterialFactory2.default.addSORTMaterial("unlit", _Unlit2.default);
        }
    }]);

    return DefaultMaterial;
}();

exports.default = DefaultMaterial;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GLStateConfigurator = function () {
    function GLStateConfigurator() {
        _classCallCheck(this, GLStateConfigurator);
    }

    _createClass(GLStateConfigurator, null, [{
        key: "configureForPass",

        /**
         * Configure gl state based on pass recipe
         */
        value: function configureForPass(gl, passRecipe) {
            var states = passRecipe.states;
            var functions = states.functions;
            if (!states.disable) {
                GLStateConfigurator.complementDisableState(passRecipe.states);
            }
            for (var i = 0; i < states.enable.length; i++) {
                gl.enable(states.enable[i]);
            }
            for (var _i = 0; _i < states.disable.length; _i++) {
                gl.disable(states.disable[_i]);
            }
            if (functions.blendColor) {
                gl.blendColor(functions.blendColor[0], functions.blendColor[1], functions.blendColor[2], functions.blendColor[3]);
            }
            if (functions.blendEquationSeparate) {
                gl.blendEquationSeparate(functions.blendEquationSeparate[0], functions.blendEquationSeparate[1]);
            }
            if (functions.blendFuncSeparate) {
                gl.blendFuncSeparate(functions.blendFuncSeparate[0], functions.blendFuncSeparate[1], functions.blendFuncSeparate[2], functions.blendFuncSeparate[3]);
            }
            if (functions.colorMask) {
                gl.colorMask(functions.colorMask[0], functions.colorMask[1], functions.colorMask[2], functions.colorMask[3]);
            }
            if (functions.cullFace) {
                gl.cullFace(functions.cullFace[0]);
            }
            if (functions.depthFunc) {
                gl.depthFunc(functions.depthFunc[0]);
            }
            if (functions.depthMask) {
                gl.depthMask(functions.depthMask[0]);
            }
            if (functions.depthRange) {
                gl.depthRange(functions.depthRange[0], functions.depthRange[1]);
            }
            if (functions.frontFace) {
                gl.frontFace(functions.frontFace[0]);
            }
            if (functions.lineWidth) {
                gl.lineWidth(functions.lineWidth[0]);
            }
            if (functions.polygonOffset) {
                gl.polygonOffset(functions.polygonOffset[0], functions.polygonOffset[1]);
            }
            if (functions.scissor) {
                gl.scissor(functions.scissor[0], functions.scissor[1], functions.scissor[2], functions.scissor[3]);
            }
        }
        /**
         * Complement disabling state based on enabled states.
         */

    }, {
        key: "complementDisableState",
        value: function complementDisableState(state) {
            if (!state.disable) {
                state.disable = [];
            }
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = GLStateConfigurator._glEnableTargets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var key = _step.value;

                    if (state.enable.indexOf(key) === -1) {
                        state.disable.push(key);
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }]);

    return GLStateConfigurator;
}();

exports.default = GLStateConfigurator;

GLStateConfigurator._glEnableTargets = [WebGLRenderingContext.CULL_FACE, WebGLRenderingContext.DEPTH_TEST, WebGLRenderingContext.STENCIL_TEST, WebGLRenderingContext.BLEND, WebGLRenderingContext.SCISSOR_TEST, WebGLRenderingContext.DITHER, WebGLRenderingContext.POLYGON_OFFSET_FILL, WebGLRenderingContext.SAMPLE_ALPHA_TO_COVERAGE, WebGLRenderingContext.SAMPLE_COVERAGE];

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DefaultMacro = __webpack_require__(61);

var _DefaultMacro2 = _interopRequireDefault(_DefaultMacro);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Manage macros which would be appended head of all shaders grimoire.js would load.
 */
var MacroRegistory = function () {
    function MacroRegistory() {
        _classCallCheck(this, MacroRegistory);

        /**
         * The map of macro.
         */
        this._macro = {};
        /**
         * Handlers functions for changing macro.
         */
        this._observers = {};
        for (var key in _DefaultMacro2.default) {
            this.setValue(key, _DefaultMacro2.default[key]);
        }
    }
    /**
     * Set the value of macros.
     * @param {string}    key [description]
     * @param {string =   null}        val [description]
     */


    _createClass(MacroRegistory, [{
        key: "setValue",
        value: function setValue(key) {
            var val = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            if (val === null) {
                val = "";
            }
            if (this._macro[key] !== val) {
                this._macro[key] = val;
                if (!this._observers[key]) {
                    this._observers[key] = [];
                }
                this._notifyMacroChanged(key, val);
            }
        }
        /**
         * Get the value of macro.
         * @param  {string} key [description]
         * @return {string}     [description]
         */

    }, {
        key: "getValue",
        value: function getValue(key) {
            var macro = this._macro[key];
            if (macro === null) {
                return "";
            } else {
                return macro;
            }
        }
    }, {
        key: "watch",
        value: function watch(macroName, handler) {
            var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            var observers = this._observers[macroName];
            if (!observers) {
                observers = this._observers[macroName] = [];
            }
            observers.push(handler);
            if (immediate && this._macro[macroName] !== void 0) {
                handler(this._macro[macroName], true);
            }
        }
    }, {
        key: "unwatch",
        value: function unwatch(macroName, handler) {
            var observers = this._observers[macroName];
            if (!observers) {
                return false;
            }
            for (var i = 0; i < observers.length; i++) {
                if (observers[i] === handler) {
                    observers.splice(i, 1);
                    return true;
                }
            }
        }
    }, {
        key: "_notifyMacroChanged",
        value: function _notifyMacroChanged(key, value) {
            for (var i = 0; i < this._observers[key].length; i++) {
                this._observers[key][i](value, false);
            }
        }
    }]);

    return MacroRegistory;
}();

exports.default = MacroRegistory;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _MaterialFactory = __webpack_require__(4);

var _MaterialFactory2 = _interopRequireDefault(_MaterialFactory);

var _Geometry = __webpack_require__(16);

var _Geometry2 = _interopRequireDefault(_Geometry);

var _UniformResolverRegistry = __webpack_require__(7);

var _UniformResolverRegistry2 = _interopRequireDefault(_UniformResolverRegistry);

var _GLStateConfigurator = __webpack_require__(63);

var _GLStateConfigurator2 = _interopRequireDefault(_GLStateConfigurator);

var _PassProgram = __webpack_require__(66);

var _PassProgram2 = _interopRequireDefault(_PassProgram);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Pass = function () {
    function Pass(material, passRecipe) {
        var _this = this;

        _classCallCheck(this, Pass);

        this.material = material;
        this.passRecipe = passRecipe;
        this._macro = {};
        this._uniformResolvers = _UniformResolverRegistry2.default.generateRegisterers(material, passRecipe);
        this._gl = material.gl;
        var factory = _MaterialFactory2.default.get(this._gl);
        var macroRegister = factory.macro;
        // register macro

        var _loop = function _loop(key) {
            var macro = passRecipe.macros[key];
            _this._macro[macro.macroName] = macro.value;
            if (macro.target === "expose") {
                _this.material.addMacroObserver(key, {
                    converter: macro.type === "bool" ? "Boolean" : "Number",
                    default: macro.value
                }, function (value) {
                    if (macro.type === "bool") {
                        _this._macro[macro.macroName] = value ? "" : undefined;
                    } else {
                        _this._macro[macro.macroName] = value;
                    }
                    _this.program.macros = _this._macro;
                });
            } else if (macro.target === "refer") {
                _this._macro[macro.macroName] = macro.value;
                macroRegister.watch(macro.macroName, function (val, immediate) {
                    _this._macro[macro.macroName] = val;
                    if (!immediate) {
                        _this.program.macros = _this._macro;
                    }
                }, true);
            }
        };

        for (var key in passRecipe.macros) {
            _loop(key);
        }
        this.program = new _PassProgram2.default(this._gl, passRecipe.vertex, passRecipe.fragment, this._macro);
    }

    _createClass(Pass, [{
        key: "draw",
        value: function draw(args) {
            var p = this.program.getProgram(args.geometry);
            p.use();
            this._uniformResolvers.resolve(p.uniforms, args);
            _GLStateConfigurator2.default.configureForPass(this._gl, this.passRecipe); // configure for gl states
            for (var key in this.passRecipe.attributes) {
                var attribute = this.passRecipe.attributes[key];
                _Geometry2.default.bindBufferToAttribute(args.geometry, p, key, attribute.semantic);
            }
            _Geometry2.default.drawWithCurrentVertexBuffer(args.geometry, args.targetBuffer, args.drawCount, args.drawOffset);
        }
    }, {
        key: "update",
        value: function update(variableName, newValue, oldValue) {
            this._uniformResolvers.update(this.program, variableName, newValue, oldValue);
        }
    }, {
        key: "dispose",
        value: function dispose() {
            this._uniformResolvers.dispose();
            this.program.dispose();
        }
    }]);

    return Pass;
}();

exports.default = Pass;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ManagedShader = __webpack_require__(73);

var _ManagedShader2 = _interopRequireDefault(_ManagedShader);

var _ManagedProgram = __webpack_require__(72);

var _ManagedProgram2 = _interopRequireDefault(_ManagedProgram);

var _ShaderMixer = __webpack_require__(67);

var _ShaderMixer2 = _interopRequireDefault(_ShaderMixer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Container of shader program used for Pass.
 * Pass needs to care which geometry will be drawn by a material.
 * (For determining what macro should be appended to shader by attribute variable exisiting)
 */
var PassProgram = function () {
    function PassProgram(_gl, _vsSource, _fsSource) {
        var _macros = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

        _classCallCheck(this, PassProgram);

        this._gl = _gl;
        this._vsSource = _vsSource;
        this._fsSource = _fsSource;
        this._macros = _macros;
        this._programs = {};
        this._shaders = [];
    }

    _createClass(PassProgram, [{
        key: "getProgram",
        value: function getProgram(geometry) {
            if (this._programs[geometry.accessorHash]) {
                return this._programs[geometry.accessorHash];
            } else {
                return this._constructProgram(geometry);
            }
        }
    }, {
        key: "setMacro",
        value: function setMacro(macroName, value) {
            if (this._macros[macroName] !== value) {
                if (typeof value === "boolean") {
                    this._macros[macroName] = value ? "" : undefined;
                } else {
                    this._macros[macroName] = value;
                }
                this.dispose();
            }
        }
    }, {
        key: "dispose",
        value: function dispose() {
            for (var key in this._programs) {
                this._programs[key].release();
            }
            this._programs = {};
            this._shaders.forEach(function (s) {
                return s.release();
            });
            this._shaders = [];
        }
    }, {
        key: "_constructProgram",
        value: function _constructProgram(geometry) {
            var fs = _ManagedShader2.default.getShader(this._gl, WebGLRenderingContext.FRAGMENT_SHADER, _ShaderMixer2.default.generate(WebGLRenderingContext.FRAGMENT_SHADER, this._macros, this._fsSource, geometry));
            var vs = _ManagedShader2.default.getShader(this._gl, WebGLRenderingContext.VERTEX_SHADER, _ShaderMixer2.default.generate(WebGLRenderingContext.VERTEX_SHADER, this._macros, this._vsSource, geometry));
            var program = _ManagedProgram2.default.getProgram(this._gl, [vs, fs]);
            this._shaders.push(fs);
            this._shaders.push(vs);
            this._programs[geometry.accessorHash] = program;
            return program;
        }
    }, {
        key: "macros",
        get: function get() {
            return this._macros;
        },
        set: function set(val) {
            this._macros = val;
            this.dispose();
        }
    }, {
        key: "fragmentShader",
        get: function get() {
            return this._fsSource;
        },
        set: function set(source) {
            this._fsSource = source;
            this.dispose();
        }
    }, {
        key: "vertexShader",
        get: function get() {
            return this._vsSource;
        },
        set: function set(source) {
            this._vsSource = source;
            this.dispose();
        }
    }]);

    return PassProgram;
}();

exports.default = PassProgram;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _header = __webpack_require__(90);

var _header2 = _interopRequireDefault(_header);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ShaderMixer = function () {
    function ShaderMixer() {
        _classCallCheck(this, ShaderMixer);
    }

    _createClass(ShaderMixer, null, [{
        key: "generate",

        /**
         * Generate shader code from specified macro and codes.
         * @param  {number}  type   WebGLRenderingContext.VERTEX_SHADER or WebGLRenderingContext.FRAGMENT_SHADER
         * @param   macros macro hash to be included
         * @param  {string}  code   shader body(Raw glsl)
         * @return {string}         generated shader code
         */
        value: function generate(type, macros, code, geometry) {
            var shaderTypeMacro = void 0;
            if (type === WebGLRenderingContext.VERTEX_SHADER) {
                shaderTypeMacro = "#define VS\n";
            } else {
                shaderTypeMacro = "#define FS\n";
            }
            return "" + shaderTypeMacro + ShaderMixer._geometryToAttributeUsedFlags(geometry) + ShaderMixer._macroCode(macros) + _header2.default + "\n/*****BEGINNING OF USER CODE******/\n" + code;
        }
    }, {
        key: "_macroCode",
        value: function _macroCode(macros) {
            var macroCode = "";
            for (var macroName in macros) {
                if (macros[macroName] === void 0) {
                    continue;
                }
                macroCode += "#define " + macroName + " " + macros[macroName] + "\n";
            }
            return macroCode;
        }
    }, {
        key: "_geometryToAttributeUsedFlags",
        value: function _geometryToAttributeUsedFlags(geometry) {
            var macroCode = "";
            for (var attribName in geometry.accessors) {
                macroCode += "#define ATTRIBUTE_" + attribName + "_ENABLED\n";
            }
            return macroCode;
        }
    }]);

    return ShaderMixer;
}();

exports.default = ShaderMixer;

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Pass = __webpack_require__(65);

var _Pass2 = _interopRequireDefault(_Pass);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Technique = function () {
    function Technique(material, recipe) {
        _classCallCheck(this, Technique);

        this.material = material;
        this.passes = [];
        if (recipe.drawOrder === "Auto") {
            this.drawOrder = "UseAlpha";
        } else {
            this.drawOrder = recipe.drawOrder;
        }
        this.passes = recipe.passes.map(function (p) {
            return new _Pass2.default(material, p);
        });
    }

    _createClass(Technique, [{
        key: "draw",
        value: function draw(args) {
            for (var i = 0; i < this.passes.length; i++) {
                this.passes[i].draw(args);
            }
        }
    }, {
        key: "dispose",
        value: function dispose() {
            this.passes.forEach(function (p) {
                return p.dispose();
            });
        }
    }]);

    return Technique;
}();

exports.default = Technique;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Proxy of texture reference
 */
var TextureReference = function () {
    function TextureReference(rawResource) {
        _classCallCheck(this, TextureReference);

        this.rawResource = rawResource;
        this.isFunctionalProxy = typeof rawResource === "function";
    }

    _createClass(TextureReference, [{
        key: "get",
        value: function get(buffers) {
            if (!this.isFunctionalProxy) {
                return this.rawResource;
            } else {
                return this.rawResource(buffers);
            }
        }
    }]);

    return TextureReference;
}();

exports.default = TextureReference;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Container of uniform registerers resolved by UniformResolverRegistry already.
 * @param  {IUniformRegisterOnRegister[]} publicregisterers [description]
 * @param  {IUniformRegisterOnDispose[]}  publicdisposers   [description]
 * @return {[type]}                                         [description]
 */
var UniformResolverContainer = function () {
    function UniformResolverContainer(registerers, disposers, updators) {
        _classCallCheck(this, UniformResolverContainer);

        this.registerers = registerers;
        this.disposers = disposers;
        this.updators = updators;
    }
    /**
     * Resolve uniform variables to pass gpu
     * @param {UniformProxy}      proxy [description]
     * @param {IMaterialArgument} args  [description]
     */


    _createClass(UniformResolverContainer, [{
        key: "resolve",
        value: function resolve(proxy, args) {
            this.registerers.forEach(function (r) {
                return r(proxy, args);
            });
        }
        /**
         * Dispose all resolvers
         */

    }, {
        key: "dispose",
        value: function dispose() {
            this.disposers.forEach(function (d) {
                return d();
            });
        }
        /**
         * Update specified variable
         * @param {string} variableName [description]
         */

    }, {
        key: "update",
        value: function update(passProgram, variableName, newValue, oldValue) {
            if (this.updators[variableName]) {
                this.updators[variableName](passProgram, newValue, oldValue);
            }
        }
    }]);

    return UniformResolverContainer;
}();

exports.default = UniformResolverContainer;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _ResourceBase2 = __webpack_require__(2);

var _ResourceBase3 = _interopRequireDefault(_ResourceBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Buffer = function (_ResourceBase) {
    _inherits(Buffer, _ResourceBase);

    function Buffer(gl) {
        var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : WebGLRenderingContext.ARRAY_BUFFER;
        var usage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : WebGLRenderingContext.STATIC_DRAW;

        _classCallCheck(this, Buffer);

        var _this = _possibleConstructorReturn(this, (Buffer.__proto__ || Object.getPrototypeOf(Buffer)).call(this, gl));

        _this.target = target;
        _this.usage = usage;
        _this.buffer = gl.createBuffer();
        return _this;
    }

    _createClass(Buffer, [{
        key: "update",
        value: function update(length, subBuffer) {
            this.bind();
            if (subBuffer) {
                if (!this.valid) {
                    this.gl.bufferData(this.target, length + subBuffer.byteLength, this.usage);
                }
                this.gl.bufferSubData(this.target, length, subBuffer);
            } else {
                if (typeof length === "number") {
                    this.gl.bufferData(this.target, length, this.usage);
                } else {
                    this.gl.bufferData(this.target, length, this.usage);
                }
            }
            this.valid = true;
        }
    }, {
        key: "bind",
        value: function bind() {
            this.gl.bindBuffer(this.target, this.buffer);
        }
    }, {
        key: "destroy",
        value: function destroy() {
            _get(Buffer.prototype.__proto__ || Object.getPrototypeOf(Buffer.prototype), "destroy", this).call(this);
            this.gl.deleteBuffer(this.buffer);
        }
    }]);

    return Buffer;
}(_ResourceBase3.default);

exports.default = Buffer;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _HashCalculator = __webpack_require__(8);

var _HashCalculator2 = _interopRequireDefault(_HashCalculator);

var _Program2 = __webpack_require__(74);

var _Program3 = _interopRequireDefault(_Program2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ManagedProgram = function (_Program) {
    _inherits(ManagedProgram, _Program);

    function ManagedProgram(gl, hash) {
        _classCallCheck(this, ManagedProgram);

        var _this = _possibleConstructorReturn(this, (ManagedProgram.__proto__ || Object.getPrototypeOf(ManagedProgram)).call(this, gl));

        _this.hash = hash;
        _this._referenceCount = 0;
        return _this;
    }

    _createClass(ManagedProgram, [{
        key: "release",
        value: function release() {
            this._referenceCount--;
            if (this._referenceCount === 0) {
                this.destroy();
                ManagedProgram._managedPrograms.get(this.gl)[this.hash] = void 0;
            }
        }
    }], [{
        key: "getProgram",
        value: function getProgram(gl, shaders) {
            if (!ManagedProgram._managedPrograms.has(gl)) {
                ManagedProgram._managedPrograms.set(gl, {});
            }
            var programs = ManagedProgram._managedPrograms.get(gl);
            var hashSource = "";
            shaders = shaders.sort();
            shaders.forEach(function (s) {
                hashSource += s.index + ",";
            });
            var hash = _HashCalculator2.default.calcHash(hashSource);
            if (programs[hash] === void 0) {
                programs[hash] = new ManagedProgram(gl, hash);
                programs[hash].update(shaders);
            }
            programs[hash]._referenceCount++;
            return programs[hash];
        }
    }]);

    return ManagedProgram;
}(_Program3.default);

exports.default = ManagedProgram;

ManagedProgram._managedPrograms = new Map();

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _HashCalculator = __webpack_require__(8);

var _HashCalculator2 = _interopRequireDefault(_HashCalculator);

var _Shader2 = __webpack_require__(76);

var _Shader3 = _interopRequireDefault(_Shader2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Provides abstraction of shader instance.
 * If specified shader source was instanced already, delegate actual instance.
 * And counts reference of shader and if that shader was released and the count is zero, this shader resource would be deleted automatically.
 *
 * DO NOT instanciate this class directly. Use getShader method instead.
 */
var ManagedShader = function (_Shader) {
    _inherits(ManagedShader, _Shader);

    function ManagedShader(gl, type, sourceCode, hash) {
        _classCallCheck(this, ManagedShader);

        var _this = _possibleConstructorReturn(this, (ManagedShader.__proto__ || Object.getPrototypeOf(ManagedShader)).call(this, gl, type, sourceCode));

        _this.type = type;
        _this.sourceCode = sourceCode;
        _this.hash = hash;
        _this._referenceCount = 0;
        return _this;
    }
    /**
     * Obtain a reference to shader.
     * @param  {WebGLRenderingContext} gl     [description]
     * @param  {number}                type   [description]
     * @param  {string}                shader [description]
     * @return {ManagedShader}                [description]
     */


    _createClass(ManagedShader, [{
        key: "release",

        /**
         * Release shader instance from reference.
         * Do not call this method dupelicately per a getShader call.
         *
         * That would make this shader disposed unintendedly.
         */
        value: function release() {
            this._referenceCount--;
            if (this._referenceCount === 0) {
                this.destroy();
                ManagedShader._managedShaders.get(this.gl)[this.hash] = void 0;
            }
        }
    }], [{
        key: "getShader",
        value: function getShader(gl, type, shader) {
            if (!ManagedShader._managedShaders.has(gl)) {
                ManagedShader._managedShaders.set(gl, {});
            }
            var shaders = ManagedShader._managedShaders.get(gl);
            var hash = _HashCalculator2.default.calcHash(shader + type);
            if (shaders[hash] === void 0) {
                shaders[hash] = new ManagedShader(gl, type, shader, hash);
            }
            shaders[hash]._referenceCount++;
            return shaders[hash];
        }
    }]);

    return ManagedShader;
}(_Shader3.default);

exports.default = ManagedShader;

ManagedShader._managedShaders = new Map();

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _ResourceCache = __webpack_require__(75);

var _ResourceCache2 = _interopRequireDefault(_ResourceCache);

var _UniformProxy = __webpack_require__(77);

var _UniformProxy2 = _interopRequireDefault(_UniformProxy);

var _ResourceBase2 = __webpack_require__(2);

var _ResourceBase3 = _interopRequireDefault(_ResourceBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Manages WebGLProgram related stuff.
 */
var Program = function (_ResourceBase) {
    _inherits(Program, _ResourceBase);

    function Program(gl) {
        _classCallCheck(this, Program);

        var _this = _possibleConstructorReturn(this, (Program.__proto__ || Object.getPrototypeOf(Program)).call(this, gl));

        _this._uniformLocations = {};
        _this._attributeLocations = {};
        _this.uniforms = new _UniformProxy2.default(_this);
        _this.program = gl.createProgram();
        return _this;
    }
    /**
     * Check this program is the last used one or not.
     * @return {boolean} [description]
     */


    _createClass(Program, [{
        key: "update",

        /**
         * Update program with shader instance.
         * The array might be set of vertex shader and fragment shader couple.
         * @param {Shader[]} shaders [description]
         */
        value: function update(shaders) {
            var _this2 = this;

            if (this.valid) {
                // detach all attached shaders previously
                var preciousShaders = this.gl.getAttachedShaders(this.program);
                preciousShaders.forEach(function (s) {
                    return _this2.gl.detachShader(_this2.program, s);
                });
            }
            this._uniformLocations = {}; // reset location caches
            this._attributeLocations = {};
            // attach all shader passed
            shaders.forEach(function (shader) {
                _this2.gl.attachShader(_this2.program, shader.shader);
            });
            this.gl.linkProgram(this.program); // link program and check errors
            if (!this.gl.getProgramParameter(this.program, WebGLRenderingContext.LINK_STATUS)) {
                var errorLog = this.gl.getProgramInfoLog(this.program);
                throw new Error("LINK FAILED\n" + errorLog);
            }
            this.valid = true;
        }
        /**
         * Use this program for drawing.
         */

    }, {
        key: "use",
        value: function use() {
            if (!this.isLastUsed) {
                this.gl.useProgram(this.program);
            }
            this.uniforms.onUse();
        }
        /**
         * Destroy this instance.
         */

    }, {
        key: "destroy",
        value: function destroy() {
            _get(Program.prototype.__proto__ || Object.getPrototypeOf(Program.prototype), "destroy", this).call(this);
            this.gl.deleteProgram(this.program);
            this._uniformLocations = {};
            this._attributeLocations = {};
        }
        /**
         * Fetch attribute location from this program.
         * @param  {string} variableName [description]
         * @return {number}              [description]
         */

    }, {
        key: "findAttributeLocation",
        value: function findAttributeLocation(variableName) {
            if (this._attributeLocations[variableName] === void 0) {
                this._attributeLocations[variableName] = this.gl.getAttribLocation(this.program, variableName);
                this._safeEnableVertexAttribArray(this._attributeLocations[variableName]);
                return this._attributeLocations[variableName];
            } else {
                return this._attributeLocations[variableName];
            }
        }
        /**
         * Fetch uniform location from this program
         * @param  {string}               variableName [description]
         * @return {WebGLUniformLocation}              [description]
         */

    }, {
        key: "findUniformLocation",
        value: function findUniformLocation(variableName) {
            var location = this._uniformLocations[variableName];
            if (location === void 0) {
                return this._uniformLocations[variableName] = this.gl.getUniformLocation(this.program, variableName);
            } else {
                return location;
            }
        }
    }, {
        key: "_safeEnableVertexAttribArray",
        value: function _safeEnableVertexAttribArray(location) {
            if (location < 0) {
                return;
            }
            this.gl.enableVertexAttribArray(location);
        }
    }, {
        key: "isLastUsed",
        get: function get() {
            return _ResourceCache2.default.useProgramCheck(this.gl, this.program);
        }
    }]);

    return Program;
}(_ResourceBase3.default);

exports.default = Program;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ResourceCache = exports.ResourceCache = function () {
    function ResourceCache() {
        _classCallCheck(this, ResourceCache);

        this._lastUsedPrograms = new Map();
    }
    /**
     * Save the specified WebGLProgram as last used program.
     * And check the specified program was used last time.
     */


    _createClass(ResourceCache, [{
        key: "useProgramCheck",
        value: function useProgramCheck(gl, program) {
            if (this._lastUsedPrograms.get(gl) === program) {
                return true;
            }
            this._lastUsedPrograms.set(gl, program);
            return false;
        }
    }]);

    return ResourceCache;
}();

exports.default = new ResourceCache();

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _ResourceBase2 = __webpack_require__(2);

var _ResourceBase3 = _interopRequireDefault(_ResourceBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Shader = function (_ResourceBase) {
    _inherits(Shader, _ResourceBase);

    function Shader(gl, type, sourceCode) {
        _classCallCheck(this, Shader);

        var _this = _possibleConstructorReturn(this, (Shader.__proto__ || Object.getPrototypeOf(Shader)).call(this, gl));

        _this.type = type;
        _this.sourceCode = sourceCode;
        _this.shader = gl.createShader(type);
        if (sourceCode) {
            _this.update(sourceCode);
        }
        return _this;
    }

    _createClass(Shader, [{
        key: "update",
        value: function update(source) {
            this.gl.shaderSource(this.shader, source);
            this.gl.compileShader(this.shader);
            if (!this.gl.getShaderParameter(this.shader, WebGLRenderingContext.COMPILE_STATUS)) {
                throw new Error("Compiling shader failed.\nSourceCode:\n" + this._insertLineNumbers(source) + "\n\nErrorCode:" + this.gl.getShaderInfoLog(this.shader));
            }
            this.sourceCode = source;
            this.valid = true;
        }
    }, {
        key: "destroy",
        value: function destroy() {
            _get(Shader.prototype.__proto__ || Object.getPrototypeOf(Shader.prototype), "destroy", this).call(this);
            this.gl.deleteShader(this.shader);
        }
    }, {
        key: "_insertLineNumbers",
        value: function _insertLineNumbers(source) {
            source = "1:" + source;
            var lN = 2;
            for (var i = 0; i < source.length; i++) {
                var c = source.charAt(i);
                if (c === '\n') {
                    source = source.substring(0, i + 1) + (lN + ":") + source.substring(i + 1, source.length);
                    i++;
                    lN++;
                }
            }
            return source;
        }
    }]);

    return Shader;
}(_ResourceBase3.default);

exports.default = Shader;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var mat3Cache = new Float32Array(9);

var UniformProxy = function () {
    function UniformProxy(program) {
        _classCallCheck(this, UniformProxy);

        this.program = program;
        this._currentTextureRegister = 0;
        this._gl = program.gl;
    }

    _createClass(UniformProxy, [{
        key: "uniformBool",
        value: function uniformBool(variableName, val) {
            var _this = this;

            this._pass(variableName, function (l) {
                return _this._gl.uniform1i(l, val ? 1 : 0);
            });
        }
    }, {
        key: "uniformMatrix",
        value: function uniformMatrix(variableName, mat) {
            var _this2 = this;

            this._pass(variableName, function (l) {
                _this2._gl.uniformMatrix4fv(l, false, mat.rawElements);
            });
        }
    }, {
        key: "uniformMatrix3",
        value: function uniformMatrix3(variableName, mat) {
            var _this3 = this;

            this._pass(variableName, function (l) {
                var r = mat.rawElements;
                for (var i = 0; i < 3; i++) {
                    mat3Cache[3 * i + 0] = r[4 * i + 0];
                    mat3Cache[3 * i + 1] = r[4 * i + 1];
                    mat3Cache[3 * i + 2] = r[4 * i + 2];
                }
                _this3._gl.uniformMatrix3fv(l, false, mat3Cache);
            });
        }
    }, {
        key: "uniformMatrixArray",
        value: function uniformMatrixArray(variableName, matricies) {
            var _this4 = this;

            var length = matricies.length / 16;

            var _loop = function _loop(i) {
                _this4._passAsArray(variableName, i, function (l) {
                    return _this4._gl.uniformMatrix4fv(l, false, new Float32Array(matricies.buffer, matricies.byteOffset + i * 64));
                });
            };

            for (var i = 0; i < length; i++) {
                _loop(i);
            }
        }
    }, {
        key: "uniformFloat",
        value: function uniformFloat(variableName, val) {
            var _this5 = this;

            this._pass(variableName, function (l) {
                return _this5._gl.uniform1f(l, val);
            });
        }
    }, {
        key: "uniformFloatArray",
        value: function uniformFloatArray(variableName, val) {
            var _this6 = this;

            this._pass(variableName, function (l) {
                return _this6._gl.uniform1fv(l, val);
            });
        }
    }, {
        key: "uniformInt",
        value: function uniformInt(variableName, val) {
            var _this7 = this;

            this._pass(variableName, function (l) {
                return _this7._gl.uniform1i(l, val);
            });
        }
    }, {
        key: "uniformVector2",
        value: function uniformVector2(variableName, val) {
            var _this8 = this;

            this._pass(variableName, function (l) {
                return _this8._gl.uniform2f(l, val.X, val.Y);
            });
        }
    }, {
        key: "uniformIntVector2",
        value: function uniformIntVector2(variableName, val) {
            var _this9 = this;

            this._pass(variableName, function (l) {
                return _this9._gl.uniform2i(l, val.X, val.Y);
            });
        }
    }, {
        key: "uniformVector2Array",
        value: function uniformVector2Array(variableName, val) {
            var _this10 = this;

            this._pass(variableName, function (l) {
                return _this10._gl.uniform2fv(l, val);
            });
        }
    }, {
        key: "uniformVector3",
        value: function uniformVector3(variableName, val) {
            var _this11 = this;

            this._pass(variableName, function (l) {
                return _this11._gl.uniform3f(l, val.X, val.Y, val.Z);
            });
        }
    }, {
        key: "uniformIntVector3",
        value: function uniformIntVector3(variableName, val) {
            var _this12 = this;

            this._pass(variableName, function (l) {
                return _this12._gl.uniform3i(l, val.X, val.Y, val.Z);
            });
        }
    }, {
        key: "uniformVector3Array",
        value: function uniformVector3Array(variableName, val) {
            var _this13 = this;

            this._pass(variableName, function (l) {
                return _this13._gl.uniform3fv(l, val);
            });
        }
    }, {
        key: "uniformColor3",
        value: function uniformColor3(variableName, val) {
            var _this14 = this;

            this._pass(variableName, function (l) {
                return _this14._gl.uniform3f(l, val.R, val.G, val.B);
            });
        }
    }, {
        key: "uniformVector4",
        value: function uniformVector4(variableName, val) {
            var _this15 = this;

            this._pass(variableName, function (l) {
                return _this15._gl.uniform4f(l, val.X, val.Y, val.Z, val.W);
            });
        }
    }, {
        key: "uniformIntVector4",
        value: function uniformIntVector4(variableName, val) {
            var _this16 = this;

            this._pass(variableName, function (l) {
                return _this16._gl.uniform4f(l, val.X, val.Y, val.Z, val.W);
            });
        }
    }, {
        key: "uniformVector4Array",
        value: function uniformVector4Array(variableName, val) {
            var _this17 = this;

            this._pass(variableName, function (l) {
                return _this17._gl.uniform4fv(l, val);
            });
        }
    }, {
        key: "uniformColor4",
        value: function uniformColor4(variableName, val) {
            var _this18 = this;

            this._pass(variableName, function (l) {
                return _this18._gl.uniform4f(l, val.R, val.G, val.B, val.A);
            });
        }
    }, {
        key: "uniformTexture2D",
        value: function uniformTexture2D(variableName, val) {
            if (val.valid) {
                val.register(this._currentTextureRegister);
                this.uniformInt(variableName, this._currentTextureRegister);
                this._currentTextureRegister++;
            } else {
                console.warn("The texture assigned to '" + variableName + "' is not valid.");
            }
        }
    }, {
        key: "onUse",
        value: function onUse() {
            this._currentTextureRegister = 0;
        }
    }, {
        key: "_pass",
        value: function _pass(variableName, act) {
            var location = this.program.findUniformLocation(variableName);
            if (location) {
                act(location);
            }
        }
    }, {
        key: "_passAsArray",
        value: function _passAsArray(variableName, index, act) {
            var location = this.program.findUniformLocation(variableName + "[" + index + "]");
            if (location) {
                act(location);
            }
        }
    }]);

    return UniformProxy;
}();

exports.default = UniformProxy;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    Background: { priorty: 1000 },
    NoAlpha: { priorty: 2000 },
    UseAlpha: { priorty: 3000, descending: true },
    NoDepth: { priorty: 4000, descending: true },
    Overlay: { priorty: 5000, descending: true }
};

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RenderQueue = function () {
    function RenderQueue() {
        _classCallCheck(this, RenderQueue);

        this._rendeables = [];
    }

    _createClass(RenderQueue, [{
        key: "add",
        value: function add(rendarable) {
            this._rendeables.push({
                rendarable: rendarable,
                priortyCache: Number.MIN_VALUE
            });
        }
    }, {
        key: "remove",
        value: function remove(rendarable) {
            var index = 0;
            for (; index < this._rendeables.length; index++) {
                var r = this._rendeables[index];
                if (r.rendarable.index === rendarable.index) {
                    break;
                }
            }
            if (this._rendeables.length !== index) {
                this._rendeables.splice(index, 1);
            }
        }
    }, {
        key: "renderAll",
        value: function renderAll(args, cameraMoved, timer) {
            for (var i = 0; i < this._rendeables.length; i++) {
                this._rendeables[i].priortyCache = this._rendeables[i].rendarable.getRenderingPriorty(args.camera, cameraMoved, this._rendeables[i].priortyCache);
            }
            this._rendeables.sort(function (a, b) {
                return a.priortyCache - b.priortyCache;
            });
            this._rendeables.forEach(function (r) {
                r.rendarable.render(args);
            });
        }
    }]);

    return RenderQueue;
}();

exports.default = RenderQueue;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RenderQueueRegistry = function () {
    function RenderQueueRegistry() {
        _classCallCheck(this, RenderQueueRegistry);

        this._queues = [];
        this._renderables = [];
    }

    _createClass(RenderQueueRegistry, [{
        key: "registerQueue",
        value: function registerQueue(queue) {
            this._queues.push(queue);
            this._renderables.forEach(function (r) {
                return queue.add(r);
            });
        }
    }, {
        key: "unregisterQueue",
        value: function unregisterQueue(queue) {
            var index = this._queues.indexOf(queue);
            if (index > -1) {
                this._queues.splice(index, 1);
            }
        }
    }, {
        key: "addRenderable",
        value: function addRenderable(rendarable) {
            this._renderables.push(rendarable);
            this._queues.forEach(function (q) {
                return q.add(rendarable);
            });
            rendarable.setRenderableIndex(this._renderables.length);
        }
    }, {
        key: "removeRenderable",
        value: function removeRenderable(renderable) {
            var index = this._renderables.indexOf(renderable);
            if (index === -1) {
                return; // Could not find specified renderable
            }
            this._renderables.splice(index, 1);
            this._renderables.forEach(function (r, i) {
                r.setRenderableIndex(i + 1);
            });
            this._queues.forEach(function (q) {
                return q.remove(renderable);
            });
        }
    }, {
        key: "getByIndex",
        value: function getByIndex(index) {
            return this._renderables[index];
        }
    }]);

    return RenderQueueRegistry;
}();

exports.default = RenderQueueRegistry;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Status of parsing
 */
var CommentParsingStatus;
(function (CommentParsingStatus) {
    CommentParsingStatus[CommentParsingStatus["Default"] = 0] = "Default";
    CommentParsingStatus[CommentParsingStatus["SingleQuotationString"] = 1] = "SingleQuotationString";
    CommentParsingStatus[CommentParsingStatus["DoubleQuatationString"] = 2] = "DoubleQuatationString";
    CommentParsingStatus[CommentParsingStatus["MultilineComment"] = 3] = "MultilineComment";
    CommentParsingStatus[CommentParsingStatus["SinglelineComment"] = 4] = "SinglelineComment";
})(CommentParsingStatus || (CommentParsingStatus = {}));

var CommentRemover = function () {
    function CommentRemover(source) {
        _classCallCheck(this, CommentRemover);

        this.source = source;
        this._status = CommentParsingStatus.Default;
        this._afterSlush = false;
        this.removedSource = this._remove();
    }

    _createClass(CommentRemover, [{
        key: "_remove",
        value: function _remove() {
            var text = "";
            var last = void 0;
            for (var i = 0; i < this.source.length; i++) {
                var c = this.source.charAt(i);
                var cn = this.source.charAt(i + 1);
                if (c === "\\") {
                    this._afterSlush = true;
                    i++;
                    continue;
                }
                switch (this._status) {
                    case CommentParsingStatus.Default:
                        this._defaultParsing(c, cn);
                        break;
                }
                if (!this._isInComment || c === "\n") {
                    text += c;
                }
                switch (this._status) {
                    case CommentParsingStatus.MultilineComment:
                    case CommentParsingStatus.SinglelineComment:
                        this._checkCommentEnd(last, c);
                }
                last = c;
            }
            return text;
        }
    }, {
        key: "_defaultParsing",
        value: function _defaultParsing(current, next) {
            if (current === "'") {
                this._status = CommentParsingStatus.SingleQuotationString;
            }
            if (current === "\"") {
                this._status = CommentParsingStatus.DoubleQuatationString;
            }
            if (current === "/" && next === "/") {
                this._status = CommentParsingStatus.SinglelineComment;
            }
            if (current === "/" && next === "*") {
                this._status = CommentParsingStatus.MultilineComment;
            }
        }
    }, {
        key: "_checkCommentEnd",
        value: function _checkCommentEnd(last, current) {
            if (current === "\n" && this._status === CommentParsingStatus.SinglelineComment) {
                this._status = CommentParsingStatus.Default;
                return;
            }
            if (last === "*" && current === "/" && this._status === CommentParsingStatus.MultilineComment) {
                this._status = CommentParsingStatus.Default;
                return;
            }
        }
    }, {
        key: "_checkEndString",
        value: function _checkEndString(last, current) {
            if (this._afterSlush) {
                return;
            }
            if (current === "'" && this._status === CommentParsingStatus.SingleQuotationString) {
                this._status = CommentParsingStatus.Default;
                return;
            }
            if (current === '"' && this._status === CommentParsingStatus.DoubleQuatationString) {
                this._status = CommentParsingStatus.Default;
                return;
            }
        }
    }, {
        key: "_isInComment",
        get: function get() {
            return this._status === CommentParsingStatus.MultilineComment || this._status === CommentParsingStatus.SinglelineComment;
        }
    }], [{
        key: "remove",
        value: function remove(source) {
            var remover = new CommentRemover(source);
            return remover.removedSource;
        }
    }]);

    return CommentRemover;
}();

exports.default = CommentRemover;

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ImportResolver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _CacheResolver2 = __webpack_require__(20);

var _CacheResolver3 = _interopRequireDefault(_CacheResolver2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

var ImportResolver = exports.ImportResolver = function (_CacheResolver) {
    _inherits(ImportResolver, _CacheResolver);

    function ImportResolver() {
        _classCallCheck(this, ImportResolver);

        var _this = _possibleConstructorReturn(this, (ImportResolver.__proto__ || Object.getPrototypeOf(ImportResolver)).call(this, function (str) {
            var regex = /^https?:\/\/.*/gm;
            return regex.test(str) ? ImportResolver._toAbsolute(str) : str;
        }));

        _this.staticImports = {};
        return _this;
    }

    _createClass(ImportResolver, [{
        key: "resolve",
        value: function resolve(path) {
            var _this2 = this;

            return _get(ImportResolver.prototype.__proto__ || Object.getPrototypeOf(ImportResolver.prototype), "resolve", this).call(this, path, function (abs) {
                return _this2._resolve(path);
            });
        }
    }, {
        key: "_resolve",
        value: function _resolve(path) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (!(typeof this.staticImports[path] === "string")) {
                                    _context.next = 4;
                                    break;
                                }

                                return _context.abrupt("return", this.staticImports[path]);

                            case 4:
                                _context.next = 6;
                                return this._fromExternal(path);

                            case 6:
                                return _context.abrupt("return", _context.sent);

                            case 7:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }, {
        key: "_fromExternal",
        value: function _fromExternal(path) {
            return new Promise(function (resolve, reject) {
                var xhr = new XMLHttpRequest();
                xhr.open("GET", path);
                xhr.onload = function (v) {
                    resolve(xhr.responseText);
                };
                xhr.onerror = function (e) {
                    reject(e);
                };
                xhr.send();
            });
        }
    }], [{
        key: "_toAbsolute",
        value: function _toAbsolute(href) {
            var link = document.createElement("a");
            link.href = href;
            return link.protocol + "//" + link.host + link.pathname + link.search + link.hash;
        }
    }]);

    return ImportResolver;
}(_CacheResolver3.default);

exports.default = new ImportResolver();

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    attribute: {
        position: "POSITION",
        normal: "NORMAL",
        texCoord: "TEXCOORD"
    },
    uniform: {
        _time: "TIME",
        _viewportSize: "VIEWPORT_SIZE",
        _matL: "LOCAL",
        _matM: "MODEL",
        _matV: "VIEW",
        _matP: "PROJECTION",
        _matVM: "MODELVIEW",
        _matPVM: "MODELVIEWPROJECTION",
        _matIM: "MODELINVERSE",
        _matIV: "VIEWINVERSE",
        _matIP: "PROJECTIONINVERSE",
        _matIVM: "MODELVIEWINVERSE",
        _matIPVM: "MODELVIEWPROJECTIONINVERSE",
        _matITM: "MODELINVERMousETRANSPOSE",
        _matITVM: "MODELVIEWINVERSETRANSPOSE"
    }
};

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _HashCalculator = __webpack_require__(8);

var _HashCalculator2 = _interopRequireDefault(_HashCalculator);

var _SortTransformUtility = __webpack_require__(86);

var _SortTransformUtility2 = _interopRequireDefault(_SortTransformUtility);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SortParser = function () {
    function SortParser() {
        _classCallCheck(this, SortParser);
    }

    _createClass(SortParser, null, [{
        key: "parse",
        value: function parse(source) {
            var sourceHash = _HashCalculator2.default.calcHash(source);
            if (SortParser._parsedCache[sourceHash] !== void 0) {
                return new Promise(function (resolve, reject) {
                    resolve(SortParser._parsedCache[sourceHash]);
                });
            } else {
                return SortParser._parse(source).then(function (v) {
                    SortParser._parsedCache[source] = v;
                    return v;
                });
            }
        }
    }, {
        key: "_parse",
        value: function _parse(source) {
            return new Promise(function (resolve, reject) {
                var result = {};
                _SortTransformUtility2.default.resolveImports(_SortTransformUtility2.default.removeComment(source)).then(function (uncommented) {
                    try {
                        var techniqueSources = _SortTransformUtility2.default.separateTechniqueSource(uncommented);
                        for (var key in techniqueSources) {
                            result[key] = SortParser._parseTechnique(techniqueSources[key]);
                        }
                        resolve(result);
                    } catch (e) {
                        reject(e);
                    }
                });
            });
        }
    }, {
        key: "_parseTechnique",
        value: function _parseTechnique(techniqueSource) {
            var drawOrder = _SortTransformUtility2.default.fetchDrawOrder(techniqueSource) || "Auto";
            var passSources = _SortTransformUtility2.default.separatePassSource(techniqueSource);
            var passes = new Array(passSources.length);
            for (var i = 0; i < passSources.length; i++) {
                passes[i] = SortParser._parsePassSource(passSources[i]);
            }
            return {
                drawOrder: drawOrder,
                passes: passes
            };
        }
    }, {
        key: "_parsePassSource",
        value: function _parsePassSource(passSource) {
            var shaderSource = _SortTransformUtility2.default.removePreferences(passSource);
            var attributes = _SortTransformUtility2.default.parseVariables(passSource, "attribute");
            var uniforms = _SortTransformUtility2.default.parseVariables(passSource, "uniform");
            var macros = _SortTransformUtility2.default.parseMacros(passSource);
            var states = _SortTransformUtility2.default.parsePreferences(passSource);
            return {
                fragment: shaderSource,
                vertex: shaderSource,
                attributes: attributes,
                uniforms: uniforms,
                macros: macros,
                states: states
            };
        }
    }]);

    return SortParser;
}();
/**
 * Cache to prevent double loading
 */


SortParser._parsedCache = {};
exports.default = SortParser;

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
function asGLConstantArgs(args, length) {
    if (args.length !== length) {
        throw new Error("Unmatching argument count on preference parse");
    }
    return args.map(function (arg) {
        var argNum = WebGLRenderingContext[arg];
        if (typeof argNum !== "number") {
            throw new Error("Unknown WebGL constant " + arg + " was specified");
        }
        return argNum;
    });
}
function asNumberArgs(args, length) {
    if (args.length !== length) {
        throw new Error("Unmatching argument count on preference parse");
    }
    return args.map(function (arg) {
        var argNum = Number.parseFloat(arg);
        if (isNaN(argNum)) {
            throw new Error("Failed to parse number on preference parsing");
        }
        return argNum;
    });
}
function asBooleanArgs(args, length) {
    if (args.length !== length) {
        throw new Error("Unmatching argument count on preference parse");
    }
    return args.map(function (arg) {
        if (arg !== "true" && arg !== "false") {
            throw new Error(arg + " is not boolean");
        }
        return arg === "true";
    });
}
exports.default = {
    Enable: function Enable(state, args) {
        var enableTarget = WebGLRenderingContext[args[0]];
        if (typeof enableTarget !== "number") {
            throw new Error("Unknown WebGL constant \"" + args[0] + "\" was specified on @Enable");
        }
        state.enable.push(enableTarget);
    },
    Disable: function Disable(state, args) {
        var disableTarget = WebGLRenderingContext[args[0]];
        if (typeof disableTarget !== "number") {
            throw new Error("Unknown WebGL constant \"" + args[0] + "\" was specified on @Disable");
        }
        var index = state.enable.indexOf(disableTarget);
        if (index !== -1) {
            state.enable.splice(index, 1);
        }
    },
    BlendFunc: function BlendFunc(state, args) {
        var config = asGLConstantArgs(args, 2);
        state.functions.blendFuncSeparate = [config[0], config[1], config[0], config[1]];
    },
    BlendFuncSeparate: function BlendFuncSeparate(state, args) {
        state.functions.blendFuncSeparate = asGLConstantArgs(args, 4);
    },
    BlendEquation: function BlendEquation(state, args) {
        var config = asGLConstantArgs(args, 1);
        state.functions.blendEquationSeparate = [config[0], config[0]];
    },
    BlendEquationSeparate: function BlendEquationSeparate(state, args) {
        state.functions.blendEquationSeparate = asGLConstantArgs(args, 4);
    },
    BlendColor: function BlendColor(state, args) {
        state.functions.blendColor = asNumberArgs(args, 4);
    },
    ColorMask: function ColorMask(state, args) {
        state.functions.colorMask = asBooleanArgs(args, 4);
        state.enable.push(WebGLRenderingContext.COLOR_WRITEMASK);
    },
    CullFace: function CullFace(state, args) {
        state.functions.cullFace = asGLConstantArgs(args, 1);
    },
    DepthFunc: function DepthFunc(state, args) {
        state.functions.depthFunc = asGLConstantArgs(args, 1);
    },
    DepthRange: function DepthRange(state, args) {
        state.functions.depthRange = asNumberArgs(args, 2);
    },
    FrontFace: function FrontFace(state, args) {
        state.functions.frontFace = asGLConstantArgs(args, 1);
    },
    LineWidth: function LineWidth(state, args) {
        state.functions.lineWidth = asNumberArgs(args, 1);
    },
    PolygonOffset: function PolygonOffset(state, args) {
        state.functions.polygonOffset = asNumberArgs(args, 2);
        state.enable.push(WebGLRenderingContext.POLYGON_OFFSET_FILL);
    },
    Scissor: function Scissor(state, args) {
        state.functions.scissor = asNumberArgs(args, 4);
        state.enable.push(WebGLRenderingContext.SCISSOR_TEST);
    },
    ExposeMacro: function ExposeMacro() {
        return;
    },
    ReferMacro: function ReferMacro() {
        return;
    }
};

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Preferences = __webpack_require__(85);

var _Preferences2 = _interopRequireDefault(_Preferences);

var _TypeToConstant = __webpack_require__(87);

var _TypeToConstant2 = _interopRequireDefault(_TypeToConstant);

var _NameSemanticsPair = __webpack_require__(83);

var _NameSemanticsPair2 = _interopRequireDefault(_NameSemanticsPair);

var _ImportResolver = __webpack_require__(82);

var _ImportResolver2 = _interopRequireDefault(_ImportResolver);

var _CommentRemover = __webpack_require__(81);

var _CommentRemover2 = _interopRequireDefault(_CommentRemover);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

var SortTransformUtility = function () {
    function SortTransformUtility() {
        _classCallCheck(this, SortTransformUtility);
    }

    _createClass(SortTransformUtility, null, [{
        key: "separateTechniqueSource",

        /**
         * Separate .sort shader text with @Technique statements.
         * @param  {string} uncommentedSource [description]
         * @return {[type]}                   [description]
         */
        value: function separateTechniqueSource(uncommentedSource) {
            if (uncommentedSource.indexOf("@Technique") === -1) {
                return { default: uncommentedSource };
            } else {
                var result = {};
                var regex = /@Technique\s+([a-zA-Z0-9_]+)/g;
                var regexResult = void 0;
                while (regexResult = regex.exec(uncommentedSource)) {
                    var techniqueName = regexResult[1];
                    if (result[techniqueName] !== void 0) {
                        throw new Error("Technique name " + techniqueName + " is dupelicated");
                    } else {
                        result[techniqueName] = SortTransformUtility.obtainNextSection(uncommentedSource, "{", "}", regexResult.index + regexResult.length);
                    }
                }
                return result;
            }
        }
        /**
         * Separate technique source with @Pass statement.
         * @param  {string}   uncommentedSource [description]
         * @return {string[]}                   [description]
         */

    }, {
        key: "separatePassSource",
        value: function separatePassSource(uncommentedSource) {
            if (uncommentedSource.indexOf("@Pass") === -1) {
                return [uncommentedSource];
            } else {
                var result = [];
                var regex = /@Pass/g;
                var regexResult = void 0;
                while (regexResult = regex.exec(uncommentedSource)) {
                    result.push(SortTransformUtility.obtainNextSection(uncommentedSource, "{", "}", regexResult.index + regexResult.length));
                }
                return result;
            }
        }
        /**
         * Fetch draw order preference from technique source.
         * @param  {string} uncommentedTechniqueSource [description]
         * @return {string}                            [description]
         */

    }, {
        key: "fetchDrawOrder",
        value: function fetchDrawOrder(uncommentedTechniqueSource) {
            var regexResult = /@DrawOrder\s*\((\w+)\)/g.exec(uncommentedTechniqueSource);
            if (regexResult) {
                var firstPassIndex = uncommentedTechniqueSource.indexOf("@Pass");
                if (firstPassIndex !== -1 && firstPassIndex < regexResult.index) {
                    throw new Error("DrawOrder preference should be just under @Technique section");
                }
                return regexResult[1];
            }
            return null;
        }
    }, {
        key: "removePreferences",
        value: function removePreferences(source) {
            var regex = /@.+$/gm;
            return source.replace(regex, "");
        }
    }, {
        key: "resolveImports",
        value: function resolveImports(uncommentedSource) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                var regexResult, importContent;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (false) {
                                    _context.next = 17;
                                    break;
                                }

                                regexResult = /\s*@import\s+"([^"]+)"/.exec(uncommentedSource);

                                if (regexResult) {
                                    _context.next = 4;
                                    break;
                                }

                                return _context.abrupt("break", 17);

                            case 4:
                                importContent = void 0;
                                _context.t0 = SortTransformUtility;
                                _context.next = 8;
                                return _ImportResolver2.default.resolve(regexResult[1]);

                            case 8:
                                _context.t1 = _context.sent;
                                _context.next = 11;
                                return _context.t0.resolveImports.call(_context.t0, _context.t1);

                            case 11:
                                importContent = _context.sent;

                                if (!(typeof importContent !== "string")) {
                                    _context.next = 14;
                                    break;
                                }

                                throw new Error("Required shader chunk '" + regexResult[1] + "' was not found!!");

                            case 14:
                                uncommentedSource = uncommentedSource.replace(regexResult[0], "\n" + importContent + "\n");
                                _context.next = 0;
                                break;

                            case 17:
                                return _context.abrupt("return", uncommentedSource);

                            case 18:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }, {
        key: "parseMacros",
        value: function parseMacros(source) {
            var result = {};
            var regex = /@ExposeMacro\s*\(\s*([a-zA-Z0-9_]+)\s*,\s*([a-zA-Z0-9_]+)\s*,\s*([a-zA-Z0-9_]+)\s*,\s*([a-zA-Z0-9_]+)\s*\)/g;
            var regexResult = void 0;
            while (regexResult = regex.exec(source)) {
                if (!regexResult[1] || !regexResult[2] || !regexResult[3] || !regexResult[4]) {
                    throw new Error("Invalid parameter was passed on @ExposeMacro preference on '" + regexResult[0] + "'");
                }
                if (regexResult[1] !== "bool" && regexResult[1] !== "int") {
                    throw new Error("Invalid macro type \"" + regexResult[1] + "\". regexResult type must be int or bool");
                }
                var value = void 0;
                if (regexResult[1] === "bool") {
                    if (regexResult[4] !== "true" && regexResult[4] !== "false") {
                        throw new Error("Default macro value \"" + regexResult[4] + "\" is invalid for bool type macro. Must be true or false");
                    }
                    value = regexResult[4] === "true";
                } else {
                    value = parseFloat(regexResult[4]);
                    if (isNaN(value)) {
                        throw new Error("Default macro value \"" + regexResult[4] + "\" is invalid for int type macro. Must be a number.");
                    }
                }
                result[regexResult[2]] = {
                    name: regexResult[2],
                    macroName: regexResult[3],
                    type: regexResult[1],
                    value: value,
                    target: "expose"
                };
            }
            regex = /@ReferMacro\s*\(\s*([a-zA-Z0-9_]+)\s*,\s*(.+)\s*\)/g;
            while (regexResult = regex.exec(source)) {
                if (!regexResult[1] || !regexResult[2]) {
                    throw new Error("Invalid parameter was passed on @ReferMacro preference on '" + regexResult[0] + "'");
                }
                result[regexResult[1]] = {
                    name: regexResult[1],
                    macroName: regexResult[1],
                    value: regexResult[2],
                    target: "refer"
                };
            }
            return result;
        }
    }, {
        key: "parsePreferences",
        value: function parsePreferences(source) {
            var result = {
                enable: [WebGLRenderingContext.CULL_FACE, WebGLRenderingContext.BLEND, WebGLRenderingContext.DEPTH_TEST],
                functions: {
                    blendColor: [0, 0, 0, 0],
                    cullFace: [WebGLRenderingContext.BACK],
                    blendFuncSeparate: [WebGLRenderingContext.ONE, WebGLRenderingContext.ZERO, WebGLRenderingContext.ONE, WebGLRenderingContext.ZERO],
                    blendEquationSeparate: [WebGLRenderingContext.FUNC_ADD, WebGLRenderingContext.FUNC_ADD],
                    lineWidth: [1],
                    frontFace: [WebGLRenderingContext.CCW],
                    depthRange: [0, 1],
                    depthFunc: [WebGLRenderingContext.LESS]
                }
            };
            var regex = /@([A-Za-z]+)\(([\sa-zA-Z_0-9,\.\-]*)\)/g;
            var regexResult = void 0;
            while (regexResult = regex.exec(source)) {
                var prefParser = _Preferences2.default[regexResult[1]];
                if (!prefParser) {
                    throw new Error("Unknown pass preference " + regexResult[1] + " was specified.");
                }
                prefParser(result, regexResult[2].split(",").map(function (m) {
                    return m.trim();
                }));
            }
            return result;
        }
    }, {
        key: "asValidJSON",
        value: function asValidJSON(json) {
            var regex = /([\{,]\s*)([a-zA-Z0-9_]+)(\s*\:)/gm;
            var result = json.replace(regex, '$1"$2"$3');
            return result;
        }
    }, {
        key: "removeComment",
        value: function removeComment(source) {
            return _CommentRemover2.default.remove(source);
        }
    }, {
        key: "obtainNextSection",
        value: function obtainNextSection(source, begin, end, offset) {
            var beginningPosition = source.indexOf(begin, offset);
            if (beginningPosition === -1) {
                throw new Error("Begining section charactor '" + begin + "' was not found.");
            }
            if (begin.length > 1 || end.length > 1) {
                throw new Error("Invalid parameter");
            }
            var matchingCount = 1;
            var beginCode = begin.charCodeAt(0);
            var endCode = end.charCodeAt(0);
            for (var i = beginningPosition + 1; i < source.length; i++) {
                var current = source.charCodeAt(i);
                if (current === beginCode) {
                    matchingCount++;
                } else if (current === endCode) {
                    matchingCount--;
                }
                if (matchingCount === 0) {
                    return source.substring(beginningPosition + 1, i);
                }
            }
            throw new Error("Invalid bracket matching");
        }
    }, {
        key: "generateVariableFetchRegex",
        value: function generateVariableFetchRegex(variableType) {
            return new RegExp("(?:@([a-zA-Z0-9_]+)?(\\{.+\\})?)?\\s*" + variableType + "\\s+(?:(lowp|mediump|highp)\\s+)?([a-z0-9A-Z]+)\\s+([a-zA-Z0-9_]+)(?:\\s*\\[\\s*([a-zA-Z0-9_]+)\\s*\\]\\s*)?\\s*;", "g");
        }
    }, {
        key: "parseVariables",
        value: function parseVariables(source, variableType) {
            var result = {};
            var regex = SortTransformUtility.generateVariableFetchRegex(variableType);
            var regexResult = void 0;
            while (regexResult = regex.exec(source)) {
                var name = regexResult[5];
                var type = _TypeToConstant2.default[regexResult[4]];
                var precision = regexResult[3];
                var rawAnnotations = regexResult[2];
                var isArray = regexResult[6] !== void 0;
                var arrayCount = undefined;
                var semantic = regexResult[1];
                if (!semantic) {
                    semantic = _NameSemanticsPair2.default[variableType][name];
                    if (!semantic) {
                        semantic = variableType === "uniform" ? "USER_VALUE" : name.toUpperCase();
                    }
                }
                if (isArray) {
                    arrayCount = parseInt(regexResult[6], 10);
                    if (isNaN(arrayCount)) {
                        arrayCount = regexResult[6];
                    }
                }
                result[name] = {
                    semantic: semantic,
                    name: name,
                    type: type,
                    precision: precision,
                    attributes: rawAnnotations ? JSON.parse(SortTransformUtility.asValidJSON(rawAnnotations)) : {},
                    isArray: isArray,
                    count: arrayCount
                };
            }
            return result;
        }
    }]);

    return SortTransformUtility;
}();

exports.default = SortTransformUtility;

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
if (!WebGLRenderingContext.ONE) {
    throw new Error("WebGLRenderingContext constant can not be retrived!");
}
var gl = WebGLRenderingContext;
var result = {
    vec2: gl.FLOAT_VEC2,
    vec3: gl.FLOAT_VEC3,
    vec4: gl.FLOAT_VEC4,
    ivec2: gl.INT_VEC2,
    ivec3: gl.INT_VEC3,
    ivec4: gl.INT_VEC4,
    bvec2: gl.BOOL_VEC2,
    bvec3: gl.BOOL_VEC3,
    bvec4: gl.BOOL_VEC4,
    float: gl.FLOAT,
    int: gl.INT,
    bool: gl.BOOL,
    sampler2D: gl.SAMPLER_2D,
    samplerCube: gl.SAMPLER_CUBE,
    mat4: gl.FLOAT_MAT4,
    mat3: gl.FLOAT_MAT3,
    mat2: gl.FLOAT_MAT2
};
exports.default = result;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Timer = function () {
    function Timer() {
        _classCallCheck(this, Timer);

        this._accumlatedSkipFrame = 0;
        this._frameCount = 0;
        this.timeScale = 1;
        this.fpsRestriction = 60;
    }

    _createClass(Timer, [{
        key: "internalUpdate",

        /**
         * Do not call this method manually.
         * This method is only use for internal procedure in framework.
         * @return {[type]} [description]
         */
        value: function internalUpdate() {
            this._frameCount++;
            var time = Date.now();
            if (this._shouldUpdate(time)) {
                this._updateTimer(time);
                return true;
            } else {
                return false;
            }
        }
    }, {
        key: "_shouldUpdate",
        value: function _shouldUpdate(time) {
            if (this._time === void 0) {
                this._unrestrictedLastRealTime = time;
                return true; // first frame
            } else {
                var realDelta = time - this._unrestrictedLastRealTime;
                var idealDelta = 1000 / this.fpsRestriction;
                this._unrestrictedLastRealTime = time;
                if (Math.abs(idealDelta - realDelta * 2.0 - this._accumlatedSkipFrame) < Math.abs(idealDelta - realDelta - this._accumlatedSkipFrame)) {
                    this._accumlatedSkipFrame += realDelta;
                    return false;
                } else {
                    this._accumlatedSkipFrame = 0;
                    return true;
                }
            }
        }
    }, {
        key: "_updateTimer",
        value: function _updateTimer(time) {
            if (this._lastRealTime === undefined) {
                this._time = 0;
                this._deltaTime = 0;
            } else {
                this._deltaTime = time - this._lastRealTime;
                this._time += this.timeScale * this._deltaTime;
            }
            this._lastRealTime = time;
            if (this._lastFPS === undefined) {
                if (this.deltaTime !== 0) {
                    this._lastFPS = 1000 / this.deltaTime;
                }
            } else {
                this._lastFPS = (this._lastFPS + 1000 / this.deltaTime) / 2;
            }
        }
    }, {
        key: "deltaTime",
        get: function get() {
            return this._deltaTime;
        }
    }, {
        key: "time",
        get: function get() {
            return this._time;
        }
    }, {
        key: "timeInSecound",
        get: function get() {
            return this._time / 1000;
        }
    }, {
        key: "frameCount",
        get: function get() {
            return this._frameCount;
        }
    }, {
        key: "FPS",
        get: function get() {
            return this._lastFPS ? this._lastFPS.toFixed(2) : Number.NaN;
        }
    }]);

    return Timer;
}();

exports.default = Timer;

/***/ }),
/* 89 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math.AABB;

/***/ }),
/* 90 */
/***/ (function(module, exports) {

module.exports = "/*Header start*/\n// helper macros\n#ifdef FS\n  #define FS_PREC(prec,type) precision prec type;\n  #define VS_PREC(prec,type)\n#endif\n#ifdef VS\n#define VS_PREC(prec,type) precision prec type;\n#define FS_PREC(prec,type)\n#endif\n// constants\n#define PI 3.141592653589793\n#define E 2.718281828459045\n#define LN2 0.6931471805599453\n#define LN10 2.302585092994046\n#define LOG2E 1.4426950408889634\n#define LOG10E 0.4342944819032518\n#define SQRT2 1.4142135623730951\n#define SQRT1_2 0.7071067811865476\n\n/*Header end*/\n"

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Matrix = __webpack_require__(9);

var _Matrix2 = _interopRequireDefault(_Matrix);

var _UniformResolverRegistry = __webpack_require__(7);

var _UniformResolverRegistry2 = _interopRequireDefault(_UniformResolverRegistry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_UniformResolverRegistry2.default.add("MODELVIEWPROJECTION", function (valInfo) {
    return function (proxy, args) {
        if (!args.transform) {
            proxy.uniformMatrix(valInfo.name, _Matrix2.default.identity());
            return;
        }
        proxy.uniformMatrix(valInfo.name, args.transform.calcPVM(args.camera));
    };
});
_UniformResolverRegistry2.default.add("LOCAL", function (valInfo) {
    return function (proxy, args) {
        if (!args.transform) {
            proxy.uniformMatrix(valInfo.name, _Matrix2.default.identity());
            return;
        }
        proxy.uniformMatrix(valInfo.name, args.transform.localTransform);
    };
});
_UniformResolverRegistry2.default.add("MODEL", function (valInfo) {
    return function (proxy, args) {
        if (!args.transform) {
            proxy.uniformMatrix(valInfo.name, _Matrix2.default.identity());
            return;
        }
        proxy.uniformMatrix(valInfo.name, args.transform.globalTransform);
    };
});
_UniformResolverRegistry2.default.add("MODELVIEW", function (valInfo) {
    return function (proxy, args) {
        if (!args.transform) {
            proxy.uniformMatrix(valInfo.name, _Matrix2.default.identity());
            return;
        }
        proxy.uniformMatrix(valInfo.name, args.camera.ViewMatrix.multiplyWith(args.transform.globalTransform));
    };
});
_UniformResolverRegistry2.default.add("VIEW", function (valInfo) {
    return function (proxy, args) {
        if (!args.transform) {
            proxy.uniformMatrix(valInfo.name, _Matrix2.default.identity());
            return;
        }
        proxy.uniformMatrix(valInfo.name, args.camera.ViewMatrix);
    };
});
_UniformResolverRegistry2.default.add("PROJECTION", function (valInfo) {
    return function (proxy, args) {
        if (!args.transform) {
            proxy.uniformMatrix(valInfo.name, _Matrix2.default.identity());
            return;
        }
        proxy.uniformMatrix(valInfo.name, args.camera.ProjectionMatrix);
    };
});
_UniformResolverRegistry2.default.add("MODELINVERSE", function (valInfo) {
    return function (proxy, args) {
        if (!args.transform) {
            proxy.uniformMatrix(valInfo.name, _Matrix2.default.identity());
            return;
        }
        proxy.uniformMatrix(valInfo.name, _Matrix2.default.inverse(args.transform.globalTransform));
    };
});
_UniformResolverRegistry2.default.add("VIEWINVERSE", function (valInfo) {
    return function (proxy, args) {
        proxy.uniformMatrix(valInfo.name, _Matrix2.default.inverse(args.camera.ViewMatrix));
    };
});
_UniformResolverRegistry2.default.add("PROJECTIONINVERSE", function (valInfo) {
    return function (proxy, args) {
        if (!args.transform) {
            proxy.uniformMatrix(valInfo.name, _Matrix2.default.identity());
            return;
        }
        proxy.uniformMatrix(valInfo.name, args.camera.InvProjectionMatrix);
    };
});
_UniformResolverRegistry2.default.add("MODELVIEWINVERSE", function (valInfo) {
    return function (proxy, args) {
        if (!args.transform) {
            proxy.uniformMatrix(valInfo.name, _Matrix2.default.identity());
            return;
        }
        proxy.uniformMatrix(valInfo.name, _Matrix2.default.inverse(args.transform.calcVM(args.camera)));
    };
});
_UniformResolverRegistry2.default.add("MODELVIEWPROJECTIONINVERSE", function (valInfo) {
    return function (proxy, args) {
        if (!args.transform) {
            proxy.uniformMatrix(valInfo.name, _Matrix2.default.identity());
            return;
        }
        proxy.uniformMatrix(valInfo.name, _Matrix2.default.inverse(args.transform.calcPVM(args.camera)));
    };
});
_UniformResolverRegistry2.default.add("MODELINVERSETRANSPOSE", function (valInfo) {
    return function (proxy, args) {
        if (!args.transform) {
            proxy.uniformMatrix(valInfo.name, _Matrix2.default.identity());
            return;
        }
        proxy.uniformMatrix(valInfo.name, _Matrix2.default.transpose(_Matrix2.default.inverse(args.transform.globalTransform)));
    };
});
_UniformResolverRegistry2.default.add("MODELVIEWINVERSETRANSPOSE", function (valInfo) {
    return function (proxy, args) {
        if (!args.transform) {
            proxy.uniformMatrix(valInfo.name, _Matrix2.default.identity());
            return;
        }
        proxy.uniformMatrix3(valInfo.name, _Matrix2.default.transpose(_Matrix2.default.inverse(args.transform.calcVM(args.camera))));
    };
});
exports.default = null;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MeshIndexCalculator = __webpack_require__(27);

var _MeshIndexCalculator2 = _interopRequireDefault(_MeshIndexCalculator);

var _Vector = __webpack_require__(100);

var _Vector2 = _interopRequireDefault(_Vector);

var _Vector3 = __webpack_require__(11);

var _Vector4 = _interopRequireDefault(_Vector3);

var _UniformResolverRegistry = __webpack_require__(7);

var _UniformResolverRegistry2 = _interopRequireDefault(_UniformResolverRegistry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_UniformResolverRegistry2.default.add("VIEWPORT", function (valInfo) {
    return function (proxy, args) {
        var vp = args.viewport;
        proxy.uniformVector4(valInfo.name, new _Vector4.default(vp.Left, vp.Top, vp.Width, vp.Height));
    };
});
_UniformResolverRegistry2.default.add("VIEWPORT_SIZE", function (valInfo) {
    return function (proxy, args) {
        var vp = args.viewport;
        proxy.uniformVector2(valInfo.name, new _Vector2.default(vp.Width, vp.Height));
    };
});
_UniformResolverRegistry2.default.add("TIME", function (valInfo) {
    return function (proxy, args) {
        proxy.uniformFloat(valInfo.name, Date.now() % 1.0e7);
    };
});
_UniformResolverRegistry2.default.add("HAS_TEXTURE", function (valInfo, material) {
    var sampler = valInfo.attributes["sampler"];
    if (!sampler) {
        throw new Error("The variable having HAS_TEXTURE as semantics must have sampler attribute");
    }
    return function (proxy, args) {
        var hasTexture = !!material.arguments[sampler] && !!material.arguments[sampler].get(args.buffers);
        proxy.uniformBool(valInfo.name, hasTexture);
    };
});
_UniformResolverRegistry2.default.add("CAMERA_POSITION", function (valInfo) {
    return function (proxy, args) {
        proxy.uniformVector3(valInfo.name, args.camera.transform.globalPosition);
    };
});
_UniformResolverRegistry2.default.add("CAMERA_DIRECTION", function (valInfo) {
    return function (proxy, args) {
        proxy.uniformVector3(valInfo.name, args.camera.transform.forward);
    };
});
_UniformResolverRegistry2.default.add("MESH_INDEX", function (valInfo) {
    return function (proxy, args) {
        var index = args.renderable.index;
        proxy.uniformVector4(valInfo.name, _MeshIndexCalculator2.default.fromIndex(index));
    };
});
exports.default = null;

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Texture2D = __webpack_require__(1);

var _Texture2D2 = _interopRequireDefault(_Texture2D);

var _UniformResolverRegistry = __webpack_require__(7);

var _UniformResolverRegistry2 = _interopRequireDefault(_UniformResolverRegistry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var gl = WebGLRenderingContext;
var _userValueRegisterers = {
    array: {},
    single: {}
};
_UniformResolverRegistry2.default.add("USER_VALUE", function (valInfo, material) {
    var register = void 0;
    if (valInfo.count) {
        register = _userValueRegisterers.array[valInfo.type];
        if (!register) {
            throw new Error("No user_value registerer was registered for " + valInfo.type + "[]");
        }
    } else {
        register = _userValueRegisterers.single[valInfo.type];
        if (!register) {
            throw new Error("No user_value registerer was registered for " + valInfo.type);
        }
    }
    return register(valInfo, material);
});
function basicRegister(type, isArray, converter, defaultValue, _register, update) {
    var registerTarget = void 0;
    if (isArray) {
        registerTarget = _userValueRegisterers.array;
    } else {
        registerTarget = _userValueRegisterers.single;
    }
    registerTarget[type] = function (valInfo, material) {
        material.addArgument(valInfo.name, {
            converter: converter,
            default: valInfo.attributes["default"] ? valInfo.attributes["default"] : defaultValue
        });
        var updator = update ? function (p, n, o) {
            update(valInfo, p, n, o);
        } : undefined;
        return {
            register: function register(proxy, args) {
                _register(proxy, valInfo.name, material.arguments[valInfo.name], args);
            },
            dispose: function dispose() {
                material.deleteArgument(valInfo.name);
            },
            update: updator
        };
    };
}
basicRegister(gl.FLOAT, false, "Number", 0, function (proxy, name, value) {
    return proxy.uniformFloat(name, value);
});
basicRegister(gl.INT, false, "Number", 0, function (proxy, name, value) {
    return proxy.uniformInt(name, value);
});
basicRegister(gl.BOOL, false, "Boolean", false, function (proxy, name, value) {
    return proxy.uniformBool(name, value);
});
basicRegister(gl.INT_VEC2, false, "Vector2", [0, 0], function (proxy, name, value) {
    return proxy.uniformVector2(name, value);
});
basicRegister(gl.INT_VEC3, false, "Vector3", [0, 0, 0], function (proxy, name, value) {
    return proxy.uniformVector3(name, value);
});
basicRegister(gl.INT_VEC4, false, "Vector4", [0, 0, 0, 0], function (proxy, name, value) {
    return proxy.uniformVector4(name, value);
});
basicRegister(gl.FLOAT_VEC2, false, "Vector2", [0, 0], function (proxy, name, value) {
    return proxy.uniformVector2(name, value);
});
basicRegister(gl.FLOAT_MAT4, true, "Object", [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], function (proxy, name, value) {
    return proxy.uniformMatrixArray(name, value);
});
basicRegister(gl.SAMPLER_2D, false, "Texture", null, function (proxy, name, value, args) {
    var texture = void 0;
    if (value) {
        var fetched = value.get(args.buffers);
        if (fetched.valid) {
            texture = fetched;
        }
    }
    if (!texture) {
        texture = _Texture2D2.default.defaultTextures.get(proxy.program.gl);
    }
    proxy.uniformTexture2D(name, texture);
}, function (v, p, n, o) {
    if (v.attributes["flag"] === void 0) return;
    var used = false;
    if (n) {
        if (n.isFunctionalProxy) {
            used = true;
        } else {
            var fetched = n.get({});
            if (fetched.valid) {
                used = true;
            } else {
                fetched.validPromise.then(function () {
                    p.setMacro(v.attributes["flag"], true);
                });
            }
        }
    }
    p.setMacro(v.attributes["flag"], used);
});
// vec3 or vec4 should consider the arguments are color or vector.
_userValueRegisterers.single[gl.FLOAT_VEC3] = function (valInfo, material) {
    var isColor = valInfo.attributes["type"] === "color";
    var attrDefault = valInfo.attributes["default"];
    var defaultValue = attrDefault ? attrDefault : isColor ? [1, 1, 1] : [0, 0, 0];
    material.addArgument(valInfo.name, {
        converter: isColor ? "Color3" : "Vector3",
        default: defaultValue
    });
    return {
        register: isColor ? function (proxy, args) {
            proxy.uniformColor3(valInfo.name, material.arguments[valInfo.name]);
        } : function (proxy, args) {
            proxy.uniformVector3(valInfo.name, material.arguments[valInfo.name]);
        },
        dispose: function dispose() {
            material.deleteArgument(valInfo.name);
        }
    };
};
_userValueRegisterers.single[gl.FLOAT_VEC4] = function (valInfo, material) {
    var isColor = valInfo.attributes["type"] === "color";
    var attrDefault = valInfo.attributes["default"];
    var defaultValue = attrDefault ? attrDefault : isColor ? [1, 1, 1, 1] : [0, 0, 0, 0];
    material.addArgument(valInfo.name, {
        converter: isColor ? "Color4" : "Vector4",
        default: defaultValue
    });
    return {
        register: isColor ? function (proxy, args) {
            proxy.uniformColor4(valInfo.name, material.arguments[valInfo.name]);
        } : function (proxy, args) {
            proxy.uniformVector4(valInfo.name, material.arguments[valInfo.name]);
        },
        dispose: function dispose() {
            material.deleteArgument(valInfo.name);
        }
    };
};
exports.default = null;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _TimeComponent = __webpack_require__(50);

var _TimeComponent2 = _interopRequireDefault(_TimeComponent);

var _RenderHitareaComponent = __webpack_require__(45);

var _RenderHitareaComponent2 = _interopRequireDefault(_RenderHitareaComponent);

var _PositionConverter = __webpack_require__(56);

var _PositionConverter2 = _interopRequireDefault(_PositionConverter);

var _NodeConverter = __webpack_require__(55);

var _NodeConverter2 = _interopRequireDefault(_NodeConverter);

var _DefaultMaterial = __webpack_require__(62);

var _DefaultMaterial2 = _interopRequireDefault(_DefaultMaterial);

var _DefaultPrimitives = __webpack_require__(59);

var _DefaultPrimitives2 = _interopRequireDefault(_DefaultPrimitives);

var _grimoirejs = __webpack_require__(28);

var _grimoirejs2 = _interopRequireDefault(_grimoirejs);

var _AssetLoadingManagerComponent = __webpack_require__(33);

var _AssetLoadingManagerComponent2 = _interopRequireDefault(_AssetLoadingManagerComponent);

var _CameraComponent = __webpack_require__(34);

var _CameraComponent2 = _interopRequireDefault(_CameraComponent);

var _CanvasInitializerComponent = __webpack_require__(35);

var _CanvasInitializerComponent2 = _interopRequireDefault(_CanvasInitializerComponent);

var _FullscreenComponent = __webpack_require__(36);

var _FullscreenComponent2 = _interopRequireDefault(_FullscreenComponent);

var _GeometryComponent = __webpack_require__(37);

var _GeometryComponent2 = _interopRequireDefault(_GeometryComponent);

var _GeometryRegistoryComponent = __webpack_require__(38);

var _GeometryRegistoryComponent2 = _interopRequireDefault(_GeometryRegistoryComponent);

var _HTMLBinderComponent = __webpack_require__(39);

var _HTMLBinderComponent2 = _interopRequireDefault(_HTMLBinderComponent);

var _LoopManagerComponent = __webpack_require__(12);

var _LoopManagerComponent2 = _interopRequireDefault(_LoopManagerComponent);

var _MaterialComponent = __webpack_require__(24);

var _MaterialComponent2 = _interopRequireDefault(_MaterialComponent);

var _MaterialContainerComponent = __webpack_require__(13);

var _MaterialContainerComponent2 = _interopRequireDefault(_MaterialContainerComponent);

var _MaterialImporterComponent = __webpack_require__(41);

var _MaterialImporterComponent2 = _interopRequireDefault(_MaterialImporterComponent);

var _MeshRendererComponent = __webpack_require__(42);

var _MeshRendererComponent2 = _interopRequireDefault(_MeshRendererComponent);

var _MouseCameraControlComponent = __webpack_require__(43);

var _MouseCameraControlComponent2 = _interopRequireDefault(_MouseCameraControlComponent);

var _RenderBufferComponent = __webpack_require__(44);

var _RenderBufferComponent2 = _interopRequireDefault(_RenderBufferComponent);

var _RendererComponent = __webpack_require__(47);

var _RendererComponent2 = _interopRequireDefault(_RendererComponent);

var _RendererManagerComponent = __webpack_require__(48);

var _RendererManagerComponent2 = _interopRequireDefault(_RendererManagerComponent);

var _RenderQuadComponent = __webpack_require__(46);

var _RenderQuadComponent2 = _interopRequireDefault(_RenderQuadComponent);

var _RenderSceneComponent = __webpack_require__(14);

var _RenderSceneComponent2 = _interopRequireDefault(_RenderSceneComponent);

var _SceneComponent = __webpack_require__(15);

var _SceneComponent2 = _interopRequireDefault(_SceneComponent);

var _TextureBufferComponent = __webpack_require__(49);

var _TextureBufferComponent2 = _interopRequireDefault(_TextureBufferComponent);

var _TextureComponent = __webpack_require__(6);

var _TextureComponent2 = _interopRequireDefault(_TextureComponent);

var _TransformComponent = __webpack_require__(3);

var _TransformComponent2 = _interopRequireDefault(_TransformComponent);

var _CanvasSizeConverter = __webpack_require__(52);

var _CanvasSizeConverter2 = _interopRequireDefault(_CanvasSizeConverter);

var _GeometryConverter = __webpack_require__(53);

var _GeometryConverter2 = _interopRequireDefault(_GeometryConverter);

var _MaterialConverter = __webpack_require__(54);

var _MaterialConverter2 = _interopRequireDefault(_MaterialConverter);

var _TextureConverter = __webpack_require__(57);

var _TextureConverter2 = _interopRequireDefault(_TextureConverter);

var _ViewportConverter = __webpack_require__(58);

var _ViewportConverter2 = _interopRequireDefault(_ViewportConverter);

var _ImageTextureComponent = __webpack_require__(40);

var _ImageTextureComponent2 = _interopRequireDefault(_ImageTextureComponent);

var _VideoTextureComponent = __webpack_require__(51);

var _VideoTextureComponent2 = _interopRequireDefault(_VideoTextureComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

exports.default = function () {
    _grimoirejs2.default.register(function () {
        return __awaiter(undefined, void 0, void 0, regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _grimoirejs2.default.registerComponent("AssetLoadingManager", _AssetLoadingManagerComponent2.default);
                            _grimoirejs2.default.registerComponent("Camera", _CameraComponent2.default);
                            _grimoirejs2.default.registerComponent("CanvasInitializer", _CanvasInitializerComponent2.default);
                            _grimoirejs2.default.registerComponent("Fullscreen", _FullscreenComponent2.default);
                            _grimoirejs2.default.registerComponent("Geometry", _GeometryComponent2.default);
                            _grimoirejs2.default.registerComponent("GeometryRegistory", _GeometryRegistoryComponent2.default);
                            _grimoirejs2.default.registerComponent("HTMLBinder", _HTMLBinderComponent2.default);
                            _grimoirejs2.default.registerComponent("LoopManager", _LoopManagerComponent2.default);
                            _grimoirejs2.default.registerComponent("Material", _MaterialComponent2.default);
                            _grimoirejs2.default.registerComponent("MaterialContainer", _MaterialContainerComponent2.default);
                            _grimoirejs2.default.registerComponent("MaterialImporter", _MaterialImporterComponent2.default);
                            _grimoirejs2.default.registerComponent("MeshRenderer", _MeshRendererComponent2.default);
                            _grimoirejs2.default.registerComponent("MouseCameraControl", _MouseCameraControlComponent2.default);
                            _grimoirejs2.default.registerComponent("RenderBuffer", _RenderBufferComponent2.default);
                            _grimoirejs2.default.registerComponent("Renderer", _RendererComponent2.default);
                            _grimoirejs2.default.registerComponent("RendererManager", _RendererManagerComponent2.default);
                            _grimoirejs2.default.registerComponent("RenderQuad", _RenderQuadComponent2.default);
                            _grimoirejs2.default.registerComponent("RenderScene", _RenderSceneComponent2.default);
                            _grimoirejs2.default.registerComponent("Scene", _SceneComponent2.default);
                            _grimoirejs2.default.registerComponent("TextureBuffer", _TextureBufferComponent2.default);
                            _grimoirejs2.default.registerComponent("Texture", _TextureComponent2.default);
                            _grimoirejs2.default.registerComponent("Transform", _TransformComponent2.default);
                            _grimoirejs2.default.registerComponent("RenderHitArea", _RenderHitareaComponent2.default);
                            _grimoirejs2.default.registerComponent("Time", _TimeComponent2.default);
                            _grimoirejs2.default.registerComponent("ImageTexture", _ImageTextureComponent2.default);
                            _grimoirejs2.default.registerComponent("VideoTexture", _VideoTextureComponent2.default);
                            _grimoirejs2.default.registerConverter("CanvasSize", _CanvasSizeConverter2.default);
                            _grimoirejs2.default.registerConverter("Geometry", _GeometryConverter2.default);
                            _grimoirejs2.default.registerConverter("Material", _MaterialConverter2.default);
                            _grimoirejs2.default.registerConverter("Texture", _TextureConverter2.default);
                            _grimoirejs2.default.registerConverter("Texture2D", _TextureConverter2.default);
                            _grimoirejs2.default.registerConverter("Viewport", _ViewportConverter2.default);
                            _grimoirejs2.default.registerConverter("Node", _NodeConverter2.default);
                            _grimoirejs2.default.registerConverter(_PositionConverter2.default);
                            _grimoirejs2.default.registerNode("goml", ["CanvasInitializer", "LoopManager", "AssetLoadingManager", "GeometryRegistory", "RendererManager", "Fullscreen"]);
                            _grimoirejs2.default.registerNode("scene", ["Scene", "Time"]);
                            _grimoirejs2.default.registerNode("object", ["Transform"]);
                            _grimoirejs2.default.registerNode("camera", ["Camera"], { position: "0,0,10" }, "object");
                            _grimoirejs2.default.registerNode("mesh", ["MaterialContainer", "MeshRenderer"], {}, "object");
                            _grimoirejs2.default.registerNode("renderer", ["Renderer"]);
                            _grimoirejs2.default.registerNode("geometry", ["Geometry"]);
                            _grimoirejs2.default.registerNode("texture", ["Texture"]);
                            _grimoirejs2.default.registerNode("image-texture", ["ImageTexture"], {}, "texture");
                            _grimoirejs2.default.registerNode("video-texture", ["VideoTexture"], {}, "texture");
                            _grimoirejs2.default.registerNode("material", ["Material"]);
                            _grimoirejs2.default.registerNode("import-material", ["MaterialImporter"]);
                            _grimoirejs2.default.registerNode("texture-buffer", ["TextureBuffer"]);
                            _grimoirejs2.default.registerNode("render-buffer", ["RenderBuffer"]);
                            _grimoirejs2.default.registerNode("render-scene", ["RenderScene", "RenderHitArea"], {
                                material: null
                            });
                            _grimoirejs2.default.registerNode("render-quad", ["MaterialContainer", "RenderQuad"], {
                                material: null
                            });
                            _DefaultPrimitives2.default.register();
                            _DefaultMaterial2.default.register();

                        case 52:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));
    });
};

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    /**
     * GOMLファイルのルートノード
     * ツリーに唯一一つ必要なコンポーネントなどをつけておくためのノード。
     * 特に、`<canvas>`の初期化やループの管理など、最初の初期化時のパラメーターを受け取るためのコンポーネントとともに、
     * `<canvas>`の設定(`width`や`height`)またはフルスクリーンなどのコンポーネントを含む。
     */
    goml: {
        components: ["CanvasInitializer", "LoopManager", "AssetLoadingManager", "GeometryRegistory", "RendererManager", "Fullscreen"]
    },
    /**
     * ある3D空間上のモデルの配置やカメラの設定などの場面の設定を含むためのノード
     * カメラや、ライト、メッシュなど空間に配置するためのノードです。
     * 全ての場面に存在する座標を持ちうるノード(`TransformComponent`を含むノード)は必ずこのノードの子ノードのとして存在する必要があります。
     */
    scene: {
        components: ["Scene"]
    },
    /**
     * 3D空間上の物体を意味するノード
     * メッシュやカメラなどのベースとなるノードです。このノードの子要素には親要素の変型量(`position`や`rotation`)などが伝搬します。
     * 詳しくは`TransformComponent`を参照すると良いでしょう。
     */
    object: {
        components: ["Transform"]
    },
    /**
     * 3D空間を撮影するためのカメラのノード
     * 3D空間を撮影するためのカメラを意味するノードです。シーンをレンダリングするには最低一つのカメラがシーンに属していなければなりません。
     */
    camera: {
        components: ["Camera"],
        default: {
            position: [0, 0, 10]
        },
        super: "object"
    },
    /**
     * 3D空間上のモデルなど、 **映るもの** を表すためのノード
     * 3D空間上に存在する映るものを意味するノードです。シーンに何かを写すには最低一つのメッシュがシーンに属していなければなりません。
     * メッシュは、マテリアル(材質)とジオメトリ(形状)からなります。この2つの指定を変えることで、様々な表現が3D空間上で可能になります。
     */
    mesh: {
        components: ["MaterialContainer", "MeshRenderer"],
        super: "object"
    },
    /**
     * キャンバスの描画手法を指定するためのノード
     * キャンバス上の領域をどのように描画するかを示すためのノードです。gomlの読み込み時に一つも存在しない場合は、自動的にgoml直下に生成されます。
     * 1つ以上のレンダラーを含むことで、キャンバスの複数の領域をレンダリングしたりすることができるようになります。
     * また、この子要素に指定する`<render-XXX>`ノードなどによって、どのようにその領域を描画するかが決定されます。
     * 通常、`<renderer>`の子ノードに何も存在しない場合、自動的に`<render-scene>`タグが生成されます。
     */
    renderer: {
        components: ["Renderer"]
    },
    /**
     * 新しい形状を生成するためのノード
     * 単純な変形(`scale`、`position`、`rotation`だけで表せない)、例えば円の分割数などを指定したい別の形状を明示的に生成するためのノードです。
     */
    geometry: {
        components: ["Geometry"]
    },
    /**
     * テクスチャを明示的に読み込むためのノード
     * テクスチャを読み込むためのノードです。通常、テクスチャはurlをマテリアルに指定するなどして読み込まれますが、
     * サンプラの指定などをしたい場合、このタグで明示的に読み込むことにより読み込むことができます。
     */
    texture: {
        components: ["Texture"]
    },
    /**
     * マテリアルを明示的に読み込むためのノード
     * マテリアルを生成するためのノードです。メッシュからこのノードを参照して利用することにより、複数のメッシュで共通のマテリアルのインスタンスを参照させることができます。
     * これは、同時にマテリアルの値が編集できるだけでなく、パフォーマンス的にも大きな利点をもたらします。
     */
    material: {
        components: ["Material"]
    },
    /**
     * 新しいマテリアルを外部から読み込むためのノード
     * Grimoire.jsのマテリアルファイル(*.sort)から新しい種類のマテリアルを読み込むためのノードです。
     */
    "import-material": {
        components: ["MaterialImporter"]
    },
    /**
     * カラーバッファ用のテクスチャを生成するためのノード
     * `<renderer>`ノードの直下に含まれうるノードの一つです。
     * このノードによってレンダリングに用いるカラーバッファを生成することができます。
     * カラーバッファはオフスクリーンレンダリングなどへの利用など様々な面で利用することができます。
     */
    "texture-buffer": {
        components: ["TextureBuffer"]
    },
    /**
     * 深度バッファ/ステンシルバッファ用の`renderbuffer`を生成するためのノード
     * `<renderer>`ノードの直下に含まれうるノードの一つです。
     * このノードによってレンダリングに用いる深度バッファやステンシルバッファを生成することができます。
     */
    "render-buffer": {
        components: ["RenderBuffer"]
    },
    /**
     *
     * シーンを描画するレンダリング手順を表すためのノード
     * `<renderer>`ノードの直下に含まれうるノードの一つです。
     * このノードは`out`に指定されたテクスチャ(デフォルトではキャンバス自身)に対して、シーンの内容を描画します。
     */
    "render-scene": {
        components: ["RenderScene", "RenderHitArea"],
        default: {
            material: null
        }
    },
    /**
     * 四角形単体を特定のマテリアルで描画するためのノード
     * `<renderer>`ノードの直下に含まれうるノードの一つです。
     * このノードは`out`に指定されたテクスチャ(デフォルトではキャンバス自身)に対して、単純な四角形(`quad`)を指定されたマテリアルで描画します。
     */
    "render-quad": {
        components: ["MaterialContainer", "RenderQuad"],
        default: {
            material: null
        }
    }
};

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _AssetLoader = __webpack_require__(30);

var _AssetLoader2 = _interopRequireDefault(_AssetLoader);

var _CacheResolver = __webpack_require__(20);

var _CacheResolver2 = _interopRequireDefault(_CacheResolver);

var _ExternalResourceResolver = __webpack_require__(21);

var _ExternalResourceResolver2 = _interopRequireDefault(_ExternalResourceResolver);

var _ImageResolver = __webpack_require__(22);

var _ImageResolver2 = _interopRequireDefault(_ImageResolver);

var _NameResolver = __webpack_require__(23);

var _NameResolver2 = _interopRequireDefault(_NameResolver);

var _TextFileResolver = __webpack_require__(31);

var _TextFileResolver2 = _interopRequireDefault(_TextFileResolver);

var _VideoResolver = __webpack_require__(32);

var _VideoResolver2 = _interopRequireDefault(_VideoResolver);

var _AssetLoadingManagerComponent = __webpack_require__(33);

var _AssetLoadingManagerComponent2 = _interopRequireDefault(_AssetLoadingManagerComponent);

var _CameraComponent = __webpack_require__(34);

var _CameraComponent2 = _interopRequireDefault(_CameraComponent);

var _CanvasInitializerComponent = __webpack_require__(35);

var _CanvasInitializerComponent2 = _interopRequireDefault(_CanvasInitializerComponent);

var _FullscreenComponent = __webpack_require__(36);

var _FullscreenComponent2 = _interopRequireDefault(_FullscreenComponent);

var _GeometryComponent = __webpack_require__(37);

var _GeometryComponent2 = _interopRequireDefault(_GeometryComponent);

var _GeometryRegistoryComponent = __webpack_require__(38);

var _GeometryRegistoryComponent2 = _interopRequireDefault(_GeometryRegistoryComponent);

var _HTMLBinderComponent = __webpack_require__(39);

var _HTMLBinderComponent2 = _interopRequireDefault(_HTMLBinderComponent);

var _ImageTextureComponent = __webpack_require__(40);

var _ImageTextureComponent2 = _interopRequireDefault(_ImageTextureComponent);

var _LoopManagerComponent = __webpack_require__(12);

var _LoopManagerComponent2 = _interopRequireDefault(_LoopManagerComponent);

var _MaterialComponent = __webpack_require__(24);

var _MaterialComponent2 = _interopRequireDefault(_MaterialComponent);

var _MaterialContainerComponent = __webpack_require__(13);

var _MaterialContainerComponent2 = _interopRequireDefault(_MaterialContainerComponent);

var _MaterialImporterComponent = __webpack_require__(41);

var _MaterialImporterComponent2 = _interopRequireDefault(_MaterialImporterComponent);

var _MeshRendererComponent = __webpack_require__(42);

var _MeshRendererComponent2 = _interopRequireDefault(_MeshRendererComponent);

var _MouseCameraControlComponent = __webpack_require__(43);

var _MouseCameraControlComponent2 = _interopRequireDefault(_MouseCameraControlComponent);

var _RenderBufferComponent = __webpack_require__(44);

var _RenderBufferComponent2 = _interopRequireDefault(_RenderBufferComponent);

var _RendererComponent = __webpack_require__(47);

var _RendererComponent2 = _interopRequireDefault(_RendererComponent);

var _RendererManagerComponent = __webpack_require__(48);

var _RendererManagerComponent2 = _interopRequireDefault(_RendererManagerComponent);

var _RenderHitareaComponent = __webpack_require__(45);

var _RenderHitareaComponent2 = _interopRequireDefault(_RenderHitareaComponent);

var _RenderQuadComponent = __webpack_require__(46);

var _RenderQuadComponent2 = _interopRequireDefault(_RenderQuadComponent);

var _RenderSceneComponent = __webpack_require__(14);

var _RenderSceneComponent2 = _interopRequireDefault(_RenderSceneComponent);

var _SceneComponent = __webpack_require__(15);

var _SceneComponent2 = _interopRequireDefault(_SceneComponent);

var _TextureBufferComponent = __webpack_require__(49);

var _TextureBufferComponent2 = _interopRequireDefault(_TextureBufferComponent);

var _TextureComponent = __webpack_require__(6);

var _TextureComponent2 = _interopRequireDefault(_TextureComponent);

var _TimeComponent = __webpack_require__(50);

var _TimeComponent2 = _interopRequireDefault(_TimeComponent);

var _TransformComponent = __webpack_require__(3);

var _TransformComponent2 = _interopRequireDefault(_TransformComponent);

var _VideoTextureComponent = __webpack_require__(51);

var _VideoTextureComponent2 = _interopRequireDefault(_VideoTextureComponent);

var _CanvasSizeConverter = __webpack_require__(52);

var _CanvasSizeConverter2 = _interopRequireDefault(_CanvasSizeConverter);

var _GeometryConverter = __webpack_require__(53);

var _GeometryConverter2 = _interopRequireDefault(_GeometryConverter);

var _MaterialConverter = __webpack_require__(54);

var _MaterialConverter2 = _interopRequireDefault(_MaterialConverter);

var _NodeConverter = __webpack_require__(55);

var _NodeConverter2 = _interopRequireDefault(_NodeConverter);

var _PositionConverter = __webpack_require__(56);

var _PositionConverter2 = _interopRequireDefault(_PositionConverter);

var _TextureConverter = __webpack_require__(57);

var _TextureConverter2 = _interopRequireDefault(_TextureConverter);

var _ViewportConverter = __webpack_require__(58);

var _ViewportConverter2 = _interopRequireDefault(_ViewportConverter);

var _DefaultPrimitives = __webpack_require__(59);

var _DefaultPrimitives2 = _interopRequireDefault(_DefaultPrimitives);

var _Geometry = __webpack_require__(16);

var _Geometry2 = _interopRequireDefault(_Geometry);

var _GeometryFactory = __webpack_require__(17);

var _GeometryFactory2 = _interopRequireDefault(_GeometryFactory);

var _GeometryUtility = __webpack_require__(60);

var _GeometryUtility2 = _interopRequireDefault(_GeometryUtility);

var _DefaultMacro = __webpack_require__(61);

var _DefaultMacro2 = _interopRequireDefault(_DefaultMacro);

var _DefaultMaterial = __webpack_require__(62);

var _DefaultMaterial2 = _interopRequireDefault(_DefaultMaterial);

var _GLStateConfigurator = __webpack_require__(63);

var _GLStateConfigurator2 = _interopRequireDefault(_GLStateConfigurator);

var _MacroRegistory = __webpack_require__(64);

var _MacroRegistory2 = _interopRequireDefault(_MacroRegistory);

var _Material = __webpack_require__(25);

var _Material2 = _interopRequireDefault(_Material);

var _MaterialFactory = __webpack_require__(4);

var _MaterialFactory2 = _interopRequireDefault(_MaterialFactory);

var _Pass = __webpack_require__(65);

var _Pass2 = _interopRequireDefault(_Pass);

var _PassProgram = __webpack_require__(66);

var _PassProgram2 = _interopRequireDefault(_PassProgram);

var _ShaderMixer = __webpack_require__(67);

var _ShaderMixer2 = _interopRequireDefault(_ShaderMixer);

var _Technique = __webpack_require__(68);

var _Technique2 = _interopRequireDefault(_Technique);

var _TextureReference = __webpack_require__(69);

var _TextureReference2 = _interopRequireDefault(_TextureReference);

var _UniformResolverContainer = __webpack_require__(70);

var _UniformResolverContainer2 = _interopRequireDefault(_UniformResolverContainer);

var _UniformResolverRegistry = __webpack_require__(7);

var _UniformResolverRegistry2 = _interopRequireDefault(_UniformResolverRegistry);

var _MatricesRegister = __webpack_require__(91);

var _MatricesRegister2 = _interopRequireDefault(_MatricesRegister);

var _MiscRegister = __webpack_require__(92);

var _MiscRegister2 = _interopRequireDefault(_MiscRegister);

var _UserValueRegister = __webpack_require__(93);

var _UserValueRegister2 = _interopRequireDefault(_UserValueRegister);

var _nodes = __webpack_require__(95);

var _nodes2 = _interopRequireDefault(_nodes);

var _Buffer = __webpack_require__(71);

var _Buffer2 = _interopRequireDefault(_Buffer);

var _FrameBuffer = __webpack_require__(18);

var _FrameBuffer2 = _interopRequireDefault(_FrameBuffer);

var _GLExtRequestor = __webpack_require__(26);

var _GLExtRequestor2 = _interopRequireDefault(_GLExtRequestor);

var _ManagedProgram = __webpack_require__(72);

var _ManagedProgram2 = _interopRequireDefault(_ManagedProgram);

var _ManagedShader = __webpack_require__(73);

var _ManagedShader2 = _interopRequireDefault(_ManagedShader);

var _Program = __webpack_require__(74);

var _Program2 = _interopRequireDefault(_Program);

var _RenderBuffer = __webpack_require__(19);

var _RenderBuffer2 = _interopRequireDefault(_RenderBuffer);

var _ResourceBase = __webpack_require__(2);

var _ResourceBase2 = _interopRequireDefault(_ResourceBase);

var _ResourceCache = __webpack_require__(75);

var _ResourceCache2 = _interopRequireDefault(_ResourceCache);

var _Shader = __webpack_require__(76);

var _Shader2 = _interopRequireDefault(_Shader);

var _Texture2D = __webpack_require__(1);

var _Texture2D2 = _interopRequireDefault(_Texture2D);

var _UniformProxy = __webpack_require__(77);

var _UniformProxy2 = _interopRequireDefault(_UniformProxy);

var _DrawPriorty = __webpack_require__(78);

var _DrawPriorty2 = _interopRequireDefault(_DrawPriorty);

var _RenderQueue = __webpack_require__(79);

var _RenderQueue2 = _interopRequireDefault(_RenderQueue);

var _RenderQueueRegistry = __webpack_require__(80);

var _RenderQueueRegistry2 = _interopRequireDefault(_RenderQueueRegistry);

var _CommentRemover = __webpack_require__(81);

var _CommentRemover2 = _interopRequireDefault(_CommentRemover);

var _ImportResolver = __webpack_require__(82);

var _ImportResolver2 = _interopRequireDefault(_ImportResolver);

var _NameSemanticsPair = __webpack_require__(83);

var _NameSemanticsPair2 = _interopRequireDefault(_NameSemanticsPair);

var _Parser = __webpack_require__(84);

var _Parser2 = _interopRequireDefault(_Parser);

var _Preferences = __webpack_require__(85);

var _Preferences2 = _interopRequireDefault(_Preferences);

var _SortTransformUtility = __webpack_require__(86);

var _SortTransformUtility2 = _interopRequireDefault(_SortTransformUtility);

var _TypeToConstant = __webpack_require__(87);

var _TypeToConstant2 = _interopRequireDefault(_TypeToConstant);

var _HashCalculator = __webpack_require__(8);

var _HashCalculator2 = _interopRequireDefault(_HashCalculator);

var _MeshIndexCalculator = __webpack_require__(27);

var _MeshIndexCalculator2 = _interopRequireDefault(_MeshIndexCalculator);

var _TextureSizeCalculator = __webpack_require__(5);

var _TextureSizeCalculator2 = _interopRequireDefault(_TextureSizeCalculator);

var _Timer = __webpack_require__(88);

var _Timer2 = _interopRequireDefault(_Timer);

var _main = __webpack_require__(94);

var _main2 = _interopRequireDefault(_main);

var _grimoirejs = __webpack_require__(28);

var _grimoirejs2 = _interopRequireDefault(_grimoirejs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __VERSION__ = "0.22.0-beta2";
var __NAME__ = "grimoirejs-fundamental";

var __EXPOSE__ = {
    "Asset": {
        "AssetLoader": _AssetLoader2.default,
        "CacheResolver": _CacheResolver2.default,
        "ExternalResourceResolver": _ExternalResourceResolver2.default,
        "ImageResolver": _ImageResolver2.default,
        "NameResolver": _NameResolver2.default,
        "TextFileResolver": _TextFileResolver2.default,
        "VideoResolver": _VideoResolver2.default
    },
    "Components": {
        "AssetLoadingManagerComponent": _AssetLoadingManagerComponent2.default,
        "CameraComponent": _CameraComponent2.default,
        "CanvasInitializerComponent": _CanvasInitializerComponent2.default,
        "FullscreenComponent": _FullscreenComponent2.default,
        "GeometryComponent": _GeometryComponent2.default,
        "GeometryRegistoryComponent": _GeometryRegistoryComponent2.default,
        "HTMLBinderComponent": _HTMLBinderComponent2.default,
        "ImageTextureComponent": _ImageTextureComponent2.default,
        "LoopManagerComponent": _LoopManagerComponent2.default,
        "MaterialComponent": _MaterialComponent2.default,
        "MaterialContainerComponent": _MaterialContainerComponent2.default,
        "MaterialImporterComponent": _MaterialImporterComponent2.default,
        "MeshRendererComponent": _MeshRendererComponent2.default,
        "MouseCameraControlComponent": _MouseCameraControlComponent2.default,
        "RenderBufferComponent": _RenderBufferComponent2.default,
        "RendererComponent": _RendererComponent2.default,
        "RendererManagerComponent": _RendererManagerComponent2.default,
        "RenderHitareaComponent": _RenderHitareaComponent2.default,
        "RenderQuadComponent": _RenderQuadComponent2.default,
        "RenderSceneComponent": _RenderSceneComponent2.default,
        "SceneComponent": _SceneComponent2.default,
        "TextureBufferComponent": _TextureBufferComponent2.default,
        "TextureComponent": _TextureComponent2.default,
        "TimeComponent": _TimeComponent2.default,
        "TransformComponent": _TransformComponent2.default,
        "VideoTextureComponent": _VideoTextureComponent2.default
    },
    "Converters": {
        "CanvasSizeConverter": _CanvasSizeConverter2.default,
        "GeometryConverter": _GeometryConverter2.default,
        "MaterialConverter": _MaterialConverter2.default,
        "NodeConverter": _NodeConverter2.default,
        "PositionConverter": _PositionConverter2.default,
        "TextureConverter": _TextureConverter2.default,
        "ViewportConverter": _ViewportConverter2.default
    },
    "Geometry": {
        "DefaultPrimitives": _DefaultPrimitives2.default,
        "Geometry": _Geometry2.default,
        "GeometryFactory": _GeometryFactory2.default,
        "GeometryUtility": _GeometryUtility2.default
    },
    "Material": {
        "DefaultMacro": _DefaultMacro2.default,
        "DefaultMaterial": _DefaultMaterial2.default,
        "GLStateConfigurator": _GLStateConfigurator2.default,
        "MacroRegistory": _MacroRegistory2.default,
        "Material": _Material2.default,
        "MaterialFactory": _MaterialFactory2.default,
        "Pass": _Pass2.default,
        "PassProgram": _PassProgram2.default,
        "ShaderMixer": _ShaderMixer2.default,
        "Technique": _Technique2.default,
        "TextureReference": _TextureReference2.default,
        "UniformResolverContainer": _UniformResolverContainer2.default,
        "UniformResolverRegistry": _UniformResolverRegistry2.default,
        "Uniforms": {
            "MatricesRegister": _MatricesRegister2.default,
            "MiscRegister": _MiscRegister2.default,
            "UserValueRegister": _UserValueRegister2.default
        }
    },
    "nodes": _nodes2.default,
    "Resource": {
        "Buffer": _Buffer2.default,
        "FrameBuffer": _FrameBuffer2.default,
        "GLExtRequestor": _GLExtRequestor2.default,
        "ManagedProgram": _ManagedProgram2.default,
        "ManagedShader": _ManagedShader2.default,
        "Program": _Program2.default,
        "RenderBuffer": _RenderBuffer2.default,
        "ResourceBase": _ResourceBase2.default,
        "ResourceCache": _ResourceCache2.default,
        "Shader": _Shader2.default,
        "Texture2D": _Texture2D2.default,
        "UniformProxy": _UniformProxy2.default
    },
    "SceneRenderer": {
        "DrawPriorty": _DrawPriorty2.default,
        "RenderQueue": _RenderQueue2.default,
        "RenderQueueRegistry": _RenderQueueRegistry2.default
    },
    "Sort": {
        "CommentRemover": _CommentRemover2.default,
        "ImportResolver": _ImportResolver2.default,
        "NameSemanticsPair": _NameSemanticsPair2.default,
        "Parser": _Parser2.default,
        "Preferences": _Preferences2.default,
        "SortTransformUtility": _SortTransformUtility2.default,
        "TypeToConstant": _TypeToConstant2.default
    },
    "Util": {
        "HashCalculator": _HashCalculator2.default,
        "MeshIndexCalculator": _MeshIndexCalculator2.default,
        "TextureSizeCalculator": _TextureSizeCalculator2.default,
        "Timer": _Timer2.default
    }
};

_grimoirejs2.default.notifyRegisteringPlugin(__NAME__);
var __BASE__ = (0, _main2.default)();
Object.assign(__EXPOSE__, {
    __VERSION__: __VERSION__,
    __NAME__: __NAME__
});
Object.assign(__BASE__ || {}, __EXPOSE__);
window["GrimoireJS"].lib.fundamental = __EXPOSE__;
exports.default = __BASE__;

/***/ }),
/* 97 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math.Color4;

/***/ }),
/* 98 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math.Quaternion;

/***/ }),
/* 99 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math.Rectangle;

/***/ }),
/* 100 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math.Vector2;

/***/ }),
/* 101 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.Base.EEObject;

/***/ }),
/* 102 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.Base.Namespace;

/***/ }),
/* 103 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.Interface.GrimoireInterface;

/***/ }),
/* 104 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.Node.Attribute;

/***/ }),
/* 105 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.Node.GomlNode;

/***/ }),
/* 106 */
/***/ (function(module, exports) {

module.exports = "<div style=\"width:100%;height:100%;position: relative;\">\n    <div style=\"width: 55px;height: 55px;border-radius: 100%;border: 5px solid #381794;border-right-color: #FC659D;animation: rotate 1s linear infinite;position: absolute;top: 0;left: 0;right: 0;bottom: 0;margin: auto;\"></div>\n</div>\n<style type=\"text/css\">\n    @keyframes rotate {\n        from {\n            transform: rotate(0deg);\n        }\n        to {\n            transform: rotate(360deg);\n        }\n    }\n</style>\n"

/***/ }),
/* 107 */
/***/ (function(module, exports) {

module.exports = "@Technique default{\n@Pass{\n  @BlendFunc(SRC_ALPHA,ONE_MINUS_SRC_ALPHA)\n  FS_PREC(mediump,float)\n  #ifdef ATTRIBUTE_COLOR_ENABLED\n  varying vec4 vColor;\n  #endif\n\n  varying vec2 vTexCoord;\n  #ifdef VS\n\n  attribute vec3 position;\n\n  #ifdef ATTRIBUTE_TEXCOORD_ENABLED\n  @TEXCOORD\n  attribute vec2 texCoord;\n  #endif\n  @MODELVIEWPROJECTION\n  uniform mat4 _matPVM;\n\n  #ifdef ATTRIBUTE_COLOR_ENABLED\n  @COLOR\n  attribute vec4 attrColor;\n  #endif\n\n  void main()\n  {\n    gl_Position = _matPVM * vec4(position,1.0);\n    #ifdef ATTRIBUTE_TEXCOORD_ENABLED\n    vTexCoord = texCoord;\n    #endif\n    #ifndef ATTRIBUTE_TEXCOORD_ENABLED\n    vTexCoord = position.xy/2.0 + vec2(0.5);\n    #endif\n    #ifdef ATTRIBUTE_COLOR_ENABLED\n    vColor = attrColor;\n    #endif\n  }\n  #endif\n  #ifdef FS\n  @{type:\"color\",default:\"white\"}\n  uniform vec4 color;\n\n  @{flag:\"USE_TEXTURE\"}\n  uniform sampler2D texture;\n\n  uniform float _time;\n  void main(void)\n  {\n    vec4 baseColor = color;\n    #ifdef ATTRIBUTE_COLOR_ENABLED\n    baseColor *= vColor;\n    #endif\n    #ifdef USE_TEXTURE\n      gl_FragColor = baseColor * texture2D(texture,vTexCoord);\n    #endif\n    #ifndef USE_TEXTURE\n      gl_FragColor = baseColor;\n    #endif\n  }\n  #endif\n}\n}\n\n@Technique hitarea{\n  @Disable(BLEND)\n  @Pass{\n    FS_PREC(mediump,float)\n\n    #ifdef VS\n      attribute vec3 position;\n      uniform mat4 _matPVM;\n\n      void main(){\n        gl_Position = _matPVM * vec4(position,1.0);\n      }\n    #endif\n\n    #ifdef FS\n      @MESH_INDEX\n      uniform vec4 meshIndex;\n      void main(){\n        gl_FragColor = meshIndex;\n      }\n    #endif\n  }\n}\n"

/***/ })
/******/ ]);
});
//# sourceMappingURL=grimoire-fundamental.js.map

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 22);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ParserModuleBase2 = __webpack_require__(10);

var _ParserModuleBase3 = _interopRequireDefault(_ParserModuleBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ParserModule = function (_ParserModuleBase) {
    _inherits(ParserModule, _ParserModuleBase);

    function ParserModule(parser, baseDirectory) {
        _classCallCheck(this, ParserModule);

        var _this = _possibleConstructorReturn(this, (ParserModule.__proto__ || Object.getPrototypeOf(ParserModule)).call(this));

        _this.parser = parser;
        _this.baseDirectory = baseDirectory;
        _this.__gl = parser.gl;
        return _this;
    }

    _createClass(ParserModule, [{
        key: "fetchGLTF",
        value: function fetchGLTF(url) {
            return undefined;
        }
        /**
         * Load .gltf file
         * @return {Promise<GLTF>} [description]
         */

    }, {
        key: "loadAsGLTF",
        value: function loadAsGLTF(tf) {
            return undefined;
        }
        /**
         * Start loading texture resource.
         * @return {Promise<Texture2D>} [description]
         */

    }, {
        key: "fetchTextureResource",
        value: function fetchTextureResource(tf) {
            return undefined;
        }
        /**
         * Start loading texture resource.
         * @return {Promise<Texture2D>} [description]
         */

    }, {
        key: "loadTextureResources",
        value: function loadTextureResources(tf) {
            return undefined;
        }
        /**
         * Load image as texture
         * @return {Promise<Texture2D>} [description]
         */

    }, {
        key: "convertTotexture",
        value: function convertTotexture(arg) {
            return undefined;
        }
        /**
         * Start loading buffer resource.
         * @return {Promise<ArrayBuffer>} [description]
         */

    }, {
        key: "loadBufferResource",
        value: function loadBufferResource(tf) {
            return undefined;
        }
    }, {
        key: "loadBufferResources",
        value: function loadBufferResources(tf) {
            return undefined;
        }
    }, {
        key: "loadBufferViews",
        value: function loadBufferViews(args) {
            return undefined;
        }
    }, {
        key: "loadPrimitivesOfMesh",
        value: function loadPrimitivesOfMesh(args) {
            return undefined;
        }
    }, {
        key: "loadPrimitive",
        value: function loadPrimitive(args) {
            return undefined;
        }
    }, {
        key: "appendIndices",
        value: function appendIndices(args) {
            return undefined;
        }
    }, {
        key: "addVertexAttributes",
        value: function addVertexAttributes(args) {
            return undefined;
        }
    }, {
        key: "complementVertexAttributes",
        value: function complementVertexAttributes(args) {
            return undefined;
        }
    }, {
        key: "loadMaterials",
        value: function loadMaterials(args) {
            return undefined;
        }
    }, {
        key: "loadMaterial",
        value: function loadMaterial(args) {
            return undefined;
        }
    }, {
        key: "loadAnimations",
        value: function loadAnimations(args) {
            return undefined;
        }
    }, {
        key: "loadAnimation",
        value: function loadAnimation(args) {
            return undefined;
        }
    }]);

    return ParserModule;
}(_ParserModuleBase3.default);

exports.default = ParserModule;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = __webpack_require__(18);

var _Component3 = _interopRequireDefault(_Component2);

var _Parser = __webpack_require__(9);

var _Parser2 = _interopRequireDefault(_Parser);

var _DefaultInstanciator = __webpack_require__(4);

var _DefaultInstanciator2 = _interopRequireDefault(_DefaultInstanciator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GLTFModelComponent = function (_Component) {
    _inherits(GLTFModelComponent, _Component);

    function GLTFModelComponent() {
        _classCallCheck(this, GLTFModelComponent);

        var _this = _possibleConstructorReturn(this, (GLTFModelComponent.__proto__ || Object.getPrototypeOf(GLTFModelComponent)).apply(this, arguments));

        _this.jointMatrices = {};
        _this.skeletons = {};
        return _this;
    }

    _createClass(GLTFModelComponent, [{
        key: "$mount",
        value: function $mount() {
            var _this2 = this;

            var src = this.getAttribute("src");
            if (src) {
                var gl = this.companion.get("gl");
                var promise = _Parser2.default.parseFromURL(gl, src).then(function (data) {
                    GLTFModelComponent.instanciator.instanciateAll(data, _this2, _this2.getAttribute("scene"));
                });
                if (this.getAttribute("waitForLoad")) {
                    var loader = this.companion.get("loader");
                    loader.register(promise);
                }
            }
        }
    }]);

    return GLTFModelComponent;
}(_Component3.default);

exports.default = GLTFModelComponent;

GLTFModelComponent.instanciator = new _DefaultInstanciator2.default();
GLTFModelComponent.componentName = "GLTFModelComponent";
GLTFModelComponent.attributes = {
    src: {
        converter: "String",
        default: null
    },
    scene: {
        converter: "String",
        default: null
    },
    waitForLoad: {
        converter: "Boolean",
        default: false
    }
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Color = __webpack_require__(32);

var _Color2 = _interopRequireDefault(_Color);

var _Color3 = __webpack_require__(33);

var _Color4 = _interopRequireDefault(_Color3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GLTFConstantConvert = function () {
    function GLTFConstantConvert() {
        _classCallCheck(this, GLTFConstantConvert);
    }

    _createClass(GLTFConstantConvert, null, [{
        key: "asColorValue",
        value: function asColorValue(a) {
            if (a.length === 3) {
                return new _Color2.default(a[0], a[1], a[2]);
            } else {
                return new _Color4.default(a[0], a[1], a[2], a[3]);
            }
        }
    }, {
        key: "asVectorSize",
        value: function asVectorSize(type) {
            switch (type) {
                case "SCALAR":
                    return 1;
                case "VEC2":
                    return 2;
                case "VEC3":
                    return 3;
                case "VEC4":
                case "MAT2":
                    return 4;
                case "MAT3":
                    return 9;
                case "MAT4":
                    return 16;
                default:
                    throw new Error("Invalid vectorSize");
            }
        }
    }, {
        key: "asByteSize",
        value: function asByteSize(componentType) {
            switch (componentType) {
                case WebGLRenderingContext.UNSIGNED_BYTE:
                case WebGLRenderingContext.BYTE:
                    return 1;
                case WebGLRenderingContext.UNSIGNED_SHORT:
                case WebGLRenderingContext.SHORT:
                    return 2;
                case WebGLRenderingContext.UNSIGNED_INT:
                case WebGLRenderingContext.INT:
                case WebGLRenderingContext.FLOAT:
                    return 4;
                default:
                    throw new Error("Unknown size!");
            }
        }
    }, {
        key: "elementTypeToTypedArray",
        value: function elementTypeToTypedArray(type) {
            switch (type) {
                case WebGLRenderingContext.UNSIGNED_BYTE:
                    return Uint8Array;
                case WebGLRenderingContext.BYTE:
                    return Int8Array;
                case WebGLRenderingContext.UNSIGNED_SHORT:
                    return Uint16Array;
                case WebGLRenderingContext.SHORT:
                    return Int16Array;
                case WebGLRenderingContext.UNSIGNED_INT:
                    return Uint32Array;
                case WebGLRenderingContext.INT:
                    return Int32Array;
                case WebGLRenderingContext.FLOAT:
                    return Float32Array;
                default:
                    throw new Error("Unsupported");
            }
        }
    }, {
        key: "indexCountToBufferInfo",
        value: function indexCountToBufferInfo(count) {
            if (count < 256) {
                return {
                    elementType: WebGLRenderingContext.UNSIGNED_BYTE,
                    byteSize: 1,
                    ctor: Uint8Array
                };
            } else if (count < 65536) {
                return {
                    elementType: WebGLRenderingContext.UNSIGNED_SHORT,
                    byteSize: 2,
                    ctor: Uint16Array
                };
            } else {
                return {
                    elementType: WebGLRenderingContext.UNSIGNED_INT,
                    byteSize: 4,
                    ctor: Uint32Array
                };
            }
        }
    }]);

    return GLTFConstantConvert;
}();

exports.default = GLTFConstantConvert;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Matrix = __webpack_require__(15);

var _Matrix2 = _interopRequireDefault(_Matrix);

var _TransformComponent = __webpack_require__(13);

var _TransformComponent2 = _interopRequireDefault(_TransformComponent);

var _Component2 = __webpack_require__(18);

var _Component3 = _interopRequireDefault(_Component2);

var _GLTFModelComponent = __webpack_require__(1);

var _GLTFModelComponent2 = _interopRequireDefault(_GLTFModelComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GLTFJointComponent = function (_Component) {
    _inherits(GLTFJointComponent, _Component);

    function GLTFJointComponent() {
        _classCallCheck(this, GLTFJointComponent);

        return _possibleConstructorReturn(this, (GLTFJointComponent.__proto__ || Object.getPrototypeOf(GLTFJointComponent)).apply(this, arguments));
    }

    _createClass(GLTFJointComponent, [{
        key: "$mount",
        value: function $mount() {
            this._model = this.node.getComponentInAncestor(_GLTFModelComponent2.default);
            this._transform = this.node.getComponent(_TransformComponent2.default);
            this._invBindMatrix = new _Matrix2.default(this.getAttribute("invBindShapeMatrix"));
            this._skinIndex = this.getAttribute("skinIndex");
            this._jointIndex = this.getAttribute("jointIndex");
        }
    }, {
        key: "$update",
        value: function $update() {
            var poseMat = this._model.skeletons[this._skinIndex].globalTransformInverse.multiplyWith(this._transform.globalTransform).multiplyWith(this._invBindMatrix); //.multiplyWith(this._model.skeletons[this._skinIndex].globalTransform);
            for (var i = 0; i < 16; i++) {
                this._model.jointMatrices[this._skinIndex][this._jointIndex * 16 + i] = poseMat.rawElements[i];
            }
        }
    }]);

    return GLTFJointComponent;
}(_Component3.default);

exports.default = GLTFJointComponent;

GLTFJointComponent.attributes = {
    invBindShapeMatrix: {
        converter: "Object",
        default: null
    },
    skinIndex: {
        converter: "Number",
        default: null
    },
    jointIndex: {
        converter: "Number",
        default: null
    }
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _TransformComponent = __webpack_require__(13);

var _TransformComponent2 = _interopRequireDefault(_TransformComponent);

var _MeshRendererComponent = __webpack_require__(25);

var _MeshRendererComponent2 = _interopRequireDefault(_MeshRendererComponent);

var _Quaternion = __webpack_require__(16);

var _Quaternion2 = _interopRequireDefault(_Quaternion);

var _Vector = __webpack_require__(17);

var _Vector2 = _interopRequireDefault(_Vector);

var _Matrix = __webpack_require__(15);

var _Matrix2 = _interopRequireDefault(_Matrix);

var _AnimationFactory = __webpack_require__(23);

var _AnimationFactory2 = _interopRequireDefault(_AnimationFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DefaultInstanciator = function () {
    function DefaultInstanciator() {
        _classCallCheck(this, DefaultInstanciator);
    }

    _createClass(DefaultInstanciator, [{
        key: "instanciateAll",
        value: function instanciateAll(recipe, model, scene) {
            var sceneIndex = scene;
            if (sceneIndex === null) {
                sceneIndex = recipe.tf.scene;
            }
            if (typeof sceneIndex !== "number") {
                for (var key in recipe.tf.scenes) {
                    sceneIndex = key;
                    break;
                }
            }
            var sceneInfo = recipe.tf.scenes[sceneIndex];
            this.__instanciateScene(sceneInfo, model, recipe);
            this.__instanciateAnimations(model, recipe);
        }
    }, {
        key: "__instanciateScene",
        value: function __instanciateScene(scene, model, recipe) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = scene.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var nodeName = _step.value;

                    this.__instanciateNode(recipe, nodeName, {}, model.node, model);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "__instanciateAnimations",
        value: function __instanciateAnimations(model, recipe) {
            for (var key in recipe.animations) {
                _AnimationFactory2.default.addAnimation("gltf-animation-" + key, JSON.stringify(recipe.animations[key]));
                model.node.addComponent("Animation", {
                    animation: "gltf-animation-" + key,
                    clip: "default"
                });
            }
        }
    }, {
        key: "__instanciateNode",
        value: function __instanciateNode(recipe, nodeName, instanciatedNodes, parent, model) {
            var node = recipe.tf.nodes[nodeName];
            var currentNode = void 0;
            var meshes = [];
            if (node.mesh !== void 0) {
                var primitives = recipe.primitives[node.mesh];
                var meshInfo = recipe.tf.meshes[node.mesh];
                if (primitives.length === 1) {
                    var mat = recipe.materials[meshInfo.primitives[0].material];
                    var meshNode = parent.addChildByName("mesh", {
                        geometry: primitives[0],
                        material: mat
                    });
                    meshes.push(meshNode);
                    currentNode = meshNode;
                } else {
                    var objectNode = parent.addChildByName("object", {});
                    for (var i = 0; i < primitives.length; i++) {
                        var _mat = recipe.materials[meshInfo.primitives[i].material];
                        var _meshNode = objectNode.addChildByName("mesh", {
                            geometry: primitives[i],
                            material: _mat
                        });
                        meshes.push(_meshNode);
                    }
                    currentNode = objectNode;
                }
            } else {
                currentNode = parent.addChildByName("object", {});
            }
            instanciatedNodes[nodeName] = currentNode;
            currentNode.setAttribute("class", "gltf-node-" + nodeName);
            this.__applyTransform(currentNode, node);
            if (node.children) {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = node.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var child = _step2.value;

                        this.__instanciateNode(recipe, child, instanciatedNodes, currentNode, model);
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            }
            // If this node was skin, create joint matrix buffer in model
            if (node.skin !== void 0) {
                var skinInfo = recipe.tf.skins[node.skin];
                model.skeletons[node.skin] = currentNode.getComponent(_TransformComponent2.default);
                var invBindShapeMatrixSourceAccessor = recipe.tf.accessors[skinInfo.inverseBindMatrices];
                var invBindShapeMatrixSource = recipe.bufferViews[invBindShapeMatrixSourceAccessor.bufferView];
                var invBindShapeMatrixSourceCasted = new Float32Array(invBindShapeMatrixSource.buffer, invBindShapeMatrixSource.byteOffset, invBindShapeMatrixSource.byteLength / 4);
                var stride = !invBindShapeMatrixSourceAccessor.byteStride ? 4 : invBindShapeMatrixSourceAccessor.byteStride;
                var getInvBindShapeElement = function getInvBindShapeElement(i) {
                    return invBindShapeMatrixSourceCasted[invBindShapeMatrixSourceAccessor.byteOffset / 4 + stride / 4 * i];
                };
                if (model.jointMatrices[node.skin] === void 0) {
                    model.jointMatrices[node.skin] = new Float32Array(skinInfo.joints.length * 16);
                }
                for (var _i = 0; _i < meshes.length; _i++) {
                    meshes[_i].setAttribute("fundamental.MaterialContainer.jointCount", skinInfo.joints.length);
                    meshes[_i].getComponent(_MeshRendererComponent2.default).renderArgs["gltf-jointMatrices"] = model.jointMatrices[node.skin];
                }
                skinInfo.joints.forEach(function (j, jointIndex) {
                    if (instanciatedNodes[j]) {
                        var invBindShapeMatrix = new Array(16);
                        for (var _i2 = 0; _i2 < 16; _i2++) {
                            invBindShapeMatrix[_i2] = getInvBindShapeElement(_i2 + 16 * jointIndex);
                        }
                        instanciatedNodes[j].setAttribute("class", instanciatedNodes[j].getAttribute("class") + " gltf-joint-" + jointIndex);
                        instanciatedNodes[j].addComponent("GLTFJoint", {
                            invBindShapeMatrix: invBindShapeMatrix,
                            skinIndex: node.skin,
                            jointIndex: jointIndex
                        });
                    } else {
                        throw new Error("specified node was not found");
                    }
                });
            }
        }
    }, {
        key: "__applyTransform",
        value: function __applyTransform(node, nodeInfo) {
            var transform = node.getComponent(_TransformComponent2.default);
            if (nodeInfo.rotation) {
                transform.setAttribute("rotation", new _Quaternion2.default([].concat(nodeInfo.rotation)));
            }
            if (nodeInfo.translation) {
                transform.setAttribute("position", new _Vector2.default([].concat(nodeInfo.translation)));
            }
            if (nodeInfo.scale) {
                transform.setAttribute("scale", new _Vector2.default([].concat(nodeInfo.scale)));
            }
            if (nodeInfo.matrix) {
                if (nodeInfo.rotation || nodeInfo.translation || nodeInfo.scale) {
                    throw new Error("Matrix property can not be existed with other transoform property");
                }
                var mat = new _Matrix2.default(nodeInfo.matrix);
                transform.applyMatrix(mat);
            }
        }
    }]);

    return DefaultInstanciator;
}();

exports.default = DefaultInstanciator;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ParserModule2 = __webpack_require__(0);

var _ParserModule3 = _interopRequireDefault(_ParserModule2);

var _ConstantConverter = __webpack_require__(2);

var _ConstantConverter2 = _interopRequireDefault(_ConstantConverter);

var _Texture2D = __webpack_require__(29);

var _Texture2D2 = _interopRequireDefault(_Texture2D);

var _Geometry = __webpack_require__(26);

var _Geometry2 = _interopRequireDefault(_Geometry);

var _MaterialFactory = __webpack_require__(14);

var _MaterialFactory2 = _interopRequireDefault(_MaterialFactory);

var _Quaternion = __webpack_require__(16);

var _Quaternion2 = _interopRequireDefault(_Quaternion);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

var DefaultParserModule = function (_ParserModule) {
    _inherits(DefaultParserModule, _ParserModule);

    function DefaultParserModule() {
        _classCallCheck(this, DefaultParserModule);

        return _possibleConstructorReturn(this, (DefaultParserModule.__proto__ || Object.getPrototypeOf(DefaultParserModule)).apply(this, arguments));
    }

    _createClass(DefaultParserModule, [{
        key: "fetchGLTF",
        value: function fetchGLTF(url) {
            return this.__fetchBuffer(url);
        }
    }, {
        key: "loadAsGLTF",
        value: function loadAsGLTF(buffer) {
            var rawStr = this.__bufferToString(buffer);
            return JSON.parse(rawStr);
        }
    }, {
        key: "loadTextureResources",
        value: function loadTextureResources(tf) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                var _this2 = this;

                var textures, promises, _loop, key;

                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                textures = {};
                                promises = [];

                                if (tf.images) {
                                    _loop = function _loop(key) {
                                        var texture = tf.textures[key];
                                        var promise = _this2.parser.callParserModule(function (t) {
                                            return t.fetchTextureResource;
                                        }, tf.images[texture.source]).then(function (img) {
                                            var texture = _this2.parser.callParserModule(function (t) {
                                                return t.convertTotexture;
                                            }, { tf: tf, image: img, texIndex: key });
                                            textures[key] = texture;
                                        });
                                        promises.push(promise);
                                    };

                                    for (key in tf.textures) {
                                        _loop(key);
                                    }
                                }
                                _context.next = 5;
                                return Promise.all(promises);

                            case 5:
                                return _context.abrupt("return", textures);

                            case 6:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
        /**
         * Start loading texture resource.
         * @return {Promise<Texture2D>} [description]
         */

    }, {
        key: "fetchTextureResource",
        value: function fetchTextureResource(tf) {
            return this.__fetchImage(this.baseDirectory + tf.uri);
        }
        /**
         * Load image as texture
         * @return {Promise<Texture2D>} [description]
         */

    }, {
        key: "convertTotexture",
        value: function convertTotexture(arg) {
            var tex = new _Texture2D2.default(this.__gl);
            tex.update(arg.image);
            var texInfo = arg.tf.textures[arg.texIndex];
            var samplerInfo = {};
            if (!texInfo) {
                samplerInfo = arg.tf.samplers[texInfo.sampler];
            }
            tex.magFilter = samplerInfo.magFilter || WebGLRenderingContext.LINEAR;
            tex.minFilter = samplerInfo.minFilter || WebGLRenderingContext.NEAREST_MIPMAP_LINEAR;
            tex.wrapS = samplerInfo.wrapS || WebGLRenderingContext.REPEAT;
            tex.wrapT = samplerInfo.wrapT || WebGLRenderingContext.REPEAT;
            return tex;
        }
        /**
         * Start loading buffer resource.
         * @return {Promise<ArrayBuffer>} [description]
         */

    }, {
        key: "loadBufferResource",
        value: function loadBufferResource(tf) {
            return this.__fetchBuffer(this.baseDirectory + tf.uri);
        }
    }, {
        key: "loadBufferResources",
        value: function loadBufferResources(tf) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee2() {
                var _this3 = this;

                var buffers, promises, _loop2, key;

                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                buffers = {};
                                promises = [];

                                _loop2 = function _loop2(key) {
                                    promises.push(_this3.parser.callParserModule(function (t) {
                                        return t.loadBufferResource;
                                    }, tf.buffers[key]).then(function (buffer) {
                                        buffers[key] = buffer;
                                    }));
                                };

                                for (key in tf.buffers) {
                                    _loop2(key);
                                }
                                _context2.next = 6;
                                return Promise.all(promises);

                            case 6:
                                return _context2.abrupt("return", buffers);

                            case 7:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));
        }
    }, {
        key: "loadBufferViews",
        value: function loadBufferViews(args) {
            var bufferViews = {};
            for (var key in args.tf.bufferViews) {
                var bufferViewInfo = args.tf.bufferViews[key];
                bufferViews[key] = new Uint8Array(args.buffers[bufferViewInfo.buffer], bufferViewInfo.byteOffset, bufferViewInfo.byteLength);
            }
            return bufferViews;
        }
    }, {
        key: "loadPrimitivesOfMesh",
        value: function loadPrimitivesOfMesh(args) {
            var result = {};
            for (var key in args.tf.meshes) {
                var meshInfo = args.tf.meshes[key];
                var primitives = [];
                result[key] = primitives;
                for (var pKey in meshInfo.primitives) {
                    primitives.push(this.parser.callParserModule(function (t) {
                        return t.loadPrimitive;
                    }, { tf: args.tf, bufferViews: args.bufferViews, primitive: meshInfo.primitives[pKey] }));
                }
            }
            return result;
        }
    }, {
        key: "loadPrimitive",
        value: function loadPrimitive(args) {
            var geo = new _Geometry2.default(this.__gl);
            this.parser.callParserModule(function (t) {
                return t.appendIndices;
            }, { tf: args.tf, bufferViews: args.bufferViews, primitive: args.primitive, geometry: geo });
            this.parser.callParserModule(function (t) {
                return t.addVertexAttributes;
            }, { tf: args.tf, bufferViews: args.bufferViews, primitive: args.primitive, geometry: geo });
            return geo;
        }
    }, {
        key: "appendIndices",
        value: function appendIndices(args) {
            if (args.primitive.indices !== void 0) {
                var topology = args.primitive.mode || WebGLRenderingContext.TRIANGLES;
                var indexAccessor = args.tf.accessors[args.primitive.indices];
                args.geometry.addIndex("default", args.bufferViews[indexAccessor.bufferView], topology, indexAccessor.byteOffset, indexAccessor.count, indexAccessor.componentType);
                return true;
            }
        }
    }, {
        key: "addVertexAttributes",
        value: function addVertexAttributes(args) {
            for (var attrib in args.primitive.attributes) {
                var accessor = args.tf.accessors[args.primitive.attributes[attrib]];
                var bufAccessor = {};
                bufAccessor[attrib] = {
                    size: _ConstantConverter2.default.asVectorSize(accessor.type),
                    type: accessor.componentType,
                    stride: accessor.byteStride,
                    offset: accessor.byteOffset
                };
                args.geometry.addAttributes(args.bufferViews[accessor.bufferView], bufAccessor);
            }
            this.parser.callParserModule(function (t) {
                return t.complementVertexAttributes;
            }, args);
            return true;
        }
    }, {
        key: "complementVertexAttributes",
        value: function complementVertexAttributes(args) {
            return true;
        }
    }, {
        key: "loadMaterials",
        value: function loadMaterials(args) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee3() {
                var result, key;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                result = {};
                                _context3.t0 = regeneratorRuntime.keys(args.tf.materials);

                            case 2:
                                if ((_context3.t1 = _context3.t0()).done) {
                                    _context3.next = 9;
                                    break;
                                }

                                key = _context3.t1.value;
                                _context3.next = 6;
                                return this.parser.callParserModule(function (t) {
                                    return t.loadMaterial;
                                }, { material: args.tf.materials[key], textures: args.textures });

                            case 6:
                                result[key] = _context3.sent;
                                _context3.next = 2;
                                break;

                            case 9:
                                return _context3.abrupt("return", result);

                            case 10:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));
        }
    }, {
        key: "loadMaterial",
        value: function loadMaterial(args) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee4() {
                var material, pmr, matArgs;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                if (!args.material["pbrMetallicRoughness"]) {
                                    _context4.next = 18;
                                    break;
                                }

                                _context4.next = 3;
                                return _MaterialFactory2.default.get(this.__gl).instanciate("gltf-pbr-metallic-roughness");

                            case 3:
                                material = _context4.sent;
                                pmr = args.material["pbrMetallicRoughness"];
                                matArgs = material.arguments;

                                if (pmr.baseColorFactor) {
                                    matArgs.baseColorFactor = pmr.baseColorFactor;
                                }
                                if (pmr.baseColorTexture) {
                                    matArgs.baseColorTexture = args.textures[pmr.baseColorTexture.index];
                                }
                                if (pmr.metallicFactor) {
                                    matArgs.metallicFactor = pmr.metallicFactor;
                                }
                                if (pmr.metallicTexture) {
                                    matArgs.metallicTexture = args.textures[pmr.metallicTexture.index];
                                }
                                if (pmr.roughnessFactor) {
                                    matArgs.roughnessFactor = pmr.roughnessFactor;
                                }
                                if (pmr.roughnessTexture) {
                                    matArgs.roughnessTexture = args.textures[pmr.roughnessTexture.index];
                                }
                                if (pmr.metallicRoughnessTexture) {
                                    matArgs.metallicRoughnessTexture = args.textures[pmr.metallicRoughnessTexture.index];
                                }
                                if (args.material["emissiveFactor"]) {
                                    matArgs.emissiveFactor = args.material["emissiveFactor"];
                                }
                                if (args.material["emissiveTexture"]) {
                                    matArgs.emissiveTexture = args.textures[args.material["emissiveTexture"].index];
                                }
                                if (args.material["normalTexture"]) {
                                    matArgs.normalTexture = args.textures[args.material["normalTexture"].index];
                                }
                                if (args.material["occlusionTexture"]) {
                                    matArgs.occlusionTexture = args.textures[args.material["occlusionTexture"].index];
                                }
                                return _context4.abrupt("return", material);

                            case 18:
                            case "end":
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));
        }
    }, {
        key: "loadAnimations",
        value: function loadAnimations(args) {
            var result = {};
            for (var key in args.tf.animations) {
                var animation = args.tf.animations[key];
                result[key] = this.parser.callParserModule(function (m) {
                    return m.loadAnimation;
                }, { tf: args.tf, bufferViews: args.bufferViews, animation: animation });
            }
            return result;
        }
    }, {
        key: "loadAnimation",
        value: function loadAnimation(args) {
            var defaultClip = [];
            for (var i = 0; i < args.animation.channels.length; i++) {
                var clip = {};
                var channel = args.animation.channels[i];
                var query = ".gltf-node-" + channel.target.node;
                var target = this._pathNameToGrimoire(channel.target.path);
                var sampler = args.animation.samplers[channel.sampler];
                clip.query = query;
                clip.component = target.component;
                clip.attribute = target.attributeName;
                clip.timelines = [];
                var inputAccessor = args.tf.accessors[sampler.input];
                var outputAccessor = args.tf.accessors[sampler.output];
                var inputBuffer = args.bufferViews[inputAccessor.bufferView];
                var outputBuffer = args.bufferViews[outputAccessor.bufferView];
                var elemCount = _ConstantConverter2.default.asVectorSize(outputAccessor.type);
                var inputBufferF32 = new Float32Array(inputBuffer.buffer, inputBuffer.byteOffset + inputAccessor.byteOffset, inputAccessor.count);
                var outputBufferF32 = new Float32Array(outputBuffer.buffer, outputBuffer.byteOffset + outputAccessor.byteOffset, outputAccessor.count * elemCount);
                var times = new Array(inputAccessor.count);
                for (var _i = 0; _i < inputAccessor.count; _i++) {
                    times[_i] = inputBufferF32[_i] * 1000; // SHould consider buffer stride
                }
                var arrays = [];
                if (elemCount === 4 && target.attributeName === "rotation") {
                    arrays = [];
                    for (var _i2 = 0; _i2 < 3; _i2++) {
                        arrays.push([]);
                    }
                    for (var _i3 = 0; _i3 < outputAccessor.count; _i3++) {
                        var x = outputBufferF32[_i3 * elemCount + 0];
                        var y = outputBufferF32[_i3 * elemCount + 1];
                        var z = outputBufferF32[_i3 * elemCount + 2];
                        var w = outputBufferF32[_i3 * elemCount + 3];
                        var q = new _Quaternion2.default([x, y, z, w]).factoringQuaternionXYZ();
                        arrays[0].push(q.x);
                        arrays[1].push(q.y);
                        arrays[2].push(q.z);
                    }
                    elemCount = 3;
                } else {
                    for (var _i4 = 0; _i4 < elemCount; _i4++) {
                        arrays.push([]);
                    }
                    for (var _i5 = 0; _i5 < outputAccessor.count; _i5++) {
                        for (var j = 0; j < elemCount; j++) {
                            arrays[j].push(outputBufferF32[_i5 * elemCount + j]); // SHould consider buffer stride
                        }
                    }
                }
                for (var _i6 = 0; _i6 < elemCount; _i6++) {
                    clip.timelines.push({
                        times: times,
                        values: arrays[_i6]
                    });
                }
                defaultClip.push(clip);
            }
            return {
                default: defaultClip
            };
        }
    }, {
        key: "_pathNameToGrimoire",
        value: function _pathNameToGrimoire(name) {
            switch (name) {
                case "translation":
                    return { component: "Transform", attributeName: "position" };
                case "rotation":
                    return { component: "Transform", attributeName: "rotation" };
                case "scale":
                    return { component: "Transform", attributeName: "scale" };
                default:
                    throw new Error("Unsupported path type on grimoire");
            }
        }
    }]);

    return DefaultParserModule;
}(_ParserModule3.default);

exports.default = DefaultParserModule;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ParserModule2 = __webpack_require__(0);

var _ParserModule3 = _interopRequireDefault(_ParserModule2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EmbeddedBufferModule = function (_ParserModule) {
    _inherits(EmbeddedBufferModule, _ParserModule);

    function EmbeddedBufferModule() {
        _classCallCheck(this, EmbeddedBufferModule);

        return _possibleConstructorReturn(this, (EmbeddedBufferModule.__proto__ || Object.getPrototypeOf(EmbeddedBufferModule)).apply(this, arguments));
    }

    _createClass(EmbeddedBufferModule, [{
        key: "loadBufferResource",
        value: function loadBufferResource(tf) {
            if (this.__isDataUri(tf.uri)) {
                return Promise.resolve(this.__dataUriToArrayBuffer(tf.uri));
            }
        }
    }]);

    return EmbeddedBufferModule;
}(_ParserModule3.default);

exports.default = EmbeddedBufferModule;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ParserModule2 = __webpack_require__(0);

var _ParserModule3 = _interopRequireDefault(_ParserModule2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IndexComplementorModule = function (_ParserModule) {
    _inherits(IndexComplementorModule, _ParserModule);

    function IndexComplementorModule() {
        _classCallCheck(this, IndexComplementorModule);

        return _possibleConstructorReturn(this, (IndexComplementorModule.__proto__ || Object.getPrototypeOf(IndexComplementorModule)).apply(this, arguments));
    }

    _createClass(IndexComplementorModule, [{
        key: "appendIndices",
        value: function appendIndices(args) {
            if (args.primitive.indices === void 0) {
                var topology = args.primitive.mode || WebGLRenderingContext.TRIANGLES;
                var accessor = args.tf.accessors[args.primitive.attributes["POSITION"]];
                if (accessor.count === void 0) {
                    throw new Error("POSITION buffer should have count parameter. Construction of index buffer was failed.");
                }
                if (topology !== WebGLRenderingContext.TRIANGLES) {
                    throw new Error("Complementing index buffer is only supported for TRIANGLES topology currently.");
                }
                var indices = new Array(accessor.count);
                for (var i = 0; i < accessor.count; i++) {
                    indices[i] = i;
                }
                args.geometry.addIndex("default", indices);
                return true;
            }
        }
    }]);

    return IndexComplementorModule;
}(_ParserModule3.default);

exports.default = IndexComplementorModule;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ParserModule2 = __webpack_require__(0);

var _ParserModule3 = _interopRequireDefault(_ParserModule2);

var _Vector = __webpack_require__(17);

var _Vector2 = _interopRequireDefault(_Vector);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NormalComplementorModule = function (_ParserModule) {
    _inherits(NormalComplementorModule, _ParserModule);

    function NormalComplementorModule() {
        _classCallCheck(this, NormalComplementorModule);

        return _possibleConstructorReturn(this, (NormalComplementorModule.__proto__ || Object.getPrototypeOf(NormalComplementorModule)).apply(this, arguments));
    }

    _createClass(NormalComplementorModule, [{
        key: "complementVertexAttributes",
        value: function complementVertexAttributes(args) {
            if (args.primitive.attributes["NORMAL"] === void 0 && args.primitive.attributes["POSITION"] !== void 0) {
                var accessor = args.tf.accessors[args.primitive.attributes["POSITION"]];
                var baseBufferView = args.bufferViews[accessor.bufferView];
                var positions = new Float32Array(baseBufferView.buffer, baseBufferView.byteOffset + accessor.byteOffset);
                if (accessor.byteStride !== void 0 && accessor.byteStride !== 0) {
                    throw new Error("Complementing normal with a position buffer which buffer has stride as a parameter");
                }
                if (!accessor.count) {
                    throw new Error("Accessor count of POSITION buffer should be defined for complementing NORMAL buffer");
                }
                var defaultAccessor = args.tf.accessors[args.primitive.indices];
                // generate normal buffer
                var normal = new Float32Array(accessor.count * 3);
                if (defaultAccessor) {
                    var bufferSource = args.bufferViews[defaultAccessor.bufferView];
                    var byteAccessor = this.__getBufferReader(bufferSource, defaultAccessor.componentType, defaultAccessor.byteOffset, defaultAccessor.byteStride);
                    for (var i = 0; i < accessor.count / 3; i++) {
                        this._calcFlatNormal(positions, normal, byteAccessor(3 * i), byteAccessor(3 * i + 1), byteAccessor(3 * i + 2));
                    }
                } else {
                    for (var _i = 0; _i < accessor.count / 3; _i++) {
                        this._calcFlatNormal(positions, normal, 3 * _i, 3 * _i + 1, 3 * _i + 2);
                    }
                }
                // add normal to geometry
                args.geometry.addAttributes(normal, {
                    NORMAL: {
                        size: 3
                    }
                });
            }
            return false;
        }
    }, {
        key: "_getElement",
        value: function _getElement(positions, posbase, elemIndex) {
            return positions[posbase + elemIndex];
        }
    }, {
        key: "_calcFlatNormal",
        value: function _calcFlatNormal(positions, normals, i0, i1, i2) {
            var v0Tov1 = new _Vector2.default(this._getElement(positions, 3 * i1, 0) - this._getElement(positions, 3 * i0, 0), this._getElement(positions, 3 * i1, 1) - this._getElement(positions, 3 * i0, 1), this._getElement(positions, 3 * i1, 2) - this._getElement(positions, 3 * i0, 2));
            var v0Tov2 = new _Vector2.default(this._getElement(positions, 3 * i2, 0) - this._getElement(positions, 3 * i0, 0), this._getElement(positions, 3 * i2, 1) - this._getElement(positions, 3 * i0, 1), this._getElement(positions, 3 * i2, 2) - this._getElement(positions, 3 * i0, 2));
            var nor = _Vector2.default.cross(v0Tov1, v0Tov2).normalizeThis();
            normals[3 * i0] = nor.X;
            normals[3 * i0 + 1] = nor.Y;
            normals[3 * i0 + 2] = nor.Z;
            normals[3 * i1] = nor.X;
            normals[3 * i1 + 1] = nor.Y;
            normals[3 * i1 + 2] = nor.Z;
            normals[3 * i2] = nor.X;
            normals[3 * i2 + 1] = nor.Y;
            normals[3 * i2 + 2] = nor.Z;
        }
    }]);

    return NormalComplementorModule;
}(_ParserModule3.default);

exports.default = NormalComplementorModule;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DefaultParserModule = __webpack_require__(5);

var _DefaultParserModule2 = _interopRequireDefault(_DefaultParserModule);

var _NormalComplementorModule = __webpack_require__(8);

var _NormalComplementorModule2 = _interopRequireDefault(_NormalComplementorModule);

var _IndexComplementorModule = __webpack_require__(7);

var _IndexComplementorModule2 = _interopRequireDefault(_IndexComplementorModule);

var _EmbeddedBufferModule = __webpack_require__(6);

var _EmbeddedBufferModule2 = _interopRequireDefault(_EmbeddedBufferModule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// Modules

var GLTFParser = function () {
    function GLTFParser(gl, url) {
        _classCallCheck(this, GLTFParser);

        this.gl = gl;
        this.url = url;
        this.parserModuleInstances = [];
        for (var i = 0; i < GLTFParser.parserModules.length; i++) {
            var moduleCtor = GLTFParser.parserModules[i];
            this.parserModuleInstances.push(new moduleCtor(this, url.substr(0, url.lastIndexOf("/") + 1)));
        }
    }

    _createClass(GLTFParser, [{
        key: "callParserModule",
        value: function callParserModule(target, arg) {
            for (var i = 0; i < this.parserModuleInstances.length; i++) {
                var module = this.parserModuleInstances[i];
                var moduleMethod = target(module);
                if (moduleMethod === void 0) {
                    continue;
                }
                var result = moduleMethod.call(module, arg);
                if (result !== void 0) {
                    return result;
                }
            }
            throw new Error("Parsing gltf failed. At the module \"" + target.toString() + "\"");
        }
    }, {
        key: "parse",
        value: function parse() {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                var _this = this;

                var result, gltfRaw, gltf, textureResourcePromise, bufferResources;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                result = {};
                                _context.next = 3;
                                return this.callParserModule(function (t) {
                                    return t.fetchGLTF;
                                }, this.url);

                            case 3:
                                gltfRaw = _context.sent;
                                gltf = this.callParserModule(function (t) {
                                    return t.loadAsGLTF;
                                }, gltfRaw);

                                result.tf = gltf;
                                _context.next = 8;
                                return this.callParserModule(function (t) {
                                    return t.loadTextureResources;
                                }, gltf).then(function (textures) {
                                    return _this.callParserModule(function (t) {
                                        return t.loadMaterials;
                                    }, { tf: gltf, textures: textures });
                                }).then(function (materials) {
                                    result.materials = materials;
                                });

                            case 8:
                                textureResourcePromise = _context.sent;
                                _context.next = 11;
                                return this.callParserModule(function (t) {
                                    return t.loadBufferResources;
                                }, gltf).then(function (buffers) {
                                    var bufferViews = _this.callParserModule(function (t) {
                                        return t.loadBufferViews;
                                    }, { tf: gltf, buffers: buffers });
                                    var primitives = _this.callParserModule(function (t) {
                                        return t.loadPrimitivesOfMesh;
                                    }, { tf: gltf, bufferViews: bufferViews });
                                    var animations = _this.callParserModule(function (t) {
                                        return t.loadAnimations;
                                    }, { tf: gltf, bufferViews: bufferViews });
                                    result.primitives = primitives;
                                    result.bufferViews = bufferViews;
                                    result.animations = animations;
                                });

                            case 11:
                                bufferResources = _context.sent;
                                return _context.abrupt("return", result);

                            case 13:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }], [{
        key: "parseFromURL",
        value: function parseFromURL(gl, url) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee2() {
                var parser;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                parser = new GLTFParser(gl, url);
                                return _context2.abrupt("return", parser.parse());

                            case 2:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));
        }
    }]);

    return GLTFParser;
}();

exports.default = GLTFParser;

GLTFParser.parserModules = [_EmbeddedBufferModule2.default, _IndexComplementorModule2.default, _NormalComplementorModule2.default, _DefaultParserModule2.default];

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ImageResolver = __webpack_require__(12);

var _ImageResolver2 = _interopRequireDefault(_ImageResolver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Base class of ParserModule.
 * Provides utility for parsing glTF files.
 */
var ParserModuleBase = function () {
    function ParserModuleBase() {
        _classCallCheck(this, ParserModuleBase);
    }

    _createClass(ParserModuleBase, [{
        key: "__fetchBuffer",
        value: function __fetchBuffer(url) {
            return new Promise(function (resolve, reject) {
                var xhr = new XMLHttpRequest();
                xhr.open("GET", url);
                xhr.responseType = "arraybuffer";
                xhr.onload = function (v) {
                    resolve(xhr.response);
                };
                xhr.onerror = function (e) {
                    reject({
                        message: "Loading resource at '" + url + " failed. Is there resource file in dependency at correct location?'",
                        error: e
                    });
                };
                xhr.send();
            });
        }
    }, {
        key: "__fetchImage",
        value: function __fetchImage(url) {
            return _ImageResolver2.default.resolve(url);
        }
        /**
         * Check provided string being data uri or not.
         * @param  {string}  target [description]
         * @return {boolean}        [description]
         */

    }, {
        key: "__isDataUri",
        value: function __isDataUri(target) {
            return !!target.match(/^\s*data\:.*;base64/);
        }
        /**
         * Get directiory location from specified url
         * @param  {string} url [description]
         * @return {string}     [description]
         */

    }, {
        key: "__getBaseDir",
        value: function __getBaseDir(url) {
            return url.substr(0, url.lastIndexOf("/") + 1);
        }
        /**
         * Convert dataURI text to raw text
         * @param  {string} dataUrl [description]
         * @return {string}         [description]
         */

    }, {
        key: "__dataUriToText",
        value: function __dataUriToText(dataUrl) {
            var splittedUri = dataUrl.split(",");
            var byteString = atob(splittedUri[1]);
            return byteString;
        }
        /**
         * Convert data url string into array buffer
         * @param  {string}      dataUri [description]
         * @return {ArrayBuffer}         [description]
         */

    }, {
        key: "__dataUriToArrayBuffer",
        value: function __dataUriToArrayBuffer(dataUri) {
            var splittedUri = dataUri.split(",");
            var byteString = atob(splittedUri[1]);
            var byteStringLength = byteString.length;
            var arrayBuffer = new ArrayBuffer(byteStringLength);
            var uint8Array = new Uint8Array(arrayBuffer);
            for (var i = 0; i < byteStringLength; i++) {
                uint8Array[i] = byteString.charCodeAt(i);
            }
            return arrayBuffer;
        }
        /**
         * Convert data uri into image element
         * @param  {string}  dataUrl [description]
         * @return {Promise}         [description]
         */

    }, {
        key: "__dataUriToImage",
        value: function __dataUriToImage(dataUrl) {
            return new Promise(function (resolve, reject) {
                var image = new Image();
                image.src = dataUrl;
                image.onload = function () {
                    resolve(image);
                };
            });
        }
    }, {
        key: "__bufferToString",
        value: function __bufferToString(arr) {
            var tmp = "";
            var len = 1024;
            for (var p = 0; p < arr.byteLength; p += len) {
                tmp += this._smallBufferToString(new Uint8Array(arr.slice(p, p + len)));
            }
            return tmp;
        }
    }, {
        key: "__getBufferReader",
        value: function __getBufferReader(arr) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : WebGLRenderingContext.UNSIGNED_BYTE;
            var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var stride = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

            var singleByte = 0;
            switch (type) {
                case WebGLRenderingContext.UNSIGNED_BYTE:
                    arr = new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
                    break;
                case WebGLRenderingContext.UNSIGNED_SHORT:
                    arr = new Uint16Array(arr.buffer, arr.byteOffset, arr.byteLength);
                    break;
                case WebGLRenderingContext.UNSIGNED_BYTE:
                    arr = new Uint32Array(arr.buffer, arr.byteOffset, arr.byteLength);
                    break;
                default:
                    throw new Error("Unknown array buffer");
            }
            if (stride !== 0) {
                throw new Error("Accessing a buffer with stride is not supported yet.");
            }
            return function (i) {
                return arr[offset + i];
            };
        }
    }, {
        key: "_smallBufferToString",
        value: function _smallBufferToString(arr) {
            return String.fromCharCode.apply("", arr);
        }
    }]);

    return ParserModuleBase;
}();

exports.default = ParserModuleBase;

/***/ }),
/* 11 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS;

/***/ }),
/* 12 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Asset.ImageResolver;

/***/ }),
/* 13 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Components.TransformComponent;

/***/ }),
/* 14 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Material.MaterialFactory;

/***/ }),
/* 15 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math.Matrix;

/***/ }),
/* 16 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math.Quaternion;

/***/ }),
/* 17 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math.Vector3;

/***/ }),
/* 18 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.Node.Component;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ConstantConverter = __webpack_require__(2);

var _ConstantConverter2 = _interopRequireDefault(_ConstantConverter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The accessor class to be used for fetching animation frames
 */
var Accessor = function () {
    function Accessor(buffer, count, componentType, elementSize, byteOffset, byteStride) {
        _classCallCheck(this, Accessor);

        this.buffer = buffer;
        this.count = count;
        this.componentType = componentType;
        this.elementSize = elementSize;
        this.byteOffset = byteOffset;
        this.byteStride = byteStride;
        this._dView = new DataView(buffer.buffer, buffer.byteOffset + byteOffset);
        this._elementByteSize = _ConstantConverter2.default.asByteSize(componentType);
        if (byteStride === 0) {
            this.byteStride = this.elementSize * this._elementByteSize;
        }
    }

    _createClass(Accessor, [{
        key: "getByIndex",
        value: function getByIndex(index) {
            if (index < 0 || index >= this.count) {
                return null;
            }
            var res = new Array(this.elementSize);
            for (var i = 0; i < this.elementSize; i++) {
                res[i] = this._getSingleByIndex(index, i);
            }
            return res;
        }
    }, {
        key: "_getSingleByIndex",
        value: function _getSingleByIndex(index, elementIndex) {
            switch (this.componentType) {
                case WebGLRenderingContext.FLOAT:
                    return this._dView.getFloat32(index * this.byteStride + this._elementByteSize * elementIndex, true);
                default:
                    throw new Error("Unsupported element type");
            }
        }
    }]);

    return Accessor;
}();

exports.default = Accessor;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _TextFileResolver = __webpack_require__(24);

var _TextFileResolver2 = _interopRequireDefault(_TextFileResolver);

var _ImageResolver = __webpack_require__(12);

var _ImageResolver2 = _interopRequireDefault(_ImageResolver);

var _HashCalculator = __webpack_require__(31);

var _HashCalculator2 = _interopRequireDefault(_HashCalculator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides resolving resource dependency while parsing gltf file.
 */
var ResourceResolver = function () {
    function ResourceResolver(_rootPath) {
        _classCallCheck(this, ResourceResolver);

        this._rootPath = _rootPath;
        this.baseDirectory = this._getBaseDir(_rootPath);
    }

    _createClass(ResourceResolver, [{
        key: "loadGLTFFile",
        value: function loadGLTFFile() {
            var _this = this;

            return new Promise(function (resolve, reject) {
                var xhr = new XMLHttpRequest();
                xhr.open("GET", _this._rootPath);
                xhr.responseType = "arraybuffer";
                xhr.onload = function (v) {
                    var uiarr = new Uint8Array(xhr.response);
                    var glTFMagic = [103, 108, 84, 70];
                    var isBinary = true;
                    for (var i = 0; i < glTFMagic.length; i++) {
                        if (uiarr[i] !== glTFMagic[i]) {
                            isBinary = false;
                        }
                    }
                    var resultJson = void 0;
                    if (isBinary) {
                        var darr = new DataView(xhr.response);
                        var fl = darr.getUint32(8, true); // fullLength
                        var l = darr.getUint32(12, true); // contentLength
                        resultJson = _this._bufferToString(xhr.response.slice(20, 20 + l));
                        _this.binaryGLTFBuffer = xhr.response.slice(20 + l, fl);
                    } else {
                        resultJson = _this._bufferToString(xhr.response);
                    }
                    _this.tf = JSON.parse(resultJson);
                    _this.tf.id = _HashCalculator2.default.calcHash(resultJson);
                    resolve(_this.tf);
                };
                xhr.onerror = function (e) {
                    // reject({
                    //   message: `Loading resource at '${this.baseDirectory + url} failed. Is there resource file in dependency at correct location?'`,
                    //   error:e
                    // });
                };
                xhr.send();
            });
        }
        /**
         * Load image from specified url or dataURL.
         * @param  {string}  url [description]
         * @return {Promise}     [description]
         */

    }, {
        key: "loadImage",
        value: function loadImage(image) {
            var url = image.uri;
            var isBlob = false;
            if (image["extensions"] && image["extensions"]["KHR_binary_glTF"]) {
                var binaryInfo = image["extensions"]["KHR_binary_glTF"];
                var bufferViewInfo = this.tf.bufferViews[binaryInfo.bufferView];
                var blob = new Blob([new Uint8Array(this.binaryGLTFBuffer, bufferViewInfo.byteOffset, bufferViewInfo.byteLength)], {
                    type: binaryInfo.mimeType
                });
                url = window.URL.createObjectURL(blob);
                isBlob = true;
            }
            if (this._isDataUrl(url)) {
                return this._dataUriToImage(url);
            } else {
                return _ImageResolver2.default.resolve(isBlob ? url : this.baseDirectory + url);
            }
        }
        /**
         * Load buffer from specified url or dataURL.
         * @return {Promise<ArrayBuffer>} [description]
         */

    }, {
        key: "loadBuffer",
        value: function loadBuffer(url) {
            var _this2 = this;

            if (this._isDataUrl(url)) {
                return new Promise(function (resolve, reject) {
                    resolve(_this2._dataUriToArrayBuffer(url));
                });
            }
            return new Promise(function (resolve, reject) {
                var xhr = new XMLHttpRequest();
                xhr.open("GET", _this2.baseDirectory + url);
                xhr.responseType = "arraybuffer";
                xhr.onload = function (v) {
                    resolve(xhr.response);
                };
                xhr.onerror = function (e) {
                    reject({
                        message: "Loading resource at '" + (_this2.baseDirectory + url) + " failed. Is there resource file in dependency at correct location?'",
                        error: e
                    });
                };
                xhr.send();
            });
        }
        /**
         * Load string from specified url or dataURL
         * @param  {string}          url [description]
         * @return {Promise<string>}     [description]
         */

    }, {
        key: "loadShader",
        value: function loadShader(shader) {
            var url = shader.uri;
            var isBlob = false;
            if (shader["extensions"] && shader["extensions"]["KHR_binary_glTF"]) {
                var binaryInfo = shader["extensions"]["KHR_binary_glTF"];
                var bufferViewInfo = this.tf.bufferViews[binaryInfo.bufferView];
                var blob = new Blob([new Uint8Array(this.binaryGLTFBuffer, bufferViewInfo.byteOffset, bufferViewInfo.byteLength)], {
                    type: "text/plain"
                });
                url = window.URL.createObjectURL(blob);
                isBlob = true;
            }
            if (this._isDataUrl(url)) {
                return Promise.resolve(this._dataUriToText(url));
            } else {
                return _TextFileResolver2.default.resolve(isBlob ? url : this.baseDirectory + url);
            }
        }
        /**
         * Convert data url string into array buffer
         * @param  {string}      dataUri [description]
         * @return {ArrayBuffer}         [description]
         */

    }, {
        key: "_dataUriToArrayBuffer",
        value: function _dataUriToArrayBuffer(dataUri) {
            var splittedUri = dataUri.split(",");
            var byteString = atob(splittedUri[1]);
            var byteStringLength = byteString.length;
            var arrayBuffer = new ArrayBuffer(byteStringLength);
            var uint8Array = new Uint8Array(arrayBuffer);
            for (var i = 0; i < byteStringLength; i++) {
                uint8Array[i] = byteString.charCodeAt(i);
            }
            return arrayBuffer;
        }
        /**
         * Convert data uri into image element
         * @param  {string}  dataUrl [description]
         * @return {Promise}         [description]
         */

    }, {
        key: "_dataUriToImage",
        value: function _dataUriToImage(dataUrl) {
            var _this3 = this;

            return new Promise(function (resolve, reject) {
                var canvas = document.createElement("canvas");
                var context = canvas.getContext("2d");
                var image = new Image();
                image.src = dataUrl;
                image.onload = function () {
                    resolve(_this3._ensureCorrectSize(image));
                };
            });
        }
    }, {
        key: "_dataUriToText",
        value: function _dataUriToText(dataUrl) {
            var splittedUri = dataUrl.split(",");
            var byteString = atob(splittedUri[1]);
            return byteString;
        }
    }, {
        key: "_ensureCorrectSize",
        value: function _ensureCorrectSize(image) {
            var canvas = document.createElement("canvas");
            var context = canvas.getContext("2d");
            var cWidth = Math.pow(2, Math.ceil(Math.log(image.width) / Math.LN2));
            var cHeight = Math.pow(2, Math.ceil(Math.log(image.height) / Math.LN2));
            if (cWidth === image.width && cHeight === image.height) {
                return image;
            }
            canvas.width = cWidth;
            canvas.height = cHeight;
            context.drawImage(image, 0, 0, image.width, image.height, 0, 0, cWidth, cHeight);
            return canvas;
        }
    }, {
        key: "_bufferToString",
        value: function _bufferToString(arr) {
            var tmp = "";
            var len = 1024;
            for (var p = 0; p < arr.byteLength; p += len) {
                tmp += this._smallBufferToString(new Uint8Array(arr.slice(p, p + len)));
            }
            return tmp;
        }
    }, {
        key: "_smallBufferToString",
        value: function _smallBufferToString(arr) {
            return String.fromCharCode.apply("", arr);
        }
        /**
         * Check specified url is dataUrl or not
         * @param  {string}  dataUrl [description]
         * @return {boolean}         [description]
         */

    }, {
        key: "_isDataUrl",
        value: function _isDataUrl(dataUrl) {
            return !!dataUrl.match(/^\s*data\:.*;base64/);
        }
        /**
         * Get directiory location from specified url
         * @param  {string} url [description]
         * @return {string}     [description]
         */

    }, {
        key: "_getBaseDir",
        value: function _getBaseDir(url) {
            return url.substr(0, url.lastIndexOf("/") + 1);
        }
    }]);

    return ResourceResolver;
}();

exports.default = ResourceResolver;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _GLTFJointComponent = __webpack_require__(3);

var _GLTFJointComponent2 = _interopRequireDefault(_GLTFJointComponent);

var _GLTFModelComponent = __webpack_require__(1);

var _GLTFModelComponent2 = _interopRequireDefault(_GLTFModelComponent);

var _grimoirejs = __webpack_require__(11);

var _grimoirejs2 = _interopRequireDefault(_grimoirejs);

var _MaterialFactory = __webpack_require__(14);

var _MaterialFactory2 = _interopRequireDefault(_MaterialFactory);

var _UniformResolverRegistry = __webpack_require__(27);

var _UniformResolverRegistry2 = _interopRequireDefault(_UniformResolverRegistry);

var _gltfUnlit = __webpack_require__(35);

var _gltfUnlit2 = _interopRequireDefault(_gltfUnlit);

var _gltfPbrMetallicRoughness = __webpack_require__(34);

var _gltfPbrMetallicRoughness2 = _interopRequireDefault(_gltfPbrMetallicRoughness);

var _ImportResolver = __webpack_require__(30);

var _ImportResolver2 = _interopRequireDefault(_ImportResolver);

var _GLExtRequestor = __webpack_require__(28);

var _GLExtRequestor2 = _interopRequireDefault(_GLExtRequestor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

exports.default = function () {
    if (typeof _ImportResolver2.default.staticImports["forward-shading"] !== "string") {
        _ImportResolver2.default.staticImports["forward-shading"] = "";
    }
    _GLExtRequestor2.default.request("OES_standard_derivatives");
    _GLExtRequestor2.default.request("OES_element_index_uint");
    _grimoirejs2.default.register(function () {
        return __awaiter(undefined, void 0, void 0, regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _grimoirejs2.default.registerComponent("GLTFModel", _GLTFModelComponent2.default);
                            _grimoirejs2.default.registerComponent("GLTFJoint", _GLTFJointComponent2.default);
                            _grimoirejs2.default.registerNode("model", ["GLTFModel"], {}, "object");
                            _grimoirejs2.default.registerNode("gltf-mesh", [], {
                                material: "new(gltf-unlit)"
                            }, "mesh");
                            _grimoirejs2.default.registerNode("gltf-joint", ["GLTFJoint"], {}, "object");
                            _grimoirejs2.default.registerNode("gltf-assets", [], {});
                            _MaterialFactory2.default.addSORTMaterial("gltf-unlit", _gltfUnlit2.default);
                            _MaterialFactory2.default.addSORTMaterial("gltf-pbr-metallic-roughness", _gltfPbrMetallicRoughness2.default);
                            _UniformResolverRegistry2.default.add("JOINTMATRIX", function (valInfo, material) {
                                return function (proxy, info) {
                                    if (info.renderable.renderArgs["gltf-jointMatrices"]) {
                                        proxy.uniformMatrixArray(valInfo.name, info.renderable.renderArgs["gltf-jointMatrices"]);
                                    }
                                };
                            });

                        case 9:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));
    });
};

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Accessor = __webpack_require__(19);

var _Accessor2 = _interopRequireDefault(_Accessor);

var _GLTFJointComponent = __webpack_require__(3);

var _GLTFJointComponent2 = _interopRequireDefault(_GLTFJointComponent);

var _GLTFModelComponent = __webpack_require__(1);

var _GLTFModelComponent2 = _interopRequireDefault(_GLTFModelComponent);

var _DefaultInstanciator = __webpack_require__(4);

var _DefaultInstanciator2 = _interopRequireDefault(_DefaultInstanciator);

var _ConstantConverter = __webpack_require__(2);

var _ConstantConverter2 = _interopRequireDefault(_ConstantConverter);

var _DefaultParserModule = __webpack_require__(5);

var _DefaultParserModule2 = _interopRequireDefault(_DefaultParserModule);

var _EmbeddedBufferModule = __webpack_require__(6);

var _EmbeddedBufferModule2 = _interopRequireDefault(_EmbeddedBufferModule);

var _IndexComplementorModule = __webpack_require__(7);

var _IndexComplementorModule2 = _interopRequireDefault(_IndexComplementorModule);

var _NormalComplementorModule = __webpack_require__(8);

var _NormalComplementorModule2 = _interopRequireDefault(_NormalComplementorModule);

var _Parser = __webpack_require__(9);

var _Parser2 = _interopRequireDefault(_Parser);

var _ParserModule = __webpack_require__(0);

var _ParserModule2 = _interopRequireDefault(_ParserModule);

var _ParserModuleBase = __webpack_require__(10);

var _ParserModuleBase2 = _interopRequireDefault(_ParserModuleBase);

var _ResourceResolver = __webpack_require__(20);

var _ResourceResolver2 = _interopRequireDefault(_ResourceResolver);

var _main = __webpack_require__(21);

var _main2 = _interopRequireDefault(_main);

var _grimoirejs = __webpack_require__(11);

var _grimoirejs2 = _interopRequireDefault(_grimoirejs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __VERSION__ = "2.1.2";
var __NAME__ = "grimoirejs-gltf";

var __EXPOSE__ = {
    "Accessor": {
        "Accessor": _Accessor2.default
    },
    "Components": {
        "GLTFJointComponent": _GLTFJointComponent2.default,
        "GLTFModelComponent": _GLTFModelComponent2.default
    },
    "Instanciator": {
        "DefaultInstanciator": _DefaultInstanciator2.default
    },
    "Parser": {
        "ConstantConverter": _ConstantConverter2.default,
        "DefaultParserModule": _DefaultParserModule2.default,
        "Modules": {
            "EmbeddedBufferModule": _EmbeddedBufferModule2.default,
            "IndexComplementorModule": _IndexComplementorModule2.default,
            "NormalComplementorModule": _NormalComplementorModule2.default
        },
        "Parser": _Parser2.default,
        "ParserModule": _ParserModule2.default,
        "ParserModuleBase": _ParserModuleBase2.default
    },
    "Util": {
        "ResourceResolver": _ResourceResolver2.default
    }
};

_grimoirejs2.default.notifyRegisteringPlugin(__NAME__);
var __BASE__ = (0, _main2.default)();
Object.assign(__EXPOSE__, {
    __VERSION__: __VERSION__,
    __NAME__: __NAME__
});
Object.assign(__BASE__ || {}, __EXPOSE__);
window["GrimoireJS"].lib.gltf = __EXPOSE__;
exports.default = __BASE__;

/***/ }),
/* 23 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.animation.Animation.AnimationFactory;

/***/ }),
/* 24 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Asset.TextFileResolver;

/***/ }),
/* 25 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Components.MeshRendererComponent;

/***/ }),
/* 26 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Geometry.Geometry;

/***/ }),
/* 27 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Material.UniformResolverRegistry;

/***/ }),
/* 28 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Resource.GLExtRequestor;

/***/ }),
/* 29 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Resource.Texture2D;

/***/ }),
/* 30 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Sort.ImportResolver;

/***/ }),
/* 31 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Util.HashCalculator;

/***/ }),
/* 32 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math.Color3;

/***/ }),
/* 33 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math.Color4;

/***/ }),
/* 34 */
/***/ (function(module, exports) {

module.exports = "@Pass{\n#extension GL_OES_standard_derivatives : enable\n@BlendFunc(SRC_ALPHA,ONE_MINUS_SRC_ALPHA)\n@ExposeMacro(int,jointCount,JOINT_COUNT,0)\nFS_PREC(mediump,float)\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUV;\n\n#ifdef VS\n#if JOINT_COUNT > 0\n  @JOINTMATRIX\n  uniform mat4 boneMatrices[JOINT_COUNT];\n#endif\n  @NORMAL\n  attribute vec3 normal;\n  @POSITION\n  attribute vec3 position;\n#ifdef ATTRIBUTE_TEXCOORD_0_ENABLED\n  @TEXCOORD_0\n  attribute vec2 texCoord;\n#endif\n#if JOINT_COUNT > 0\n  @JOINTS_0\n  attribute vec4 joint;\n  @WEIGHTS_0\n  attribute vec4 weight;\n#endif\n  uniform mat4 _matPVM;\n  uniform mat4 _matM;\n  void main(){\n    mat4 transform = _matM;\n    mat4 projectionTransform = _matPVM;\n    #if JOINT_COUNT > 0\n      mat4 skinMat = weight.x * boneMatrices[int(joint.x)] + weight.y * boneMatrices[int(joint.y)] + weight.z * boneMatrices[int(joint.z)] + weight.w * boneMatrices[int(joint.w)];\n      transform *= skinMat;\n      projectionTransform *= skinMat;\n    #endif\n    #ifdef ATTRIBUTE_TEXCOORD_0_ENABLED\n        vUV = texCoord;\n    #else\n        vUV  = position.xy /2.0 + vec2(0.5);\n    #endif\n    vNormal = normalize((transform * vec4(normal,0.0)).xyz);\n    vPosition = (transform * vec4(position,1.0)).xyz;\n    gl_Position = projectionTransform * vec4(position,1.0);\n  }\n\n\n#endif\n\n\n#ifdef FS\n  @HAS_TEXTURE{sampler:\"normalTexture\"}\n  uniform bool has_normalTexture;\n\n  uniform sampler2D normalTexture;\n\n  @{default:\"1,1,1,1\"}\n  uniform vec4 baseColorFactor;\n\n  uniform sampler2D baseColorTexture;\n\n  @HAS_TEXTURE{sampler:\"baseColorTexture\"}\n  uniform bool has_baseColorTexture;\n\n  @{default:\"1\"}\n  uniform float metallicFactor;\n\n  uniform sampler2D metallicTexture;\n\n  @HAS_TEXTURE{sampler:\"metallicTexture\"}\n  uniform bool has_metallicTexture;\n\n  @{default:\"1\"}\n  uniform float roughnessFactor;\n\n  uniform sampler2D roughnessTexture;\n\n  @HAS_TEXTURE{sampler:\"roughnessTexture\"}\n  uniform bool has_roughnessTexture;\n\n  @{default:\"0,0,0\"}\n  uniform vec3 emissiveFactor;\n\n  uniform sampler2D emissiveTexture;\n\n  @HAS_TEXTURE{sampler:\"emissiveTexture\"}\n  uniform bool has_emissiveTexture;\n\n  uniform sampler2D metallicRoughnessTexture;\n\n  @HAS_TEXTURE{sampler:\"metallicRoughnessTexture\"}\n  uniform bool has_metallicRoughnessTexture;\n\n  uniform sampler2D occlusionTexture;\n\n  @HAS_TEXTURE{sampler:\"occlusionTexture\"}\n  uniform bool has_occlusionTexture;\n\n  @CAMERA_POSITION\n  uniform vec3 _cameraPosition;\n\n  @import \"forward-shading\"\n\n  #ifndef GR_FORWARD_SHADING_ENABLED\n\n  struct simple_pbr_params{\n    vec3 diffuseColor;\n    vec3 f0;\n    float alpha;\n    float roughness;\n  };\n\n    @{default:\"n(3,0.5,10)\"}\n    uniform vec3 simpleLightDirection;\n\n    @{type:\"color\",default:\"gray\"}\n    uniform vec3 simpleLightColor;\n\n    @{default:0.3}\n    uniform float simpleLightIntencity;\n\n    float lambert(vec3 lightDirection,vec3 surfaceNormal) {\n      return max(0.0, dot(lightDirection, surfaceNormal));\n    }\n\n    float ctd_GGX_Distribution(simple_pbr_params param,vec3 l,vec3 v,vec3 n,vec3 h){\n      float alpha2 = pow(param.alpha,2.0);\n      float nh2 = pow(dot(n,h),2.0);\n      return alpha2/(PI*pow(nh2*(alpha2 - 1.0) + 1.0,2.0));\n    }\n\n    float ctg_GGX_SingleGeometryTerm(simple_pbr_params param,vec3 n,vec3 v){\n      float d = dot(n,v);\n      return 2.*d /(d + sqrt(d*d + param.alpha*param.alpha*(1. - d*d)));\n    }\n\n    vec3 ctf_Schlick(simple_pbr_params param,vec3 l,vec3 v,vec3 n,vec3 h){\n      vec3 f0 = param.f0;\n      float vh = dot(v,n);\n      return f0 + pow(1.0-vh,5.0) * (vec3(1.0) - f0);\n    }\n\n    vec3 cookTorranceBRDF(simple_pbr_params param,vec3 l,vec3 v,vec3 n){\n      vec3 h = normalize(l+v);\n      return  ctf_Schlick(param,l,v,n,h) * ctd_GGX_Distribution(param,l,v,n,h) * ctg_GGX_SingleGeometryTerm(param,n,l) * ctg_GGX_SingleGeometryTerm(param,n,v)/(4.0 * dot(l,n) * dot(v,n));\n    }\n\n    vec3 BRDF(simple_pbr_params params,vec3 li,vec3 lo,vec3 n){\n      return params.diffuseColor/PI + cookTorranceBRDF(params,li,lo,n);\n    }\n\n  #endif\n\n\n  void main(){\n    vec4 baseColor = baseColorFactor;\n    if(has_baseColorTexture){\n      baseColor *= texture2D(baseColorTexture,vUV);\n    }\n    vec3 emissive = emissiveFactor;\n    if(has_emissiveTexture){\n      emissive *= texture2D(emissiveTexture,vUV).rgb;\n    }\n    float metallic = metallicFactor;\n    if(has_metallicTexture){\n      metallic *= texture2D(metallicTexture,vUV).r;\n    }\n    float roughness = roughnessFactor;\n    if(has_roughnessTexture){\n      roughness *= texture2D(roughnessTexture,vUV).r;\n    }\n    if(has_metallicRoughnessTexture){\n      vec3 rm = texture2D(metallicRoughnessTexture,vUV).rgb;\n      metallic *= rm.b;\n      roughness *= rm.g;\n    }\n    vec3 normal = vNormal;\n    if(has_normalTexture){\n      vec3 pos_dx = dFdx(vPosition);\n      vec3 pos_dy = dFdy(vPosition);\n      vec3 tex_dx = dFdx(vec3(vUV, 0.0));\n      vec3 tex_dy = dFdy(vec3(vUV, 0.0));\n      vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\n      t = normalize(t - vNormal * dot(vNormal, t));\n      vec3 b = normalize(cross(vNormal, t));\n      mat3 tbn = mat3(t, b, vNormal);\n      vec3 n = texture2D(normalTexture, vUV).rgb;\n      normal = normalize(tbn * (2.0 * n - 1.0));\n    }\n    vec3 dielectricSpecular = vec3(0.04);\n    vec3 diffuse = mix(baseColor.rgb * (1. - dielectricSpecular.r),vec3(0),metallic);\n    vec3 f0 = mix(dielectricSpecular,baseColor.rgb,metallic);\n    float alpha = roughness * roughness;\n    #ifdef GR_FORWARD_SHADING_ENABLED\n      pbr_params param = pbr_params(diffuse,f0,alpha,roughness);\n      gl_FragColor.rgb = shading(param,normal,vPosition);\n    #endif\n    #ifndef GR_FORWARD_SHADING_ENABLED\n      simple_pbr_params params = simple_pbr_params(diffuse,f0,alpha,roughness);\n      float lam = lambert(simpleLightDirection,normal);\n      vec3 brdfCoeff = BRDF(params,-simpleLightDirection,normalize(_cameraPosition - vPosition),normal);\n      gl_FragColor.rgb = vec3(lam) * simpleLightIntencity * simpleLightColor * brdfCoeff;\n    #endif\n    gl_FragColor.rgb += emissive;\n    gl_FragColor.rgb = pow(gl_FragColor.rgb,1.0/vec3(2.2));\n    if(has_occlusionTexture){\n      gl_FragColor.rgb *= texture2D(occlusionTexture,vUV).r;\n    }\n    gl_FragColor.a = baseColor.a;\n  }\n#endif\n}\n"

/***/ }),
/* 35 */
/***/ (function(module, exports) {

module.exports = "@Pass{\n@BlendFunc(SRC_ALPHA,ONE_MINUS_SRC_ALPHA)\n@ExposeMacro(int,jointCount,JOINT_COUNT,0)\nFS_PREC(mediump,float)\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUV;\n\n#ifdef VS\n#if JOINT_COUNT > 0\n  @JOINTMATRIX\n  uniform mat4 boneMatrices[JOINT_COUNT];\n#endif\n  @NORMAL\n  attribute vec3 normal;\n  @POSITION\n  attribute vec3 position;\n  @TEXCOORD_0\n  attribute vec2 texCoord;\n#if JOINT_COUNT > 0\n  @JOINT\n  attribute vec4 joint;\n  @WEIGHT\n  attribute vec4 weight;\n#endif\n  uniform mat4 _matPVM;\n  uniform mat4 _matM;\n  void main(){\n    mat4 transform = _matM;\n    mat4 projectionTransform = _matPVM;\n    #if JOINT_COUNT > 0\n      mat4 skinMat = weight.x * boneMatrices[int(joint.x)] + weight.y * boneMatrices[int(joint.y)] + weight.z * boneMatrices[int(joint.z)] + weight.w * boneMatrices[int(joint.w)];\n      transform *= skinMat;\n      projectionTransform *= skinMat;\n    #endif\n    vUV = texCoord;\n    vNormal = normalize((transform * vec4(normal,0.0)).xyz);\n    vPosition = (transform * vec4(position,1.0)).xyz;\n    gl_Position = projectionTransform * vec4(position,1.0);\n  }\n\n\n#endif\n\n\n#ifdef FS\n\n  @{type:\"color\"}\n  uniform vec3 ambient;\n\n  @AMBIENT_COEFFICIENT\n  uniform float ambientCoefficient;\n\n  uniform sampler2D ambientTexture;\n\n  @HAS_TEXTURE{sampler:\"ambientTexture\"}\n  uniform bool ambientTextureUsed;\n\n  @{type:\"color\"}\n  uniform vec4 diffuse;\n\n  uniform sampler2D diffuseTexture;\n\n  @HAS_TEXTURE{sampler:\"diffuseTexture\"}\n  uniform bool diffuseTextureUsed;\n\n  @{type:\"color\"}\n  uniform vec3 specular;\n\n  uniform sampler2D specularTexture;\n\n  @HAS_TEXTURE{sampler:\"specularTexture\"}\n  uniform bool specularTextureUsed;\n\n  @{type:\"color\"}\n  uniform vec3 emission;\n\n  uniform sampler2D emissionTexture;\n\n  @HAS_TEXTURE{sampler:\"emissionTexture\"}\n  uniform bool emissionTextureUsed;\n\n  @{default:\"1.0\"}\n  uniform float shininess;\n\n  @{default:\"1.0\"}\n  uniform float transparency;\n\n  uniform vec3 _cameraPosition;\n\n  @{default:\"n(1,1,-1)\"}\n  uniform vec3 sunDir;\n\n  void main(){\n    vec4 dColor = vec4(0);\n    vec3 sColor = vec3(0);\n    vec3 eColor = vec3(0);\n    vec3 aColor = vec3(0);\n    vec3 hVec = normalize(normalize(_cameraPosition - vPosition) + sunDir);\n    if(ambientTextureUsed){\n      aColor = texture2D(ambientTexture,vUV).rgb;\n    }else{\n      aColor = ambient;\n    }\n    if(diffuseTextureUsed){\n      dColor = texture2D(diffuseTexture,vUV);\n    }else{\n      dColor = diffuse;\n    }\n    dColor.rgb = max(0.,dot(sunDir,vNormal)) * dColor.rgb;\n    if(specularTextureUsed){\n      sColor = texture2D(specularTexture,vUV).rgb;\n    }else{\n      sColor = specular;\n    }\n    if(emissionTextureUsed){\n      eColor = texture2D(emissionTexture,vUV).rgb;\n    }else{\n      eColor = emission;\n    }\n    sColor = sColor * pow(max(0.,dot(hVec,vNormal)),shininess);\n    gl_FragColor.rgb = dColor.rgb + sColor + aColor * ambientCoefficient;// + eColor;// + aColor;\n    gl_FragColor.a = dColor.a * transparency;\n  }\n#endif\n}\n"

/***/ })
/******/ ]);
});
//# sourceMappingURL=grimoire-gltf.js.map

/***/ }),
/* 15 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math.Quaternion;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 28);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

/**
 * @class Common utilities
 * @name glMatrix
 */
var glMatrix = {};

// Configuration Constants
glMatrix.EPSILON = 0.000001;
glMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
glMatrix.RANDOM = Math.random;
glMatrix.ENABLE_SIMD = false;

// Capability detection
glMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE === this.Float32Array) && (typeof SIMD != 'undefined');
glMatrix.USE_SIMD = glMatrix.ENABLE_SIMD && glMatrix.SIMD_AVAILABLE;

/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Type} type Array type, such as Float32Array or Array
 */
glMatrix.setMatrixArrayType = function(type) {
    glMatrix.ARRAY_TYPE = type;
}

var degree = Math.PI / 180;

/**
* Convert Degree To Radian
*
* @param {Number} a Angle in Degrees
*/
glMatrix.toRadian = function(a){
     return a * degree;
}

/**
 * Tests whether or not the arguments have approximately the same value, within an absolute
 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
 * than or equal to 1.0, and a relative tolerance is used for larger values)
 *
 * @param {Number} a The first number to test.
 * @param {Number} b The second number to test.
 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
 */
glMatrix.equals = function(a, b) {
	return Math.abs(a - b) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));
}

module.exports = glMatrix;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _VectorBase2 = __webpack_require__(2);

var _VectorBase3 = _interopRequireDefault(_VectorBase2);

var _glMatrix = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="./gl-matrix.d.ts"/>


var Vector3 = function (_VectorBase) {
    _inherits(Vector3, _VectorBase);

    _createClass(Vector3, null, [{
        key: "copy",
        value: function copy(source) {
            return new Vector3(source.X, source.Y, source.Z);
        }
    }, {
        key: "dot",
        value: function dot(v1, v2) {
            return _glMatrix.vec3.dot(v1.rawElements, v2.rawElements);
        }
    }, {
        key: "add",
        value: function add(v1, v2) {
            var newVec = _glMatrix.vec3.create();
            return new Vector3(_glMatrix.vec3.add(newVec, v1.rawElements, v2.rawElements));
        }
    }, {
        key: "subtract",
        value: function subtract(v1, v2) {
            var newVec = _glMatrix.vec3.create();
            return new Vector3(_glMatrix.vec3.sub(newVec, v1.rawElements, v2.rawElements));
        }
    }, {
        key: "multiply",
        value: function multiply(s, v) {
            var newVec = _glMatrix.vec3.create();
            return new Vector3(_glMatrix.vec3.scale(newVec, v.rawElements, s));
        }
    }, {
        key: "negate",
        value: function negate(v1) {
            return Vector3.multiply(-1, v1);
        }
    }, {
        key: "equals",
        value: function equals(v1, v2) {
            return _VectorBase3.default.__elementEquals(v1, v2);
        }
    }, {
        key: "nearlyEquals",
        value: function nearlyEquals(v1, v2) {
            return _VectorBase3.default.__nearlyElementEquals(v1, v2);
        }
    }, {
        key: "normalize",
        value: function normalize(v1) {
            var newVec = _glMatrix.vec3.create();
            return new Vector3(_glMatrix.vec3.normalize(newVec, v1.rawElements));
        }
    }, {
        key: "cross",
        value: function cross(v1, v2) {
            var newVec = _glMatrix.vec3.create();
            return new Vector3(_glMatrix.vec3.cross(newVec, v1.rawElements, v2.rawElements));
        }
    }, {
        key: "min",
        value: function min(v1, v2) {
            return new Vector3(_VectorBase3.default.__fromGenerationFunction(v1, v2, function (i, _v1, _v2) {
                return Math.min(_v1.rawElements[i], _v2.rawElements[i]);
            }));
        }
    }, {
        key: "max",
        value: function max(v1, v2) {
            return new Vector3(_VectorBase3.default.__fromGenerationFunction(v1, v2, function (i, _v1, _v2) {
                return Math.max(_v1.rawElements[i], _v2.rawElements[i]);
            }));
        }
    }, {
        key: "angle",
        value: function angle(v1, v2) {
            return Math.acos(Vector3.dot(v1.normalized, v2.normalized));
        }
    }, {
        key: "parse",
        value: function parse(str) {
            var parseResult = _VectorBase3.default.__parse(str);
            var elements = parseResult.elements;
            if (!elements || elements.length !== 1 && elements.length !== 3) {
                return undefined;
            }
            var result = void 0;
            if (elements.length === 1) {
                result = new Vector3(elements[0], elements[0], elements[0]);
            } else {
                result = new Vector3(elements[0], elements[1], elements[2]);
            }
            if (parseResult.needNormalize) {
                result = result.normalizeThis();
            }
            if (parseResult.coefficient) {
                result = result.multiplyWith(parseResult.coefficient);
            }
            if (parseResult.needNegate) {
                result = result.negateThis();
            }
            return result;
        }
    }, {
        key: "XUnit",
        get: function get() {
            return new Vector3(1, 0, 0);
        }
    }, {
        key: "YUnit",
        get: function get() {
            return new Vector3(0, 1, 0);
        }
    }, {
        key: "ZUnit",
        get: function get() {
            return new Vector3(0, 0, 1);
        }
    }, {
        key: "Zero",
        get: function get() {
            return new Vector3(0, 0, 0);
        }
    }, {
        key: "One",
        get: function get() {
            return new Vector3(1, 1, 1);
        }
    }]);

    function Vector3(x, y, z) {
        _classCallCheck(this, Vector3);

        var _this = _possibleConstructorReturn(this, (Vector3.__proto__ || Object.getPrototypeOf(Vector3)).call(this));

        if (typeof y === "undefined") {
            _this.rawElements = x;
            return _possibleConstructorReturn(_this);
        }
        _this.rawElements = [x, y, z];
        return _this;
    }

    _createClass(Vector3, [{
        key: "normalizeThis",
        value: function normalizeThis() {
            return Vector3.normalize(this);
        }
    }, {
        key: "dotWith",
        value: function dotWith(v) {
            return Vector3.dot(this, v);
        }
    }, {
        key: "addWith",
        value: function addWith(v) {
            return Vector3.add(this, v);
        }
    }, {
        key: "subtractWith",
        value: function subtractWith(v) {
            return Vector3.subtract(this, v);
        }
    }, {
        key: "multiplyWith",
        value: function multiplyWith(s) {
            return Vector3.multiply(s, this);
        }
    }, {
        key: "negateThis",
        value: function negateThis() {
            return Vector3.negate(this);
        }
    }, {
        key: "equalWith",
        value: function equalWith(v) {
            return Vector3.equals(this, v);
        }
    }, {
        key: "nearlyEqualWith",
        value: function nearlyEqualWith(v) {
            return Vector3.nearlyEquals(this, v);
        }
    }, {
        key: "crossWith",
        value: function crossWith(v) {
            return Vector3.cross(this, v);
        }
    }, {
        key: "toString",
        value: function toString() {
            return "(" + this.X + ", " + this.Y + ", " + this.Z + ")";
        }
    }, {
        key: "toDisplayString",
        value: function toDisplayString() {
            return "Vector3" + this.toString();
        }
    }, {
        key: "normalized",
        get: function get() {
            return this.multiplyWith(1 / this.magnitude);
        }
    }, {
        key: "X",
        get: function get() {
            return this.rawElements[0];
        },
        set: function set(x) {
            this.rawElements[0] = +x;
        }
    }, {
        key: "Y",
        get: function get() {
            return this.rawElements[1];
        },
        set: function set(y) {
            this.rawElements[1] = +y;
        }
    }, {
        key: "Z",
        get: function get() {
            return this.rawElements[2];
        },
        set: function set(z) {
            this.rawElements[2] = +z;
        }
    }, {
        key: "ElementCount",
        get: function get() {
            return 3;
        }
    }]);

    return Vector3;
}(_VectorBase3.default);

exports.default = Vector3;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

///<reference path="./gl-matrix.d.ts"/>
/**
 * Base class of vector.
 */
var VectorBase = function () {
    function VectorBase() {
        _classCallCheck(this, VectorBase);

        this._magnitudeSquaredCache = -1;
        this._magnitudeCache = -1;
    }
    /**
     * Length of this vector.
     */


    _createClass(VectorBase, [{
        key: "magnitude",
        get: function get() {
            if (this._magnitudeCache < 0) {
                this._magnitudeCache = Math.sqrt(this.sqrMagnitude);
            }
            return this._magnitudeCache;
        }
        /**
         * Element count of this instance.
         * This is for override.
         * @return {number} [description]
         */

    }, {
        key: "ElementCount",
        get: function get() {
            return 0;
        }
        /**
         * Get squred length of this elements.
         */

    }, {
        key: "sqrMagnitude",
        get: function get() {
            if (this._magnitudeSquaredCache < 0) {
                var sum = 0;
                var r = this.rawElements;
                for (var i = 0; i < this.ElementCount; i++) {
                    sum += r[i] * r[i];
                }
                this._magnitudeSquaredCache = sum;
            }
            return this._magnitudeSquaredCache;
        }
    }], [{
        key: "__elementEquals",
        value: function __elementEquals(v1, v2) {
            if (v1.ElementCount !== v2.ElementCount) {
                return false;
            }
            for (var i = 0; i < v1.ElementCount; i++) {
                if (v1.rawElements[i] !== v2.rawElements[i]) {
                    return false;
                }
            }
            return true;
        }
    }, {
        key: "__nearlyElementEquals",
        value: function __nearlyElementEquals(v1, v2) {
            if (v1.ElementCount !== v2.ElementCount) {
                return false;
            }
            var error = 0.01;
            for (var i = 0; i < v1.ElementCount; i++) {
                if (Math.abs(v1.rawElements[i] - v2.rawElements[i]) > error) {
                    return false;
                }
            }
            return true;
        }
    }, {
        key: "__fromGenerationFunction",
        value: function __fromGenerationFunction(v1, v2, gen) {
            var f = new Float32Array(v1.ElementCount);
            for (var i = 0; i < f.length; i++) {
                f[i] = gen(i, v1, v2);
            }
            return f;
        }
    }, {
        key: "__parse",
        value: function __parse(str) {
            var checkRegex = /(-?)([\d,Ee\+\-\.]+)?(n)?\(([-\d,Ee\+\.\s]+)\)/g;
            var matches = checkRegex.exec(str);
            if (matches) {
                if (!matches[4]) {
                    throw new Error("The specified string '" + str + "' is not containing braced vector.");
                }
                return {
                    needNormalize: matches[3] === "n",
                    needNegate: matches[1] === "-",
                    coefficient: parseFloat(matches[2]),
                    elements: VectorBase._parseRawVector(matches[4])
                };
            } else {
                // Assume this is simplified format.
                return {
                    needNormalize: false,
                    needNegate: false,
                    elements: VectorBase._parseRawVector(str),
                    coefficient: undefined
                };
            }
        }
    }, {
        key: "_parseRawVector",
        value: function _parseRawVector(str) {
            var splitted = str.split(",");
            var result = new Array(splitted.length);
            for (var i = 0; i < splitted.length; i++) {
                result[i] = parseFloat(splitted[i]);
                if (isNaN(result[i])) {
                    throw new Error("Unexpected vector string " + str);
                }
            }
            return result;
        }
    }]);

    return VectorBase;
}();

exports.default = VectorBase;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileoverview gl-matrix - High performance matrix and vector operations
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 2.3.2
 */

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */
// END HEADER

exports.glMatrix = __webpack_require__(0);
exports.mat2 = __webpack_require__(29);
exports.mat2d = __webpack_require__(30);
exports.mat3 = __webpack_require__(21);
exports.mat4 = __webpack_require__(31);
exports.quat = __webpack_require__(32);
exports.vec2 = __webpack_require__(33);
exports.vec3 = __webpack_require__(22);
exports.vec4 = __webpack_require__(23);

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _VectorBase2 = __webpack_require__(2);

var _VectorBase3 = _interopRequireDefault(_VectorBase2);

var _glMatrix = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="./gl-matrix.d.ts"/>


var Vector4 = function (_VectorBase) {
    _inherits(Vector4, _VectorBase);

    _createClass(Vector4, null, [{
        key: "copy",
        value: function copy(vec) {
            return new Vector4(vec.X, vec.Y, vec.Z, vec.W);
        }
    }, {
        key: "dot",
        value: function dot(v1, v2) {
            return _glMatrix.vec4.dot(v1.rawElements, v2.rawElements);
        }
    }, {
        key: "add",
        value: function add(v1, v2) {
            var newVec = _glMatrix.vec4.create();
            return new Vector4(_glMatrix.vec4.add(newVec, v1.rawElements, v2.rawElements));
        }
    }, {
        key: "subtract",
        value: function subtract(v1, v2) {
            var newVec = _glMatrix.vec4.create();
            return new Vector4(_glMatrix.vec4.sub(newVec, v1.rawElements, v2.rawElements));
        }
    }, {
        key: "multiply",
        value: function multiply(s, v) {
            var newVec = _glMatrix.vec4.create();
            return new Vector4(_glMatrix.vec4.scale(newVec, v.rawElements, s));
        }
    }, {
        key: "negate",
        value: function negate(v1) {
            return Vector4.multiply(-1, v1);
        }
    }, {
        key: "equals",
        value: function equals(v1, v2) {
            return _VectorBase3.default.__elementEquals(v1, v2);
        }
    }, {
        key: "nearlyEquals",
        value: function nearlyEquals(v1, v2) {
            return _VectorBase3.default.__nearlyElementEquals(v1, v2);
        }
    }, {
        key: "normalize",
        value: function normalize(v1) {
            var newVec = _glMatrix.vec4.create();
            return new Vector4(_glMatrix.vec4.normalize(newVec, v1.rawElements));
        }
    }, {
        key: "min",
        value: function min(v1, v2) {
            return new Vector4(_VectorBase3.default.__fromGenerationFunction(v1, v2, function (i, _v1, _v2) {
                return Math.min(_v1.rawElements[i], _v2.rawElements[i]);
            }));
        }
    }, {
        key: "max",
        value: function max(v1, v2) {
            return new Vector4(_VectorBase3.default.__fromGenerationFunction(v1, v2, function (i, _v1, _v2) {
                return Math.max(_v1.rawElements[i], _v2.rawElements[i]);
            }));
        }
    }, {
        key: "angle",
        value: function angle(v1, v2) {
            return Math.acos(Vector4.dot(v1.normalized, v2.normalized));
        }
    }, {
        key: "parse",
        value: function parse(str) {
            var parseResult = _VectorBase3.default.__parse(str);
            var elements = parseResult.elements;
            if (!elements || elements.length !== 1 && elements.length !== 4) {
                return undefined;
            }
            var result = void 0;
            if (elements.length === 1) {
                result = new Vector4(elements[0], elements[0], elements[0], elements[0]);
            } else {
                result = new Vector4(elements[0], elements[1], elements[2], elements[3]);
            }
            if (parseResult.needNormalize) {
                result = result.normalizeThis();
            }
            if (parseResult.coefficient) {
                result = result.multiplyWith(parseResult.coefficient);
            }
            if (parseResult.needNegate) {
                result = result.negateThis();
            }
            return result;
        }
    }, {
        key: "XUnit",
        get: function get() {
            return new Vector4(1, 0, 0, 0);
        }
    }, {
        key: "YUnit",
        get: function get() {
            return new Vector4(0, 1, 0, 0);
        }
    }, {
        key: "ZUnit",
        get: function get() {
            return new Vector4(0, 0, 1, 0);
        }
    }, {
        key: "WUnit",
        get: function get() {
            return new Vector4(0, 0, 0, 1);
        }
    }, {
        key: "One",
        get: function get() {
            return new Vector4(1, 1, 1, 1);
        }
    }, {
        key: "Zero",
        get: function get() {
            return new Vector4(0, 0, 0, 0);
        }
    }]);

    function Vector4(x, y, z, w) {
        _classCallCheck(this, Vector4);

        var _this = _possibleConstructorReturn(this, (Vector4.__proto__ || Object.getPrototypeOf(Vector4)).call(this));

        if (typeof y === "undefined") {
            _this.rawElements = x;
            return _possibleConstructorReturn(_this);
        }
        _this.rawElements = [x, y, z, w];
        return _this;
    }

    _createClass(Vector4, [{
        key: "normalizeThis",
        value: function normalizeThis() {
            return Vector4.normalize(this);
        }
    }, {
        key: "dotWith",
        value: function dotWith(v) {
            return Vector4.dot(this, v);
        }
    }, {
        key: "addWith",
        value: function addWith(v) {
            return Vector4.add(this, v);
        }
    }, {
        key: "subtractWith",
        value: function subtractWith(v) {
            return Vector4.subtract(this, v);
        }
    }, {
        key: "multiplyWith",
        value: function multiplyWith(s) {
            return Vector4.multiply(s, this);
        }
    }, {
        key: "negateThis",
        value: function negateThis() {
            return Vector4.negate(this);
        }
    }, {
        key: "equalWith",
        value: function equalWith(v) {
            return Vector4.equals(this, v);
        }
    }, {
        key: "nearlyEqualWith",
        value: function nearlyEqualWith(v) {
            return Vector4.nearlyEquals(this, v);
        }
    }, {
        key: "toString",
        value: function toString() {
            return "(" + this.X + ", " + this.Y + ", " + this.Z + ", " + this.W + ")";
        }
    }, {
        key: "toDisplayString",
        value: function toDisplayString() {
            return "Vector4" + this.toString();
        }
    }, {
        key: "normalized",
        get: function get() {
            return this.multiplyWith(1 / this.magnitude);
        }
    }, {
        key: "X",
        get: function get() {
            return this.rawElements[0];
        },
        set: function set(x) {
            this.rawElements[0] = +x;
        }
    }, {
        key: "Y",
        get: function get() {
            return this.rawElements[1];
        },
        set: function set(y) {
            this.rawElements[1] = +y;
        }
    }, {
        key: "Z",
        get: function get() {
            return this.rawElements[2];
        },
        set: function set(z) {
            this.rawElements[2] = +z;
        }
    }, {
        key: "W",
        get: function get() {
            return this.rawElements[3];
        },
        set: function set(w) {
            this.rawElements[3] = +w;
        }
    }, {
        key: "ElementCount",
        get: function get() {
            return 4;
        }
    }]);

    return Vector4;
}(_VectorBase3.default);

exports.default = Vector4;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _VectorBase2 = __webpack_require__(2);

var _VectorBase3 = _interopRequireDefault(_VectorBase2);

var _Vector = __webpack_require__(4);

var _Vector2 = _interopRequireDefault(_Vector);

var _Colors = __webpack_require__(7);

var _Colors2 = _interopRequireDefault(_Colors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="./gl-matrix.d.ts"/>


/**
 * Represents 4-components color.
 */
var Color4 = function (_VectorBase) {
    _inherits(Color4, _VectorBase);

    _createClass(Color4, null, [{
        key: "internalParse",

        /**
         * Internal use. Do not call this manually.
         */
        value: function internalParse(color, isFirst, tryParse) {
            if (isFirst && _Colors2.default[color]) {
                return Color4.internalParse(_Colors2.default[color], false);
            }
            var m = void 0;
            if (isFirst) {
                m = color.match(/^#([0-9a-f]{3})$/i);
                // #fff
                if (m) {
                    var s = m[1];
                    return new Color4(parseInt(s.charAt(0), 16) / 0xf, parseInt(s.charAt(1), 16) / 0xf, parseInt(s.charAt(2), 16) / 0xf, 1);
                }
            }
            if (isFirst) {
                m = color.match(/^#([0-9a-f]{4})$/i);
                // #ffff
                if (m) {
                    var _s = m[1];
                    return new Color4(parseInt(_s.charAt(0), 16) / 0xf, parseInt(_s.charAt(1), 16) / 0xf, parseInt(_s.charAt(2), 16) / 0xf, parseInt(_s.charAt(3), 16) / 0xf);
                }
            }
            // #ffffff
            m = color.match(/^#([0-9a-f]{6})$/i);
            if (m) {
                var _s2 = m[1];
                return new Color4(parseInt(_s2.substr(0, 2), 16) / 0xff, parseInt(_s2.substr(2, 2), 16) / 0xff, parseInt(_s2.substr(4, 2), 16) / 0xff, 1);
            }
            // #ffffffff
            if (isFirst) {
                m = color.match(/^#([0-9a-f]{8})$/i);
                if (m) {
                    var _s3 = m[1];
                    return new Color4(parseInt(_s3.substr(0, 2), 16) / 0xff, parseInt(_s3.substr(2, 2), 16) / 0xff, parseInt(_s3.substr(4, 2), 16) / 0xff, parseInt(_s3.substr(6, 2), 16) / 0xff);
                }
            }
            var n = color.match(/^\s*rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)\s*$/i);
            if (n && isFirst) {
                return new Color4(parseInt(n[1], 10) / 0xff, parseInt(n[2], 10) / 0xff, parseInt(n[3], 10) / 0xff, 1);
            }
            n = color.match(/^\s*rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\,\s*(0|1|0\.\d+)\s*\)\s*$/i);
            if (n && isFirst) {
                var d = parseInt(n[4], 10);
                d = d <= 1 ? d : d / 0xff;
                return new Color4(parseInt(n[1], 10) / 0xff, parseInt(n[2], 10) / 0xff, parseInt(n[3], 10) / 0xff, parseInt(n[4], 10));
            }
            if (tryParse) {
                return undefined;
            }
            return null;
        }
        /**
         * Parse string as Color4
         * @param  {string}  color    Expression of Color4
         * @param  {boolean} tryParse Internal use. Please use undefined always.
         * @return {Color4}           Instance of Color4 generated by the expression.
         */

    }, {
        key: "parse",
        value: function parse(color, tryParse) {
            return Color4.internalParse(color, true, tryParse);
        }
        /**
        * Returns whether the given 2 values are equal or not.
         * @param  {Color4}  col1 1st value to compare
         * @param  {Color4}  col2 2nd value to compare
         * @return {boolean}      The result
         */

    }, {
        key: "equals",
        value: function equals(col1, col2) {
            return _VectorBase3.default.__elementEquals(col1, col2);
        }
        /**
         * Constructor for Color4.
         * @param  {number} r Red component value clamped in [0,1]
         * @param  {number} g Green component value clamped in [0,1]
         * @param  {number} b Blue component value clamped in [0,1]
         * @param  {number} a Alpha component value clamped in [0,1]
         */

    }]);

    function Color4(r, g, b, a) {
        _classCallCheck(this, Color4);

        var _this = _possibleConstructorReturn(this, (Color4.__proto__ || Object.getPrototypeOf(Color4)).call(this));

        _this.rawElements = [r, g, b, a];
        return _this;
    }
    /**
     * Red component value clamped in [0,1]
     */


    _createClass(Color4, [{
        key: "toVector",

        /**
         * Convert as Vector4 value.
         */
        value: function toVector() {
            return new _Vector2.default(this.R, this.G, this.B, this.A);
        }
        /**
         * Element count. Always this value is 4.
         * @return {number} [description]
         */

    }, {
        key: "equalWith",

        /**
         * Compare this instance and the other instance.
         * @param  {Color4}  col the other instance
         * @return {boolean}     the result
         */
        value: function equalWith(col) {
            return Color4.equals(col, this);
        }
        /**
         * Convert color4 to string expression
         */

    }, {
        key: "toString",
        value: function toString() {
            return "rgba(" + Math.round(this.R * 255) + ", " + Math.round(this.G * 255) + ", " + Math.round(this.B * 255) + ", " + Math.round(this.A * 255) + ")";
        }
        /**
         * Convert color4 to string expression. This is more human readable expression than toString().
         */

    }, {
        key: "toDisplayString",
        value: function toDisplayString() {
            var st = "#";
            st += Math.round(this.R * 0xff).toString(16).toUpperCase();
            st += Math.round(this.G * 0xff).toString(16).toUpperCase();
            st += Math.round(this.B * 0xff).toString(16).toUpperCase();
            st += Math.round(this.A * 0xff).toString(16).toUpperCase();
            return "Color4(" + this.R + ", " + this.G + ", " + this.B + ", " + this.A + ", " + st + ")";
        }
    }, {
        key: "R",
        get: function get() {
            return this.rawElements[0];
        }
        /**
         * Green component value clamped in [0,1]
         */

    }, {
        key: "G",
        get: function get() {
            return this.rawElements[1];
        }
        /**
         * Blue component value clamped in [0,1]
         */

    }, {
        key: "B",
        get: function get() {
            return this.rawElements[2];
        }
        /**
         * Alpha component value clamped in [0,1]
         */

    }, {
        key: "A",
        get: function get() {
            return this.rawElements[3];
        }
    }, {
        key: "ElementCount",
        get: function get() {
            return 4;
        }
    }]);

    return Color4;
}(_VectorBase3.default);

exports.default = Color4;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _VectorBase2 = __webpack_require__(2);

var _VectorBase3 = _interopRequireDefault(_VectorBase2);

var _Vector = __webpack_require__(1);

var _Vector2 = _interopRequireDefault(_Vector);

var _Color = __webpack_require__(5);

var _Color2 = _interopRequireDefault(_Color);

var _Vector3 = __webpack_require__(4);

var _Vector4 = _interopRequireDefault(_Vector3);

var _Colors = __webpack_require__(7);

var _Colors2 = _interopRequireDefault(_Colors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="./gl-matrix.d.ts"/>


/**
 * Represents 3-component color without alpha.
 */
var Color3 = function (_VectorBase) {
    _inherits(Color3, _VectorBase);

    _createClass(Color3, null, [{
        key: "fromColor4",

        /**
         * Convert Color4 to Color3.
         * Alpha component of given value is ignored.
         */
        value: function fromColor4(col) {
            return new Color3(col.R, col.G, col.B);
        }
        /**
         * Convert string to Color3 instance.
         * @param  {string}  color    A string value expressing color3.
         * @param  {boolean} tryParse Internal use. Please use undefined always.
         * @return {Color3}           Converted Color3 value
         */

    }, {
        key: "parse",
        value: function parse(color, tryParse) {
            return Color3.internalParse(color, true, tryParse);
        }
        /**
         * Internal use. Do not call directry.
         *
         * @param  {string}  color    [description]
         * @param  {boolean} isFirst  [description]
         * @param  {boolean} tryParse [description]
         * @return {Color3}           [description]
         */

    }, {
        key: "internalParse",
        value: function internalParse(color, isFirst, tryParse) {
            if (isFirst && _Colors2.default[color]) {
                var col = _Color2.default.internalParse(_Colors2.default[color], false, tryParse);
                return Color3.fromColor4(col);
            }
            var m = void 0;
            if (isFirst) {
                m = color.match(/^#([0-9a-f]{3})$/i);
                // #fff
                if (m) {
                    var s = m[1];
                    return new Color3(parseInt(s.charAt(0), 16) / 0xf, parseInt(s.charAt(1), 16) / 0xf, parseInt(s.charAt(2), 16) / 0xf);
                }
            }
            // #ffffff
            m = color.match(/^#([0-9a-f]{6})$/i);
            if (m) {
                var _s = m[1];
                return new Color3(parseInt(_s.substr(0, 2), 16) / 0xff, parseInt(_s.substr(2, 2), 16) / 0xff, parseInt(_s.substr(4, 2), 16) / 0xff);
            }
            var n = color.match(/^\s*rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)\s*$/i);
            if (n && isFirst) {
                return new Color3(parseInt(n[1], 10) / 0xff, parseInt(n[2], 10) / 0xff, parseInt(n[3], 10) / 0xff);
            }
            if (tryParse) {
                return undefined;
            }
            return null;
        }
        /**
         * Returns whether the given 2 values are equal or not.
         * @param  {Color3}  col1 1st value to compare
         * @param  {Color3}  col2 2nd value to compare
         * @return {boolean}      The result
         */

    }, {
        key: "equals",
        value: function equals(col1, col2) {
            return _VectorBase3.default.__elementEquals(col1, col2);
        }
        /**
         * constructor for Color3.
         * @param  {number} r Red value clamped in [0,1]
         * @param  {number} g Green value clamped in [0,1]
         * @param  {number} b Blue value clamped in [0,1]
         */

    }]);

    function Color3(r, g, b) {
        _classCallCheck(this, Color3);

        var _this = _possibleConstructorReturn(this, (Color3.__proto__ || Object.getPrototypeOf(Color3)).call(this));

        _this.rawElements = [r, g, b];
        return _this;
    }
    /**
     * Convert as Vector3 instance.
     * @return {Vector3} Converted vector3
     */


    _createClass(Color3, [{
        key: "toVector",
        value: function toVector() {
            return new _Vector2.default(this.R, this.G, this.B);
        }
        /**
         * Convert as Vector4 with given alpha value.
         * @param  {number}  An alpha value.
         * @return {Vector4}   Converted vector4
         */

    }, {
        key: "toVector4",
        value: function toVector4(a) {
            if (typeof a === "undefined") {
                a = 0;
            }
            return new _Vector4.default(this.R, this.G, this.B, a);
        }
        /**
         * Red component clamped in [0,1]
         */

    }, {
        key: "equalWith",

        /**
         * Compare equality of this instance to the other instance.
         * @param  {Color3}  col the other instance to compare
         * @return {boolean}     The result
         */
        value: function equalWith(col) {
            return Color3.equals(col, this);
        }
        /**
         * Expression as string.
         */

    }, {
        key: "toString",
        value: function toString() {
            return "rgb(" + Math.round(this.R * 255) + ", " + Math.round(this.G * 255) + ", " + Math.round(this.B * 255) + ")";
        }
        /**
         * Expression as string. This will be more human readable format than toString().
         * May be useful for debugging.
         */

    }, {
        key: "toDisplayString",
        value: function toDisplayString() {
            var st = "#";
            st += Math.round(this.R * 0xff).toString(16).toUpperCase();
            st += Math.round(this.G * 0xff).toString(16).toUpperCase();
            st += Math.round(this.B * 0xff).toString(16).toUpperCase();
            return "Color3(" + this.R + ", " + this.G + ", " + this.B + ", " + st + ")";
        }
    }, {
        key: "R",
        get: function get() {
            return this.rawElements[0];
        }
        /**
         * Green component clamped in [0,1]
         */

    }, {
        key: "G",
        get: function get() {
            return this.rawElements[1];
        }
        /**
         * Blue component clamped in [0,1]
         */

    }, {
        key: "B",
        get: function get() {
            return this.rawElements[2];
        }
        /**
         * Count of element. Always 3.
         */

    }, {
        key: "ElementCount",
        get: function get() {
            return 3;
        }
    }]);

    return Color3;
}(_VectorBase3.default);

exports.default = Color3;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Color name to color value table.
 */
exports.default = {
    "aliceblue": "#F0F8FF",
    "antiquewhite": "#FAEBD7",
    "aqua": "#00FFFF",
    "aquamarine": "#7FFFD4",
    "azure": "#F0FFFF",
    "beige": "#F5F5DC",
    "bisque": "#FFE4C4",
    "black": "#000000",
    "blanchedalmond": "#FFEBCD",
    "blue": "#0000FF",
    "blueviolet": "#8A2BE2",
    "brown": "#A52A2A",
    "burlywood": "#DEB887",
    "cadetblue": "#5F9EA0",
    "chartreuse": "#7FFF00",
    "chocolate": "#D2691E",
    "coral": "#FF7F50",
    "cornflowerblue": "#6495ED",
    "cornsilk": "#FFF8DC",
    "crimson": "#DC143C",
    "cyan": "#00FFFF",
    "darkblue": "#00008B",
    "darkcyan": "#008B8B",
    "darkgoldenrod": "#B8860B",
    "darkgray": "#A9A9A9",
    "darkgreen": "#006400",
    "darkgrey": "#A9A9A9",
    "darkkhaki": "#BDB76B",
    "darkmagenta": "#8B008B",
    "darkolivegreen": "#556B2F",
    "darkorange": "#FF8C00",
    "darkorchid": "#9932CC",
    "darkred": "#8B0000",
    "darksalmon": "#E9967A",
    "darkseagreen": "#8FBC8F",
    "darkslateblue": "#483D8B",
    "darkslategray": "#2F4F4F",
    "darkslategrey": "#2F4F4F",
    "darkturquoise": "#00CED1",
    "darkviolet": "#9400D3",
    "deeppink": "#FF1493",
    "deepskyblue": "#00BFFF",
    "dimgray": "#696969",
    "dimgrey": "#696969",
    "dodgerblue": "#1E90FF",
    "firebrick": "#B22222",
    "floralwhite": "#FFFAF0",
    "forestgreen": "#228B22",
    "fuchsia": "#FF00FF",
    "gainsboro": "#DCDCDC",
    "ghostwhite": "#F8F8FF",
    "gold": "#FFD700",
    "goldenrod": "#DAA520",
    "gray": "#808080",
    "green": "#008000",
    "greenyellow": "#ADFF2F",
    "grey": "#808080",
    "honeydew": "#F0FFF0",
    "hotpink": "#FF69B4",
    "indianred": "#CD5C5C",
    "indigo": "#4B0082",
    "ivory": "#FFFFF0",
    "khaki": "#F0E68C",
    "lavender": "#E6E6FA",
    "lavenderblush": "#FFF0F5",
    "lawngreen": "#7CFC00",
    "lemonchiffon": "#FFFACD",
    "lightblue": "#ADD8E6",
    "lightcoral": "#F08080",
    "lightcyan": "#E0FFFF",
    "lightgoldenrodyellow": "#FAFAD2",
    "lightgray": "#D3D3D3",
    "lightgreen": "#90EE90",
    "lightgrey": "#D3D3D3",
    "lightpink": "#FFB6C1",
    "lightsalmon": "#FFA07A",
    "lightseagreen": "#20B2AA",
    "lightskyblue": "#87CEFA",
    "lightslategray": "#778899",
    "lightslategrey": "#778899",
    "lightsteelblue": "#B0C4DE",
    "lightyellow": "#FFFFE0",
    "lime": "#00FF00",
    "limegreen": "#32CD32",
    "linen": "#FAF0E6",
    "magenta": "#FF00FF",
    "maroon": "#800000",
    "mediumaquamarine": "#66CDAA",
    "mediumblue": "#0000CD",
    "mediumorchid": "#BA55D3",
    "mediumpurple": "#9370DB",
    "mediumseagreen": "#3CB371",
    "mediumslateblue": "#7B68EE",
    "mediumspringgreen": "#00FA9A",
    "mediumturquoise": "#48D1CC",
    "mediumvioletred": "#C71585",
    "midnightblue": "#191970",
    "mintcream": "#F5FFFA",
    "mistyrose": "#FFE4E1",
    "moccasin": "#FFE4B5",
    "navajowhite": "#FFDEAD",
    "navy": "#000080",
    "oldlace": "#FDF5E6",
    "olive": "#808000",
    "olivedrab": "#6B8E23",
    "orange": "#FFA500",
    "orangered": "#FF4500",
    "orchid": "#DA70D6",
    "palegoldenrod": "#EEE8AA",
    "palegreen": "#98FB98",
    "paleturquoise": "#AFEEEE",
    "palevioletred": "#DB7093",
    "papayawhip": "#FFEFD5",
    "peachpuff": "#FFDAB9",
    "peru": "#CD853F",
    "pink": "#FFC0CB",
    "plum": "#DDA0DD",
    "powderblue": "#B0E0E6",
    "purple": "#800080",
    "red": "#FF0000",
    "rosybrown": "#BC8F8F",
    "royalblue": "#4169E1",
    "saddlebrown": "#8B4513",
    "salmon": "#FA8072",
    "sandybrown": "#F4A460",
    "seagreen": "#2E8B57",
    "seashell": "#FFF5EE",
    "sienna": "#A0522D",
    "silver": "#C0C0C0",
    "skyblue": "#87CEEB",
    "slateblue": "#6A5ACD",
    "slategray": "#708090",
    "slategrey": "#708090",
    "snow": "#FFFAFA",
    "springgreen": "#00FF7F",
    "steelblue": "#4682B4",
    "tan": "#D2B48C",
    "teal": "#008080",
    "thistle": "#D8BFD8",
    "tomato": "#FF6347",
    "turquoise": "#40E0D0",
    "violet": "#EE82EE",
    "wheat": "#F5DEB3",
    "white": "#FFFFFF",
    "whitesmoke": "#F5F5F5",
    "yellow": "#FFFF00",
    "yellowgreen": "#9ACD32"
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); ///<reference path="./gl-matrix.d.ts"/>


var _Vector = __webpack_require__(1);

var _Vector2 = _interopRequireDefault(_Vector);

var _glMatrix = __webpack_require__(3);

var _Matrix = __webpack_require__(18);

var _Matrix2 = _interopRequireDefault(_Matrix);

var _Angle2DParser = __webpack_require__(9);

var _Angle2DParser2 = _interopRequireDefault(_Angle2DParser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The class to maniplate quaternion.
* Basically,you don't need to operate raw element.
* You consider to use some of useful methods without editing raw element forcelly.
* Each element will be represented as (w;x,y,z)
* (1,i,j,k) is base axis for quaternion. (i,j,k is pure imaginary number)
* (w;x,y,z) means w*1+x*i+y*j+z*k
*
*/
var Quaternion = function () {
    _createClass(Quaternion, null, [{
        key: "equals",
        value: function equals(q1, q2) {
            for (var i = 0; i < 4; i++) {
                if (q1.rawElements[i] !== q2.rawElements[i]) {
                    return false;
                }
            }
            return true;
        }
        /**
         * Parse angle string in 3D.
         * "p" means Pi. Ex) 3/4 p
         * "d" means degree. if this unit was specified, the argument will be parsed as degree. Ex) 90d
         * "eular(x,y,z)" means rotation in eular. This means Z-X-Y rotation like Unity.
         * "axis(angle,x,y,z)" means rotation around specified axis. This means angle radians will be rotated around the axis (x,y,z).
         * This angle can be specified with the character "p" or "d".
         * "x(angle)","y(angle)" or "z(angle)" means rotation around unit axis.
         * This angle can be specified with the character "p" or "d".
         * @param input the string to be parsed as angle in 3D.
         * @returns {Quaternion} parsed rotation in Quaternion.
         */

    }, {
        key: "parse",
        value: function parse(input) {
            var reg1 = /^ *(x|y|z) *\(([^\(\)]+)\) *$/gm;
            var reg2 = /^ *axis *\(([^\(\),]+),([^\(\),]+),([^\(\),]+),([^\(\),]+)\) *$/gm;
            var reg3 = /^ *([^\(\),]+),([^\(\),]+),([^\(\),]+) *$/gm;
            var result = reg1.exec(input);
            if (result) {
                if (result[1] === "x") {
                    return Quaternion.angleAxis(_Angle2DParser2.default.parseAngle(result[2]), _Vector2.default.XUnit);
                }
                if (result[1] === "y") {
                    return Quaternion.angleAxis(_Angle2DParser2.default.parseAngle(result[2]), _Vector2.default.YUnit);
                }
                if (result[1] === "z") {
                    return Quaternion.angleAxis(_Angle2DParser2.default.parseAngle(result[2]), _Vector2.default.ZUnit);
                }
            }
            var res2 = reg2.exec(input);
            if (res2) {
                var rotation = _Angle2DParser2.default.parseAngle(res2[1]);
                var x = parseFloat(res2[2]);
                var y = parseFloat(res2[3]);
                var z = parseFloat(res2[4]);
                return Quaternion.angleAxis(rotation, new _Vector2.default(x, y, z));
            }
            var res3 = reg3.exec(input);
            if (res3) {
                return Quaternion.euler(_Angle2DParser2.default.parseAngle(res3[1]), _Angle2DParser2.default.parseAngle(res3[2]), _Angle2DParser2.default.parseAngle(res3[3]));
            }
            throw new Error("Unknown format for rotation3D:'" + input + "'");
        }
        /**
        * Calculate add result of two quaternion
        */

    }, {
        key: "add",
        value: function add(q1, q2) {
            var newQuat = _glMatrix.quat.create();
            return new Quaternion(_glMatrix.quat.add(newQuat, q1.rawElements, q2.rawElements));
        }
        /**
        * Calculate multiply result of two quaternion
        */

    }, {
        key: "multiply",
        value: function multiply(q1, q2) {
            var newQuat = _glMatrix.quat.create();
            return new Quaternion(_glMatrix.quat.mul(newQuat, q1.rawElements, q2.rawElements));
        }
        /**
        * Calculate the rotation quaternion represented as pair of angle and axis.
        */

    }, {
        key: "angleAxis",
        value: function angleAxis(angle, axis) {
            var axisVec = _glMatrix.vec3.create();
            axisVec[0] = axis.X;
            axisVec[1] = axis.Y;
            axisVec[2] = axis.Z;
            var newQuat = _glMatrix.quat.create();
            return new Quaternion(_glMatrix.quat.setAxisAngle(newQuat, axisVec, +angle));
        }
    }, {
        key: "euler",
        value: function euler(x, y, z) {
            return Quaternion.multiply(Quaternion.angleAxis(z, _Vector2.default.ZUnit), Quaternion.multiply(Quaternion.angleAxis(x, _Vector2.default.XUnit), Quaternion.angleAxis(y, _Vector2.default.YUnit)));
        }
    }, {
        key: "eulerXYZ",
        value: function eulerXYZ(x, y, z) {
            return Quaternion.multiply(Quaternion.angleAxis(z, _Vector2.default.ZUnit), Quaternion.multiply(Quaternion.angleAxis(y, _Vector2.default.YUnit), Quaternion.angleAxis(x, _Vector2.default.XUnit)));
        }
    }, {
        key: "slerp",
        value: function slerp(q1, q2, t) {
            var newQuat = _glMatrix.quat.create();
            return new Quaternion(_glMatrix.quat.slerp(newQuat, q1.rawElements, q2.rawElements, +t));
        }
        /**
         * Returns the angle in degrees between two rotations q1 and q2.
         * @param q1 the quaternion represents begin angle.
         * @param q2 the quaternion represents end angle.
         * @returns {number} angle represented in radians.
         */

    }, {
        key: "angle",
        value: function angle(q1, q2) {
            var delta = Quaternion.multiply(q2, q1.inverse());
            delta = delta.normalize();
            return 2 * Math.acos(delta.W);
        }
    }, {
        key: "fromToRotation",
        value: function fromToRotation(from, to) {
            var crossed = _Vector2.default.cross(from.normalized, to.normalized);
            var angle = _Vector2.default.dot(from.normalized, to.normalized);
            return Quaternion.angleAxis(angle, crossed);
        }
    }, {
        key: "lookRotation",
        value: function lookRotation(forward, upVec) {
            upVec = upVec || _Vector2.default.YUnit;
            var normalizedForward = forward.normalized;
            var upForwardCross = _Vector2.default.cross(upVec, normalizedForward).normalized;
            var thirdAxis = _Vector2.default.cross(normalizedForward, upForwardCross);
            var m00 = upForwardCross.X;
            var m01 = upForwardCross.Y;
            var m02 = upForwardCross.Z;
            var m10 = thirdAxis.X;
            var m11 = thirdAxis.Y;
            var m12 = thirdAxis.Z;
            var m20 = normalizedForward.X;
            var m21 = normalizedForward.Y;
            var m22 = normalizedForward.Z;
            var num8 = m00 + m11 + m22;
            if (num8 > 0) {
                var num = Math.sqrt(1 + num8);
                return new Quaternion([(m12 - m21) * 0.5 / num, (m20 - m02) * 0.5 / num, (m01 - m10) * 0.5 / num, num / 2]);
            }
            if (m00 >= m11 && m00 >= m22) {
                var num7 = Math.sqrt(1 + m00 - m11 - m22);
                return new Quaternion([(m01 + m10) * 0.5 / num7, (m02 + m20) * 0.5 / num7, (m12 - m21) * 0.5 / num7, num7 / 2]);
            }
            if (m11 > m22) {
                var num6 = Math.sqrt(1 + m11 - m00 - m22);
                return new Quaternion([(m10 + m01) * 0.5 / num6, 0.5 * num6, (m21 + m12) * 0.5 / num6, (m20 - m02) * 0.5 / num6]);
            }
            var num5 = Math.sqrt(1 + m22 - m00 - m11);
            return new Quaternion([(m20 + m02) * 0.5 / num5, (m21 + m12) * 0.5 / num5, 0.5 * num5, (m01 - m10) * 0.5 / num5]);
        }
    }, {
        key: "Identity",
        get: function get() {
            return new Quaternion(_glMatrix.quat.create());
        }
        /**
        * Constructor by specifing each elements.
        */

    }]);

    function Quaternion(rawElements) {
        _classCallCheck(this, Quaternion);

        this.rawElements = rawElements;
    }

    _createClass(Quaternion, [{
        key: "equalWith",
        value: function equalWith(q) {
            return Quaternion.equals(this, q);
        }
        /**
        * Get normalized quaternion
        */

    }, {
        key: "normalize",
        value: function normalize() {
            var newQuat = _glMatrix.quat.create();
            return new Quaternion(_glMatrix.quat.normalize(newQuat, this.rawElements));
        }
    }, {
        key: "inverse",
        value: function inverse() {
            var newQuat = _glMatrix.quat.create();
            return new Quaternion(_glMatrix.quat.invert(newQuat, this.rawElements));
        }
    }, {
        key: "toAngleAxisString",
        value: function toAngleAxisString() {
            var angle = 2 * Math.acos(this.W);
            var imm = Math.sqrt(1 - this.W * this.W);
            if (angle !== 180 && angle !== 0) {
                return "axis(" + angle + "," + this.X / imm + "," + this.Y / imm + "," + this.Z / imm + ")";
            } else if (angle === 0) {
                return "axis(" + angle + ",0,1,0)";
            } else {
                return "axis(180d," + this.X + "," + this.Y + "," + this.Z + ")";
            }
        }
    }, {
        key: "toString",
        value: function toString() {
            return this.toAngleAxisString();
        }
    }, {
        key: "factoringQuaternionZXY",
        value: function factoringQuaternionZXY() {
            var result = { x: 0, y: 0, z: 0 };
            var mat = _Matrix2.default.rotationQuaternion(this);
            var sx = mat.rawElements[6];
            if (Math.abs(sx) < 1 - 1.0E-4) {
                result.x = Math.asin(sx);
                result.z = Math.atan2(-mat.rawElements[4], mat.rawElements[5]);
                result.y = Math.atan2(-mat.rawElements[2], mat.rawElements[10]);
            } else {
                result.y = 0;
                result.x = Math.PI / 2 * sx;
                result.z = Math.atan2(mat.rawElements[1], mat.rawElements[0]);
            }
            return result;
        }
    }, {
        key: "factoringQuaternionXYZ",
        value: function factoringQuaternionXYZ() {
            var result = { x: 0, y: 0, z: 0 };
            var mat = _Matrix2.default.rotationQuaternion(this);
            var sy = -mat.rawElements[2];
            if (Math.abs(sy) < 1 - 1.0E-4) {
                result.x = Math.atan2(mat.rawElements[6], mat.rawElements[10]);
                result.y = Math.asin(sy);
                result.z = Math.atan2(mat.rawElements[1], mat.rawElements[0]);
            } else {
                result.x = 0;
                result.y = Math.PI / 2 * sy;
                result.z = Math.atan2(-mat.rawElements[4], mat.rawElements[5]);
            }
            return result;
        }
    }, {
        key: "eularAngles",
        get: function get() {
            var eular = this.factoringQuaternionZXY();
            return new _Vector2.default(eular.x, eular.y, eular.z);
        },
        set: function set(v) {
            this.rawElements = Quaternion.euler(v.X, v.Y, v.Z).rawElements;
        }
        /**
        * Getter for X.
        */

    }, {
        key: "X",
        get: function get() {
            return this.rawElements[0];
        }
        /**
        * Getter for Y.
        */

    }, {
        key: "Y",
        get: function get() {
            return this.rawElements[1];
        }
        /**
        * Getter for Z.
        */

    }, {
        key: "Z",
        get: function get() {
            return this.rawElements[2];
        }
        /**
        * Getter for W.
        */

    }, {
        key: "W",
        get: function get() {
            return this.rawElements[3];
        }
        /**
        * Getter for imaginary part vector.
        * It returns the vector (x,y,z)
        */

    }, {
        key: "ImaginaryPart",
        get: function get() {
            return new _Vector2.default(this.X, this.Y, this.Z);
        }
        /**
        * Get the conjugate of this quaternion
        */

    }, {
        key: "Conjugate",
        get: function get() {
            var newQuat = _glMatrix.quat.create();
            return new Quaternion(_glMatrix.quat.conjugate(newQuat, this.rawElements));
        }
        /**
        * Get the length
        */

    }, {
        key: "Length",
        get: function get() {
            return _glMatrix.quat.len(this.rawElements);
        }
    }]);

    return Quaternion;
}();

exports.default = Quaternion;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Utility class to parse the arguments of attributes.
 */
/**
 * Utility class to parse the arguments of attributes.
 */var Angle2DParser = function () {
    function Angle2DParser() {
        _classCallCheck(this, Angle2DParser);
    }

    _createClass(Angle2DParser, null, [{
        key: "parseAngle",

        /**
         * Parse angle strings.
         * "p" means Pi. Ex) 3/4 p
         * "d" means degree. if this unit was specified, the argument will be parsed as degree. Ex) 90d
         * @param input the string to parse.
         * @returns {number} parsed angle in radians.
         */
        value: function parseAngle(input) {
            var regex = /^ *(-?[\de+-.]*) *(?:\/ *([\de+-.]*))? *(p|prad|deg|d|r|rad)? *$/gm;
            var result = regex.exec(input);
            if (result == null) {
                throw new Error("faild parse Angle string:'" + input + "'");
            }
            var numerator = parseFloat(result[1]);
            if (result[2]) {
                numerator /= parseFloat(result[2]);
            }
            var unit = result[3];
            if (unit == null) {
                unit = "d";
            }
            if (unit === "r" || unit === "rad") {
                return numerator;
            }
            if (unit === "p" || unit === "prad") {
                return numerator * Math.PI;
            }
            return numerator / 180 * Math.PI;
        }
    }]);

    return Angle2DParser;
}();

exports.default = Angle2DParser;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _VectorBase2 = __webpack_require__(2);

var _VectorBase3 = _interopRequireDefault(_VectorBase2);

var _glMatrix = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="./gl-matrix.d.ts"/>


var Vector2 = function (_VectorBase) {
    _inherits(Vector2, _VectorBase);

    _createClass(Vector2, null, [{
        key: "copy",
        value: function copy(vec) {
            return new Vector2(vec.X, vec.Y);
        }
    }, {
        key: "parse",
        value: function parse(str) {
            var parseResult = _VectorBase3.default.__parse(str);
            var elements = parseResult.elements;
            if (elements.length !== 1 && elements.length !== 2) {
                return undefined;
            }
            var result = void 0;
            if (elements.length === 1) {
                result = new Vector2(elements[0], elements[0]);
            } else {
                result = new Vector2(elements[0], elements[1]);
            }
            if (parseResult.needNormalize) {
                result = result.normalizeThis();
            }
            if (parseResult.coefficient) {
                result = result.multiplyWith(parseResult.coefficient);
            }
            if (parseResult.needNegate) {
                result = result.negateThis();
            }
            return result;
        }
    }, {
        key: "dot",
        value: function dot(v1, v2) {
            return _glMatrix.vec2.dot(v1.rawElements, v2.rawElements);
        }
    }, {
        key: "add",
        value: function add(v1, v2) {
            var newVec = _glMatrix.vec2.create();
            return new Vector2(_glMatrix.vec2.add(newVec, v1.rawElements, v2.rawElements));
        }
    }, {
        key: "subtract",
        value: function subtract(v1, v2) {
            var newVec = _glMatrix.vec2.create();
            return new Vector2(_glMatrix.vec2.sub(newVec, v1.rawElements, v2.rawElements));
        }
    }, {
        key: "multiply",
        value: function multiply(s, v) {
            var newVec = _glMatrix.vec2.create();
            return new Vector2(_glMatrix.vec2.scale(newVec, v.rawElements, s));
        }
    }, {
        key: "negate",
        value: function negate(v1) {
            return Vector2.multiply(-1, v1);
        }
    }, {
        key: "equals",
        value: function equals(v1, v2) {
            return _VectorBase3.default.__elementEquals(v1, v2);
        }
    }, {
        key: "nearlyEquals",
        value: function nearlyEquals(v1, v2) {
            return _VectorBase3.default.__nearlyElementEquals(v1, v2);
        }
    }, {
        key: "normalize",
        value: function normalize(v1) {
            var newVec = _glMatrix.vec2.create();
            return new Vector2(_glMatrix.vec2.normalize(newVec, v1.rawElements));
        }
    }, {
        key: "min",
        value: function min(v1, v2) {
            return new Vector2(_VectorBase3.default.__fromGenerationFunction(v1, v2, function (i, v1_, v2_) {
                return Math.min(v1_.rawElements[i], v2_.rawElements[i]);
            }));
        }
    }, {
        key: "max",
        value: function max(v1, v2) {
            return new Vector2(_VectorBase3.default.__fromGenerationFunction(v1, v2, function (i, v1_, v2_) {
                return Math.max(v1_.rawElements[i], v2_.rawElements[i]);
            }));
        }
    }, {
        key: "angle",
        value: function angle(v1, v2) {
            return Math.acos(Vector2.dot(v1.normalized, v2.normalized));
        }
    }, {
        key: "XUnit",
        get: function get() {
            return new Vector2(1, 0);
        }
    }, {
        key: "YUnit",
        get: function get() {
            return new Vector2(0, 1);
        }
    }, {
        key: "One",
        get: function get() {
            return new Vector2(1, 1);
        }
    }, {
        key: "Zero",
        get: function get() {
            return new Vector2(0, 0);
        }
    }]);

    function Vector2(x, y) {
        _classCallCheck(this, Vector2);

        var _this = _possibleConstructorReturn(this, (Vector2.__proto__ || Object.getPrototypeOf(Vector2)).call(this));

        if (typeof y === "undefined") {
            _this.rawElements = x;
            return _possibleConstructorReturn(_this);
        }
        _this.rawElements = [x, y];
        return _this;
    }

    _createClass(Vector2, [{
        key: "dotWith",
        value: function dotWith(v) {
            return Vector2.dot(this, v);
        }
    }, {
        key: "addWith",
        value: function addWith(v) {
            return Vector2.add(this, v);
        }
    }, {
        key: "subtractWith",
        value: function subtractWith(v) {
            return Vector2.subtract(v, this);
        }
    }, {
        key: "multiplyWith",
        value: function multiplyWith(s) {
            return Vector2.multiply(s, this);
        }
    }, {
        key: "negateThis",
        value: function negateThis() {
            return Vector2.negate(this);
        }
    }, {
        key: "equalWith",
        value: function equalWith(v) {
            return Vector2.equals(this, v);
        }
    }, {
        key: "nearlyEqualWith",
        value: function nearlyEqualWith(v) {
            return Vector2.nearlyEquals(this, v);
        }
    }, {
        key: "normalizeThis",
        value: function normalizeThis() {
            return Vector2.normalize(this);
        }
    }, {
        key: "toString",
        value: function toString() {
            return "(" + this.X + ", " + this.Y + ")";
        }
    }, {
        key: "toDisplayString",
        value: function toDisplayString() {
            return "Vector2" + this.toString();
        }
    }, {
        key: "normalized",
        get: function get() {
            return this.multiplyWith(1 / this.magnitude);
        }
    }, {
        key: "X",
        get: function get() {
            return this.rawElements[0];
        },
        set: function set(x) {
            this.rawElements[0] = +x;
        }
    }, {
        key: "Y",
        get: function get() {
            return this.rawElements[1];
        },
        set: function set(y) {
            this.rawElements[1] = +y;
        }
    }, {
        key: "ElementCount",
        get: function get() {
            return 2;
        }
    }]);

    return Vector2;
}(_VectorBase3.default);

exports.default = Vector2;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Angle2DParser = __webpack_require__(9);

var _Angle2DParser2 = _interopRequireDefault(_Angle2DParser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Angle2DConverter(val) {
    if (typeof val === "number") {
        return val;
    }
    if (typeof val === "string") {
        return _Angle2DParser2.default.parseAngle(val);
    }
    throw new Error("Passed argument \"" + val + "\" can't be parsed as angle.");
}
exports.default = Angle2DConverter;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Color = __webpack_require__(6);

var _Color2 = _interopRequireDefault(_Color);

var _Color3 = __webpack_require__(5);

var _Color4 = _interopRequireDefault(_Color3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Color3Converter(val) {
    if (val instanceof _Color2.default) {
        return val;
    } else if (val instanceof _Color4.default) {
        return new _Color2.default(val.R, val.G, val.B);
    } else if (typeof val === "string") {
        return _Color2.default.parse(val);
    } else if (Array.isArray(val)) {
        return new _Color2.default(val[0], val[1], val[2]);
    } else {
        return null;
    }
}
exports.default = Color3Converter;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Color = __webpack_require__(6);

var _Color2 = _interopRequireDefault(_Color);

var _Color3 = __webpack_require__(5);

var _Color4 = _interopRequireDefault(_Color3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Color4Converter(val) {
    if (val instanceof _Color4.default) {
        return val;
    } else if (val instanceof _Color2.default) {
        return new _Color4.default(val.R, val.G, val.B, 1.0);
    } else if (typeof val === "string") {
        return _Color4.default.parse(val);
    } else if (Array.isArray(val)) {
        return new _Color4.default(val[0], val[1], val[2], val[3]);
    } else {
        return null;
    }
}
exports.default = Color4Converter;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Quaternion = __webpack_require__(8);

var _Quaternion2 = _interopRequireDefault(_Quaternion);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Rotation3Converter(val) {
    if (val instanceof _Quaternion2.default) {
        return val;
    } else if (Array.isArray(val)) {
        return val.length === 4 ? new _Quaternion2.default([val[0], val[1], val[2], val[3]]) : _Quaternion2.default.euler(val[0], val[1], val[2]);
    } else if (typeof val === "string") {
        return _Quaternion2.default.parse(val);
    } else if (!!val && val[0] !== void 0 && val[1] !== void 0 && val[2] !== void 0 && val[3] !== void 0) {
        return new _Quaternion2.default([val[0], val[1], val[2], val[3]]);
    } else if (!!val && val.X !== void 0 && val.Y !== void 0 && val.Z !== void 0 && val.W !== void 0) {
        return new _Quaternion2.default([val.X, val.Y, val.Z, val.W]);
    }
}
exports.default = Rotation3Converter;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Vector = __webpack_require__(10);

var _Vector2 = _interopRequireDefault(_Vector);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Vector2Converter(val) {
    if (val instanceof _Vector2.default) {
        return val;
    } else if (typeof val === "string") {
        return _Vector2.default.parse(val);
    } else if (typeof val === "number") {
        return new _Vector2.default(val, val);
    } else if (Array.isArray(val)) {
        return new _Vector2.default(val[0], val[1]);
    } else if (val[0] !== void 0 && val[1] !== void 0) {
        return new _Vector2.default(val[0], val[1]);
    } else if (val.X !== void 0 && val.Y !== void 0) {
        return new _Vector2.default(val.X, val.Y);
    }
}
exports.default = Vector2Converter;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Vector = __webpack_require__(1);

var _Vector2 = _interopRequireDefault(_Vector);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Vector3Converter(val) {
    if (val instanceof _Vector2.default) {
        return val;
    } else if (typeof val === "string") {
        return _Vector2.default.parse(val); // TODO: to do not throws execptions.
    } else if (typeof val == "number") {
        return new _Vector2.default(val, val, val);
    } else if (Array.isArray(val)) {
        return new _Vector2.default(val[0], val[1], val[2]);
    } else if (val[0] !== void 0 && val[1] !== void 0 && val[2] !== void 0) {
        return new _Vector2.default(val[0], val[1], val[2]);
    } else if (val.X !== void 0 && val.Y !== void 0 && val.Z !== void 0) {
        return new _Vector2.default(val.X, val.Y, val.Z);
    }
}
exports.default = Vector3Converter;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Vector = __webpack_require__(4);

var _Vector2 = _interopRequireDefault(_Vector);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Vector4Converter(val) {
    if (val instanceof _Vector2.default) {
        return val;
    } else if (typeof val === "string") {
        return _Vector2.default.parse(val);
    } else if (typeof val === "number") {
        return new _Vector2.default(val, val, val, val);
    } else if (Array.isArray(val)) {
        return new _Vector2.default(val[0], val[1], val[2], val[3]);
    } else if (!!val && val[0] !== void 0 && val[1] !== void 0 && val[2] !== void 0 && val[3] !== void 0) {
        return new _Vector2.default(val[0], val[1], val[2], val[3]);
    } else if (!!val && val.X !== void 0 && val.Y !== void 0 && val.Z !== void 0 && val.W !== void 0) {
        return new _Vector2.default(val.X, val.Y, val.Z, val.W);
    }
}
exports.default = Vector4Converter;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _MatrixBase2 = __webpack_require__(19);

var _MatrixBase3 = _interopRequireDefault(_MatrixBase2);

var _Vector = __webpack_require__(1);

var _Vector2 = _interopRequireDefault(_Vector);

var _Vector3 = __webpack_require__(4);

var _Vector4 = _interopRequireDefault(_Vector3);

var _Quaternion = __webpack_require__(8);

var _Quaternion2 = _interopRequireDefault(_Quaternion);

var _glMatrix = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="./gl-matrix.d.ts"/>


/**
 * Represents 4x4 matrix.
 */
var Matrix = function (_MatrixBase) {
  _inherits(Matrix, _MatrixBase);

  _createClass(Matrix, null, [{
    key: "zero",

    /**
     * Instanciate zero matrix.
     */
    value: function zero() {
      return new Matrix([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    }
    /**
     * Instanciate identity matrix.
     */

  }, {
    key: "identity",
    value: function identity() {
      return new Matrix(_glMatrix.mat4.create());
    }
    /**
     * Instanciate matrix in row major.
     * @return {Matrix}     [description]
     */

  }, {
    key: "fromElements",
    value: function fromElements(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
      return new Matrix([m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33]);
    }
    /**
     * Instanciate matrix by generator.
     * @param  {(w: number, h: number) => number} generator function returning number from index of column and row.
     * @return {[type]}   A matrix instance.
     */

  }, {
    key: "fromFunc",
    value: function fromFunc(f) {
      return new Matrix([f(0, 0), f(1, 0), f(2, 0), f(3, 0), f(0, 1), f(1, 1), f(2, 1), f(3, 1), f(0, 2), f(1, 2), f(2, 2), f(3, 2), f(0, 3), f(1, 3), f(2, 3), f(3, 3)]);
    }
    /**
     * Compare given matrices.
     * @param  {Matrix}  m1 matrix to compare
     * @param  {Matrix}  m2 matrix to compare
     * @return {boolean}    the result
     */

  }, {
    key: "equals",
    value: function equals(m1, m2) {
      return Matrix.__elementEquals(m1, m2);
    }
    /**
     * Add each component of matrix.
     * @param  {Matrix} m1 A matrix to add.
     * @param  {Matrix} m2 A matrix to add.
     * @return {Matrix}    The result of calculation.
     */

  }, {
    key: "add",
    value: function add(m1, m2) {
      var mat = _glMatrix.mat4.create();
      for (var i = 0; i < 16; i++) {
        mat[i] = m1.rawElements[i] + m2.rawElements[i];
      }
      return new Matrix(mat);
    }
    /**
     * Subtract each component of matrix.
     * @param  {Matrix} m1 A matrix to subtract.
     * @param  {Matrix} m2 A matrix to subtract.
     * @return {Matrix}    The result of calculation.
     */

  }, {
    key: "subtract",
    value: function subtract(m1, m2) {
      return Matrix.add(m1, Matrix.negate(m2));
    }
    /**
     * Multiply a given scalar value to each components of matrix..
     * @param  {number} s A scalar to multiply
     * @param  {Matrix} m A matrix to be multiplied
     * @return {Matrix}  The result of calculation
     */

  }, {
    key: "scalarMultiply",
    value: function scalarMultiply(s, m) {
      var newMat = _glMatrix.mat4.create();
      _glMatrix.mat4.multiply(newMat, [s, 0, 0, 0, 0, s, 0, 0, 0, 0, s, 0, 0, 0, 0, s], m.rawElements);
      return new Matrix(newMat);
    }
    /**
     * Multiply 2 matrices
     * @param  {Matrix} m1 A matrix to multiply
     * @param  {Matrix} m2 A matrix to multiply
     * @return {Matrix}    The result of calculation
     */

  }, {
    key: "multiply",
    value: function multiply(m1, m2) {
      var newMat = _glMatrix.mat4.create();
      return new Matrix(_glMatrix.mat4.mul(newMat, m1.rawElements, m2.rawElements));
    }
    /**
     * Generate Translate-Scale-Rotation matrix from given value.
     * @param  {Vector3}    t   A translation value
     * @param  {Quaternion} rot A rotation value
     * @param  {Vector3}    s   A scale value
     * @return {Matrix}         TRS matrix
     */

  }, {
    key: "trs",
    value: function trs(t, rot, s) {
      var newMat = _glMatrix.mat4.create();
      var cacheMat = _glMatrix.mat4.create();
      _glMatrix.mat4.mul(newMat, _glMatrix.mat4.translate(newMat, _glMatrix.mat4.create(), t.rawElements), _glMatrix.mat4.fromQuat(cacheMat, rot.rawElements));
      _glMatrix.mat4.scale(newMat, newMat, s.rawElements);
      return new Matrix(newMat);
    }
    /**
     * Negate all components of matrix.
     */

  }, {
    key: "negate",
    value: function negate(m) {
      return this.scalarMultiply(-1, m);
    }
    /**
     * Calculate transposed matrix
     */

  }, {
    key: "transpose",
    value: function transpose(m) {
      var newMat = _glMatrix.mat4.create();
      return new Matrix(_glMatrix.mat4.transpose(newMat, m.rawElements));
    }
    /**
     * Transform a vector representing coordinate by given matrix.
     * @param  {Matrix}  m A matrix representing a transform.
     * @param  {Vector3} t A vector representing coordinate.
     * @return {Vector3}   Transformed coordinate
     */

  }, {
    key: "transformPoint",
    value: function transformPoint(m, t) {
      var newVec = _glMatrix.vec3.create();
      _glMatrix.vec3.transformMat4(newVec, t.rawElements, m.rawElements);
      return new _Vector2.default(newVec);
    }
    /**
     * Transform a vector representing direction by given matrix.
     * @param  {Matrix}  m A matrix representing a transform.
     * @param  {Vector3} t A vector representing direction.
     * @return {Vector3}   Transformed direction
     */

  }, {
    key: "transformNormal",
    value: function transformNormal(m, t) {
      var newVec = _glMatrix.vec4.create();
      var trans = _glMatrix.vec4.create();
      trans[0] = t.X;
      trans[1] = t.Y;
      trans[2] = t.Z;
      trans[3] = 0;
      _glMatrix.vec4.transformMat4(newVec, trans, m.rawElements);
      return new _Vector2.default(newVec[0], newVec[1], newVec[2]);
    }
    /**
     * Transform a Vector4 by given matrix.
     * @param  {Matrix}  m A matrix representing a transform.
     * @param  {Vector4} t A vector to transform
     * @return {Vector4}   Transformed vector
     */

  }, {
    key: "transform",
    value: function transform(m, t) {
      var newVec = _glMatrix.vec4.create();
      var trans = _glMatrix.vec4.create();
      trans[0] = t.X;
      trans[1] = t.Y;
      trans[2] = t.Z;
      trans[3] = t.W;
      _glMatrix.vec4.transformMat4(newVec, trans, m.rawElements);
      return new _Vector4.default(newVec[0], newVec[1], newVec[2], newVec[3]);
    }
    /**
     * Retrieve determinant of passed matrix
     */

  }, {
    key: "determinant",
    value: function determinant(m) {
      return _glMatrix.mat4.determinant(m.rawElements);
    }
    /**
     * Compute inverted passed matrix.
     */

  }, {
    key: "inverse",
    value: function inverse(m) {
      var newMat = _glMatrix.mat4.create();
      return new Matrix(_glMatrix.mat4.invert(newMat, m.rawElements));
    }
    /**
     * Generate linear translation transform matrix.
     */

  }, {
    key: "translate",
    value: function translate(v) {
      var newMat = _glMatrix.mat4.create();
      _glMatrix.mat4.translate(newMat, newMat, v.rawElements);
      return new Matrix(newMat);
    }
    /**
     * Generate linear scaling transform matrix.
     */

  }, {
    key: "scale",
    value: function scale(v) {
      var newMat = _glMatrix.mat4.create();
      _glMatrix.mat4.scale(newMat, newMat, v.rawElements);
      return new Matrix(newMat);
    }
    /**
     * Instanciate a matrix representing X-axis rotation.
     * @param  {number} angle Angle of rotation in radians.
     * @return {Matrix}       Rotation matrix
     */

  }, {
    key: "rotateX",
    value: function rotateX(angle) {
      var newMat = _glMatrix.mat4.create();
      _glMatrix.mat4.rotateX(newMat, newMat, angle);
      return new Matrix(newMat);
    }
    /**
     * Instanciate a matrix representing Y-axis rotation.
     * @param  {number} angle Angle of rotation in radians.
     * @return {Matrix}       Rotation matrix
     */

  }, {
    key: "rotateY",
    value: function rotateY(angle) {
      var newMat = _glMatrix.mat4.create();
      _glMatrix.mat4.rotateY(newMat, newMat, angle);
      return new Matrix(newMat);
    }
    /**
     * Instanciate a matrix representing Z-axis rotation.
     * @param  {number} angle Angle of rotation in radians.
     * @return {Matrix}       Rotation matrix
     */

  }, {
    key: "rotateZ",
    value: function rotateZ(angle) {
      var newMat = _glMatrix.mat4.create();
      _glMatrix.mat4.rotateZ(newMat, newMat, angle);
      return new Matrix(newMat);
    }
    /**
     * Instanciate a matrix representing rotation converted from a given quaternion.
     * @param  {Quaternion} A quaternion to represent a rotation.
     * @return {Matrix}       Rotation matrix
     */

  }, {
    key: "rotationQuaternion",
    value: function rotationQuaternion(quat_) {
      var quaternion = _glMatrix.quat.create();
      var newMat = _glMatrix.mat4.create();
      _glMatrix.quat.normalize(quaternion, quat_.rawElements);
      _glMatrix.mat4.fromQuat(newMat, quaternion);
      return new Matrix(newMat);
    }
    /**
     * Generate frustum matrix.
     * @param  {number} left   Left clip coordinate
     * @param  {number} right  Right clip coordinate
     * @param  {number} bottom Bottom clip coordinate
     * @param  {number} top    Top clip coordinate
     * @param  {number} near   Near clip coordinate
     * @param  {number} far    Far clip coordinate
     * @return {Matrix}        Frustum matrix
     */

  }, {
    key: "frustum",
    value: function frustum(left, right, bottom, top, near, far) {
      var newMat = _glMatrix.mat4.create();
      _glMatrix.mat4.frustum(newMat, left, right, bottom, top, near, far);
      return new Matrix(newMat);
    }
    /**
     * Generate orthogonal matrix.
     * @param  {number} left   Left clip coordinate
     * @param  {number} right  Right clip coordinate
     * @param  {number} bottom Bottom clip coordinate
     * @param  {number} top    Top clip coordinate
     * @param  {number} near   Near clip coordinate
     * @param  {number} far    Far clip coordinate
     * @return {Matrix}        Orthogonal matrix
     */

  }, {
    key: "ortho",
    value: function ortho(left, right, bottom, top, near, far) {
      var newMat = _glMatrix.mat4.create();
      _glMatrix.mat4.ortho(newMat, left, right, bottom, top, near, far);
      return new Matrix(newMat);
    }
    /**
     * Generate perspective matrix.
     * @param  {number} fovy   fovy angle of perspective in radians
     * @param  {number} aspect aspect ratio
     * @param  {number} near   Near clip disntance
     * @param  {number} far    Far clip disntance
     * @return {Matrix}        perspective matrix
     */

  }, {
    key: "perspective",
    value: function perspective(fovy, aspect, near, far) {
      var newMat = _glMatrix.mat4.create();
      _glMatrix.mat4.perspective(newMat, fovy, aspect, near, far);
      return new Matrix(newMat);
    }
    /**
     * Generate view matrix
     * @param  {Vector3} eye    eye position
     * @param  {Vector3} lookAt the position to stare at
     * @param  {Vector3} up     up direction
     * @return {Matrix}         view matrix
     */

  }, {
    key: "lookAt",
    value: function lookAt(eye, _lookAt, up) {
      var newMat = _glMatrix.mat4.create();
      _glMatrix.mat4.lookAt(newMat, eye.rawElements, _lookAt.rawElements, up.rawElements);
      return new Matrix(newMat);
    }
    /**
     * Constructor to generate an instance
     * @param  {GLM.IArray} arr Array of components
     */

  }]);

  function Matrix(arr) {
    _classCallCheck(this, Matrix);

    var _this = _possibleConstructorReturn(this, (Matrix.__proto__ || Object.getPrototypeOf(Matrix)).call(this));

    if (arr) {
      _this.rawElements = arr;
    } else {
      _this.rawElements = _glMatrix.mat4.create();
    }
    return _this;
  }
  /**
   * Obtain a component of matrix at the spcecific index calculated from row index and column index
   * @param  {number} row    row index 0 to 3
   * @param  {number} colmun column index 0 to 3
   * @return {number}        the component
   */


  _createClass(Matrix, [{
    key: "getAt",
    value: function getAt(row, colmun) {
      return this.rawElements[colmun * 4 + row];
    }
    /**
     * Mutate a component of matrix at the specific index calculated from row index and column index
     * @param {number} row    row index 0 to 3
     * @param {number} colmun column index 0 to 3
     * @param {number} val    the value to set
     */

  }, {
    key: "setAt",
    value: function setAt(row, colmun, val) {
      this.rawElements[colmun * 4 + row] = val;
    }
    /**
     * Obtain a component of matrix at the index
     * @param  {number} index index in column order
     * @return {number}       the value at the index
     */

  }, {
    key: "getBySingleIndex",
    value: function getBySingleIndex(index) {
      return this.rawElements[index];
    }
    /**
     * Get column Vector at the column
     * @param  {number}  col column index 0 to 3
     * @return {Vector4}     Column vector
     */

  }, {
    key: "getColmun",
    value: function getColmun(col) {
      return new _Vector4.default(this.rawElements[col * 4], this.rawElements[col * 4 + 1], this.rawElements[col * 4 + 2], this.rawElements[col * 4 + 3]);
    }
    /**
     * Get row vector at the row
     * @param  {number}  row row index 0 to 3
     * @return {Vector4}     Row vector
     */

  }, {
    key: "getRow",
    value: function getRow(row) {
      return new _Vector4.default(this.rawElements[row], this.rawElements[row + 4], this.rawElements[row + 8], this.rawElements[row + 12]);
    }
    /**
     * Multiply this matrix with the other instance.
     * @param  {Matrix} m the other matrix to multiply
     * @return {Matrix}   Calculated matrix
     */

  }, {
    key: "multiplyWith",
    value: function multiplyWith(m) {
      return Matrix.multiply(this, m);
    }
    /**
     * Compare this matrix with the other instance
     * @param  {Matrix}  m the other matrix to compare
     * @return {boolean}   The result of comparation
     */

  }, {
    key: "equalWith",
    value: function equalWith(m) {
      return Matrix.equals(m, this);
    }
    /**
     * Get translation vector from this matrix.
     * @return {Vector3} Translation represented in vector
     */

  }, {
    key: "getTranslation",
    value: function getTranslation() {
      var res = [0, 0, 0];
      _glMatrix.mat4.getTranslation(res, this.rawElements);
      return new _Vector2.default(res);
    }
    /**
     * Get scaling vector from this matrix.
     * @return {Vector3} Scaling represented in vector
     */

  }, {
    key: "getScaling",
    value: function getScaling() {
      var res = [0, 0, 0];
      _glMatrix.mat4.getScaling(res, this.rawElements);
      return new _Vector2.default(res);
    }
    /**
     * Get rotation quaternion from this matrix.
     * @return {Quaternion} Rotation represented in quaternion
     */

  }, {
    key: "getRotation",
    value: function getRotation() {
      var res = [0, 0, 0, 0];
      var invScale = this.getScaling();
      _glMatrix.mat4.getRotation(res, this.multiplyWith(Matrix.scale(new _Vector2.default(1 / invScale.X, 1 / invScale.Y, 1 / invScale.Z))).rawElements);
      return new _Quaternion2.default(res);
    }
    /**
     * Get expression as string of this matrix
     */

  }, {
    key: "toString",
    value: function toString() {
      return "|" + this.getBySingleIndex(0) + " " + this.getBySingleIndex(4) + " " + this.getBySingleIndex(8) + " " + this.getBySingleIndex(12) + "|\n\n                 |" + this.getBySingleIndex(1) + " " + this.getBySingleIndex(5) + " " + this.getBySingleIndex(9) + " " + this.getBySingleIndex(13) + "|\n\n                 |" + this.getBySingleIndex(2) + " " + this.getBySingleIndex(6) + " " + this.getBySingleIndex(10) + " " + this.getBySingleIndex(14) + "|\n\n                 |" + this.getBySingleIndex(3) + " " + this.getBySingleIndex(7) + " " + this.getBySingleIndex(11) + " " + this.getBySingleIndex(15) + "|";
    }
    /**
     * Element count of this matrix. Must be 16.
     * @return {number} [description]
     */

  }, {
    key: "ElementCount",
    get: function get() {
      return 16;
    }
    /**
     * Row count of this matrix. Must be 4.
     */

  }, {
    key: "RowCount",
    get: function get() {
      return 4;
    }
    /**
     * Column count of this matrix. Must be 4.
     */

  }, {
    key: "ColmunCount",
    get: function get() {
      return 4;
    }
  }]);

  return Matrix;
}(_MatrixBase3.default);

exports.default = Matrix;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

///<reference path="./gl-matrix.d.ts"/>
var MatrixBase = function () {
    function MatrixBase() {
        _classCallCheck(this, MatrixBase);
    }

    _createClass(MatrixBase, [{
        key: "getAt",
        value: function getAt(row, colmun) {
            throw new Error("Not implemented");
        }
    }, {
        key: "getBySingleIndex",
        value: function getBySingleIndex(index) {
            throw new Error("Not implemented");
        }
    }, {
        key: "RowCount",
        get: function get() {
            return 0;
        }
    }, {
        key: "ColmunCount",
        get: function get() {
            return 0;
        }
    }], [{
        key: "__elementEquals",
        value: function __elementEquals(m1, m2) {
            if (m1.RowCount !== m2.RowCount || m1.ColmunCount !== m2.ColmunCount) {
                return false;
            }
            var count = m1.RowCount * m2.ColmunCount;
            for (var i = 0; i < count; i++) {
                if (m1.getBySingleIndex(i) !== m2.getBySingleIndex(i)) {
                    return false;
                }
            }
            return true;
        }
    }]);

    return MatrixBase;
}();

exports.default = MatrixBase;

/***/ }),
/* 20 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = __webpack_require__(0);

/**
 * @class 3x3 Matrix
 * @name mat3
 */
var mat3 = {};

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */
mat3.create = function() {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
};

/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {mat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */
mat3.fromMat4 = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[4];
    out[4] = a[5];
    out[5] = a[6];
    out[6] = a[8];
    out[7] = a[9];
    out[8] = a[10];
    return out;
};

/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {mat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */
mat3.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */
mat3.fromValues = function(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m10;
    out[4] = m11;
    out[5] = m12;
    out[6] = m20;
    out[7] = m21;
    out[8] = m22;
    return out;
};

/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */
mat3.set = function(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m10;
    out[4] = m11;
    out[5] = m12;
    out[6] = m20;
    out[7] = m21;
    out[8] = m22;
    return out;
};

/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */
mat3.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
};

/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a12 = a[5];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a01;
        out[5] = a[7];
        out[6] = a02;
        out[7] = a12;
    } else {
        out[0] = a[0];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a[1];
        out[4] = a[4];
        out[5] = a[7];
        out[6] = a[2];
        out[7] = a[5];
        out[8] = a[8];
    }

    return out;
};

/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        b01 = a22 * a11 - a12 * a21,
        b11 = -a22 * a10 + a12 * a20,
        b21 = a21 * a10 - a11 * a20,

        // Calculate the determinant
        det = a00 * b01 + a01 * b11 + a02 * b21;

    if (!det) {
        return null;
    }
    det = 1.0 / det;

    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
};

/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8];

    out[0] = (a11 * a22 - a12 * a21);
    out[1] = (a02 * a21 - a01 * a22);
    out[2] = (a01 * a12 - a02 * a11);
    out[3] = (a12 * a20 - a10 * a22);
    out[4] = (a00 * a22 - a02 * a20);
    out[5] = (a02 * a10 - a00 * a12);
    out[6] = (a10 * a21 - a11 * a20);
    out[7] = (a01 * a20 - a00 * a21);
    out[8] = (a00 * a11 - a01 * a10);
    return out;
};

/**
 * Calculates the determinant of a mat3
 *
 * @param {mat3} a the source matrix
 * @returns {Number} determinant of a
 */
mat3.determinant = function (a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8];

    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
};

/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
mat3.multiply = function (out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        b00 = b[0], b01 = b[1], b02 = b[2],
        b10 = b[3], b11 = b[4], b12 = b[5],
        b20 = b[6], b21 = b[7], b22 = b[8];

    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;

    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;

    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
};

/**
 * Alias for {@link mat3.multiply}
 * @function
 */
mat3.mul = mat3.multiply;

/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to translate
 * @param {vec2} v vector to translate by
 * @returns {mat3} out
 */
mat3.translate = function(out, a, v) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],
        x = v[0], y = v[1];

    out[0] = a00;
    out[1] = a01;
    out[2] = a02;

    out[3] = a10;
    out[4] = a11;
    out[5] = a12;

    out[6] = x * a00 + y * a10 + a20;
    out[7] = x * a01 + y * a11 + a21;
    out[8] = x * a02 + y * a12 + a22;
    return out;
};

/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
mat3.rotate = function (out, a, rad) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        s = Math.sin(rad),
        c = Math.cos(rad);

    out[0] = c * a00 + s * a10;
    out[1] = c * a01 + s * a11;
    out[2] = c * a02 + s * a12;

    out[3] = c * a10 - s * a00;
    out[4] = c * a11 - s * a01;
    out[5] = c * a12 - s * a02;

    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
};

/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/
mat3.scale = function(out, a, v) {
    var x = v[0], y = v[1];

    out[0] = x * a[0];
    out[1] = x * a[1];
    out[2] = x * a[2];

    out[3] = y * a[3];
    out[4] = y * a[4];
    out[5] = y * a[5];

    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat3} out
 */
mat3.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = v[0];
    out[7] = v[1];
    out[8] = 1;
    return out;
}

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
mat3.fromRotation = function(out, rad) {
    var s = Math.sin(rad), c = Math.cos(rad);

    out[0] = c;
    out[1] = s;
    out[2] = 0;

    out[3] = -s;
    out[4] = c;
    out[5] = 0;

    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat3} out
 */
mat3.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;

    out[3] = 0;
    out[4] = v[1];
    out[5] = 0;

    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
}

/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat2d} a the matrix to copy
 * @returns {mat3} out
 **/
mat3.fromMat2d = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = 0;

    out[3] = a[2];
    out[4] = a[3];
    out[5] = 0;

    out[6] = a[4];
    out[7] = a[5];
    out[8] = 1;
    return out;
};

/**
* Calculates a 3x3 matrix from the given quaternion
*
* @param {mat3} out mat3 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat3} out
*/
mat3.fromQuat = function (out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - yy - zz;
    out[3] = yx - wz;
    out[6] = zx + wy;

    out[1] = yx + wz;
    out[4] = 1 - xx - zz;
    out[7] = zy - wx;

    out[2] = zx - wy;
    out[5] = zy + wx;
    out[8] = 1 - xx - yy;

    return out;
};

/**
* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
*
* @param {mat3} out mat3 receiving operation result
* @param {mat4} a Mat4 to derive the normal matrix from
*
* @returns {mat3} out
*/
mat3.normalFromMat4 = function (out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) {
        return null;
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;

    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;

    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;

    return out;
};

/**
 * Returns a string representation of a mat3
 *
 * @param {mat3} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat3.str = function (a) {
    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +
                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';
};

/**
 * Returns Frobenius norm of a mat3
 *
 * @param {mat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat3.frob = function (a) {
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))
};

/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
mat3.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    out[8] = a[8] + b[8];
    return out;
};

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
mat3.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    out[6] = a[6] - b[6];
    out[7] = a[7] - b[7];
    out[8] = a[8] - b[8];
    return out;
};

/**
 * Alias for {@link mat3.subtract}
 * @function
 */
mat3.sub = mat3.subtract;

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */
mat3.multiplyScalar = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    out[8] = a[8] * b;
    return out;
};

/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */
mat3.multiplyScalarAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    out[4] = a[4] + (b[4] * scale);
    out[5] = a[5] + (b[5] * scale);
    out[6] = a[6] + (b[6] * scale);
    out[7] = a[7] + (b[7] * scale);
    out[8] = a[8] + (b[8] * scale);
    return out;
};

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat3.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&
           a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&
           a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
};

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat3.equals = function (a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];
    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));
};


module.exports = mat3;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = __webpack_require__(0);

/**
 * @class 3 Dimensional Vector
 * @name vec3
 */
var vec3 = {};

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */
vec3.create = function() {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    return out;
};

/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {vec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */
vec3.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};

/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */
vec3.fromValues = function(x, y, z) {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};

/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the source vector
 * @returns {vec3} out
 */
vec3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};

/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */
vec3.set = function(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};

/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
};

/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
};

/**
 * Alias for {@link vec3.subtract}
 * @function
 */
vec3.sub = vec3.subtract;

/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    return out;
};

/**
 * Alias for {@link vec3.multiply}
 * @function
 */
vec3.mul = vec3.multiply;

/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    return out;
};

/**
 * Alias for {@link vec3.divide}
 * @function
 */
vec3.div = vec3.divide;

/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to ceil
 * @returns {vec3} out
 */
vec3.ceil = function (out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    out[2] = Math.ceil(a[2]);
    return out;
};

/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to floor
 * @returns {vec3} out
 */
vec3.floor = function (out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    out[2] = Math.floor(a[2]);
    return out;
};

/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    return out;
};

/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    return out;
};

/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to round
 * @returns {vec3} out
 */
vec3.round = function (out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    out[2] = Math.round(a[2]);
    return out;
};

/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */
vec3.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
};

/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */
vec3.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    return out;
};

/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */
vec3.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return Math.sqrt(x*x + y*y + z*z);
};

/**
 * Alias for {@link vec3.distance}
 * @function
 */
vec3.dist = vec3.distance;

/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec3.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return x*x + y*y + z*z;
};

/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */
vec3.sqrDist = vec3.squaredDistance;

/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */
vec3.length = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return Math.sqrt(x*x + y*y + z*z);
};

/**
 * Alias for {@link vec3.length}
 * @function
 */
vec3.len = vec3.length;

/**
 * Calculates the squared length of a vec3
 *
 * @param {vec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec3.squaredLength = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return x*x + y*y + z*z;
};

/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */
vec3.sqrLen = vec3.squaredLength;

/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */
vec3.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    return out;
};

/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to invert
 * @returns {vec3} out
 */
vec3.inverse = function(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
};

/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */
vec3.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    var len = x*x + y*y + z*z;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */
vec3.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
};

/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.cross = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2],
        bx = b[0], by = b[1], bz = b[2];

    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
};

/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
vec3.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
};

/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
vec3.hermite = function (out, a, b, c, d, t) {
  var factorTimes2 = t * t,
      factor1 = factorTimes2 * (2 * t - 3) + 1,
      factor2 = factorTimes2 * (t - 2) + t,
      factor3 = factorTimes2 * (t - 1),
      factor4 = factorTimes2 * (3 - 2 * t);
  
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  
  return out;
};

/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
vec3.bezier = function (out, a, b, c, d, t) {
  var inverseFactor = 1 - t,
      inverseFactorTimesTwo = inverseFactor * inverseFactor,
      factorTimes2 = t * t,
      factor1 = inverseFactorTimesTwo * inverseFactor,
      factor2 = 3 * t * inverseFactorTimesTwo,
      factor3 = 3 * factorTimes2 * inverseFactor,
      factor4 = factorTimes2 * t;
  
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  
  return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */
vec3.random = function (out, scale) {
    scale = scale || 1.0;

    var r = glMatrix.RANDOM() * 2.0 * Math.PI;
    var z = (glMatrix.RANDOM() * 2.0) - 1.0;
    var zScale = Math.sqrt(1.0-z*z) * scale;

    out[0] = Math.cos(r) * zScale;
    out[1] = Math.sin(r) * zScale;
    out[2] = z * scale;
    return out;
};

/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */
vec3.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2],
        w = m[3] * x + m[7] * y + m[11] * z + m[15];
    w = w || 1.0;
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
    return out;
};

/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */
vec3.transformMat3 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = x * m[0] + y * m[3] + z * m[6];
    out[1] = x * m[1] + y * m[4] + z * m[7];
    out[2] = x * m[2] + y * m[5] + z * m[8];
    return out;
};

/**
 * Transforms the vec3 with a quat
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec3} out
 */
vec3.transformQuat = function(out, a, q) {
    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations

    var x = a[0], y = a[1], z = a[2],
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

        // calculate quat * vec
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return out;
};

/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
vec3.rotateX = function(out, a, b, c){
   var p = [], r=[];
	  //Translate point to the origin
	  p[0] = a[0] - b[0];
	  p[1] = a[1] - b[1];
  	p[2] = a[2] - b[2];

	  //perform rotation
	  r[0] = p[0];
	  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);
	  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);

	  //translate to correct position
	  out[0] = r[0] + b[0];
	  out[1] = r[1] + b[1];
	  out[2] = r[2] + b[2];

  	return out;
};

/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
vec3.rotateY = function(out, a, b, c){
  	var p = [], r=[];
  	//Translate point to the origin
  	p[0] = a[0] - b[0];
  	p[1] = a[1] - b[1];
  	p[2] = a[2] - b[2];
  
  	//perform rotation
  	r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);
  	r[1] = p[1];
  	r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);
  
  	//translate to correct position
  	out[0] = r[0] + b[0];
  	out[1] = r[1] + b[1];
  	out[2] = r[2] + b[2];
  
  	return out;
};

/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
vec3.rotateZ = function(out, a, b, c){
  	var p = [], r=[];
  	//Translate point to the origin
  	p[0] = a[0] - b[0];
  	p[1] = a[1] - b[1];
  	p[2] = a[2] - b[2];
  
  	//perform rotation
  	r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);
  	r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);
  	r[2] = p[2];
  
  	//translate to correct position
  	out[0] = r[0] + b[0];
  	out[1] = r[1] + b[1];
  	out[2] = r[2] + b[2];
  
  	return out;
};

/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec3.forEach = (function() {
    var vec = vec3.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 3;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];
        }
        
        return a;
    };
})();

/**
 * Get the angle between two 3D vectors
 * @param {vec3} a The first operand
 * @param {vec3} b The second operand
 * @returns {Number} The angle in radians
 */
vec3.angle = function(a, b) {
   
    var tempA = vec3.fromValues(a[0], a[1], a[2]);
    var tempB = vec3.fromValues(b[0], b[1], b[2]);
 
    vec3.normalize(tempA, tempA);
    vec3.normalize(tempB, tempB);
 
    var cosine = vec3.dot(tempA, tempB);

    if(cosine > 1.0) {
        return 0;
    }
    else if(cosine < -1.0) {
        return Math.PI;
    } else {
        return Math.acos(cosine);
    }     
};

/**
 * Returns a string representation of a vector
 *
 * @param {vec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec3.str = function (a) {
    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
};

/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
vec3.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
};

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
vec3.equals = function (a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2];
    var b0 = b[0], b1 = b[1], b2 = b[2];
    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));
};

module.exports = vec3;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = __webpack_require__(0);

/**
 * @class 4 Dimensional Vector
 * @name vec4
 */
var vec4 = {};

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */
vec4.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    return out;
};

/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {vec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */
vec4.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */
vec4.fromValues = function(x, y, z, w) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};

/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the source vector
 * @returns {vec4} out
 */
vec4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */
vec4.set = function(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};

/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
};

/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
};

/**
 * Alias for {@link vec4.subtract}
 * @function
 */
vec4.sub = vec4.subtract;

/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    out[3] = a[3] * b[3];
    return out;
};

/**
 * Alias for {@link vec4.multiply}
 * @function
 */
vec4.mul = vec4.multiply;

/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    out[3] = a[3] / b[3];
    return out;
};

/**
 * Alias for {@link vec4.divide}
 * @function
 */
vec4.div = vec4.divide;

/**
 * Math.ceil the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to ceil
 * @returns {vec4} out
 */
vec4.ceil = function (out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    out[2] = Math.ceil(a[2]);
    out[3] = Math.ceil(a[3]);
    return out;
};

/**
 * Math.floor the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to floor
 * @returns {vec4} out
 */
vec4.floor = function (out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    out[2] = Math.floor(a[2]);
    out[3] = Math.floor(a[3]);
    return out;
};

/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    out[3] = Math.min(a[3], b[3]);
    return out;
};

/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    out[3] = Math.max(a[3], b[3]);
    return out;
};

/**
 * Math.round the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to round
 * @returns {vec4} out
 */
vec4.round = function (out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    out[2] = Math.round(a[2]);
    out[3] = Math.round(a[3]);
    return out;
};

/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */
vec4.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
};

/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */
vec4.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    return out;
};

/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */
vec4.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return Math.sqrt(x*x + y*y + z*z + w*w);
};

/**
 * Alias for {@link vec4.distance}
 * @function
 */
vec4.dist = vec4.distance;

/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec4.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return x*x + y*y + z*z + w*w;
};

/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */
vec4.sqrDist = vec4.squaredDistance;

/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */
vec4.length = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return Math.sqrt(x*x + y*y + z*z + w*w);
};

/**
 * Alias for {@link vec4.length}
 * @function
 */
vec4.len = vec4.length;

/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec4.squaredLength = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return x*x + y*y + z*z + w*w;
};

/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */
vec4.sqrLen = vec4.squaredLength;

/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */
vec4.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = -a[3];
    return out;
};

/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to invert
 * @returns {vec4} out
 */
vec4.inverse = function(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  out[3] = 1.0 / a[3];
  return out;
};

/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */
vec4.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    var len = x*x + y*y + z*z + w*w;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
        out[0] = x * len;
        out[1] = y * len;
        out[2] = z * len;
        out[3] = w * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */
vec4.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
};

/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec4} out
 */
vec4.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    out[3] = aw + t * (b[3] - aw);
    return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */
vec4.random = function (out, scale) {
    scale = scale || 1.0;

    //TODO: This is a pretty awful way of doing this. Find something better.
    out[0] = glMatrix.RANDOM();
    out[1] = glMatrix.RANDOM();
    out[2] = glMatrix.RANDOM();
    out[3] = glMatrix.RANDOM();
    vec4.normalize(out, out);
    vec4.scale(out, out, scale);
    return out;
};

/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */
vec4.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
};

/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec4} out
 */
vec4.transformQuat = function(out, a, q) {
    var x = a[0], y = a[1], z = a[2],
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

        // calculate quat * vec
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    out[3] = a[3];
    return out;
};

/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec4.forEach = (function() {
    var vec = vec4.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 4;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec4} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec4.str = function (a) {
    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
vec4.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
};

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
vec4.equals = function (a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));
};

module.exports = vec4;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); ///<reference path="./gl-matrix.d.ts"/>


var _Vector = __webpack_require__(1);

var _Vector2 = _interopRequireDefault(_Vector);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Axis-Aligned Bounding Box implementation
 */
var AABB = function () {
    function AABB(initialPoints) {
        var _this = this;

        _classCallCheck(this, AABB);

        if (initialPoints) {
            initialPoints.forEach(function (f) {
                return _this.expand(f);
            });
        }
    }
    /**
     * Width of this AABB
     */


    _createClass(AABB, [{
        key: "expand",

        /**
         * Calculate new bounding box with considering the new point is included.
         * @param  {Vector3} newPoint the point that will be considered that it should be in this bounding box.
         */
        value: function expand(newPoint) {
            if (this.pointLBF == null) {
                // assume this is first time to be used this AABB instance
                this.pointLBF = _Vector2.default.copy(newPoint);
                this.pointRTN = _Vector2.default.copy(newPoint);
            }
            this.pointLBF = _Vector2.default.min(newPoint, this.pointLBF);
            this.pointRTN = _Vector2.default.max(newPoint, this.pointRTN);
            this._center = null;
            return this;
        }
        /**
         * Clean up this AABB with initial value.
         */

    }, {
        key: "clear",
        value: function clear() {
            this.pointLBF = null;
            this.pointRTN = null;
            this._center = null;
        }
    }, {
        key: "Width",
        get: function get() {
            return Math.abs(this.pointLBF.X - this.pointRTN.X);
        }
        /**
         * Height of this AABB
         */

    }, {
        key: "Height",
        get: function get() {
            return Math.abs(this.pointLBF.Y - this.pointRTN.Y);
        }
        /**
         * Distance of this AABB
         */

    }, {
        key: "Distance",
        get: function get() {
            return Math.abs(this.pointLBF.Z - this.pointRTN.Z);
        }
    }, {
        key: "Center",
        get: function get() {
            return this._center ? this._center : this._center = _Vector2.default.add(this.pointLBF, this.pointRTN).multiplyWith(0.5);
        }
    }]);

    return AABB;
}();

exports.default = AABB;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _glMatrix = __webpack_require__(3);

exports.default = {
    vec2: _glMatrix.vec2,
    vec3: _glMatrix.vec3,
    vec4: _glMatrix.vec4,
    glMatrix: _glMatrix.glMatrix,
    mat2d: _glMatrix.mat2d,
    mat3: _glMatrix.mat3,
    mat4: _glMatrix.mat4,
    quat: _glMatrix.quat
};

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Vector = __webpack_require__(10);

var _Vector2 = _interopRequireDefault(_Vector);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Rectangle = function () {
    _createClass(Rectangle, null, [{
        key: "equals",
        value: function equals(r1, r2) {
            return r1.Left === r2.Left && r1.Right === r2.Right && r1.Top === r2.Top && r1.Bottom === r2.Bottom;
        }
    }, {
        key: "edgeSizeEquals",
        value: function edgeSizeEquals(r1, r2) {
            return r1.Width === r2.Width && r1.Height === r2.Height;
        }
    }]);

    function Rectangle(left, top, width, height) {
        _classCallCheck(this, Rectangle);

        this._left = left;
        this._top = top;
        this._width = width;
        this._height = height;
    }

    _createClass(Rectangle, [{
        key: "contains",
        value: function contains(xOrPoint, y) {
            var x = void 0;
            if (xOrPoint instanceof _Vector2.default) {
                x = xOrPoint.X;
                y = xOrPoint.Y;
            } else {
                x = xOrPoint;
            }
            return this.Left <= x && this.Right >= x && this.Top <= y && this.Bottom >= y;
        }
    }, {
        key: "toLocal",
        value: function toLocal(xOrPoint, y) {
            var x = void 0;
            if (xOrPoint instanceof _Vector2.default) {
                x = xOrPoint.X;
                y = xOrPoint.Y;
            } else {
                x = xOrPoint;
            }
            x -= this.Left;
            y -= this.Top;
            return xOrPoint instanceof _Vector2.default ? new _Vector2.default(x, y) : [x, y];
        }
    }, {
        key: "toLocalNormalized",
        value: function toLocalNormalized(xOrPoint, y) {
            if (xOrPoint instanceof _Vector2.default) {
                var v = this.toLocal(xOrPoint);
                return new _Vector2.default(v.X / this.Width, v.Y / this.Height);
            } else {
                var _v = this.toLocal(xOrPoint, y);
                return [_v[0] / this.Width, _v[1] / this.Height];
            }
        }
    }, {
        key: "toAbsolute",
        value: function toAbsolute(xOrPoint, y) {
            if (xOrPoint instanceof _Vector2.default) {
                return new _Vector2.default(xOrPoint.X + this.Left, xOrPoint.Y + this.Top);
            } else {
                return [xOrPoint + this.Left, y + this.Top];
            }
        }
    }, {
        key: "toString",
        value: function toString() {
            return "Rectangle(" + this.Left + "," + this.Top + "-" + this.Right + "," + this.Bottom + ")";
        }
    }, {
        key: "Left",
        get: function get() {
            return this._left;
        }
    }, {
        key: "Right",
        get: function get() {
            return this.Left + this.Width;
        }
    }, {
        key: "Top",
        get: function get() {
            return this._top;
        }
    }, {
        key: "Bottom",
        get: function get() {
            return this._top + this._height;
        }
    }, {
        key: "Width",
        get: function get() {
            return this._width;
        }
    }, {
        key: "Height",
        get: function get() {
            return this._height;
        }
    }]);

    return Rectangle;
}();

exports.default = Rectangle;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _grimoirejs = __webpack_require__(20);

var _grimoirejs2 = _interopRequireDefault(_grimoirejs);

var _Vector2Converter = __webpack_require__(15);

var _Vector2Converter2 = _interopRequireDefault(_Vector2Converter);

var _Vector3Converter = __webpack_require__(16);

var _Vector3Converter2 = _interopRequireDefault(_Vector3Converter);

var _Vector4Converter = __webpack_require__(17);

var _Vector4Converter2 = _interopRequireDefault(_Vector4Converter);

var _Rotation3Converter = __webpack_require__(14);

var _Rotation3Converter2 = _interopRequireDefault(_Rotation3Converter);

var _Angle2DConverter = __webpack_require__(11);

var _Angle2DConverter2 = _interopRequireDefault(_Angle2DConverter);

var _Color3Converter = __webpack_require__(12);

var _Color3Converter2 = _interopRequireDefault(_Color3Converter);

var _Color4Converter = __webpack_require__(13);

var _Color4Converter2 = _interopRequireDefault(_Color4Converter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

exports.default = function () {
    _grimoirejs2.default.registerConverter("Vector2", _Vector2Converter2.default);
    _grimoirejs2.default.registerConverter("Vector3", _Vector3Converter2.default);
    _grimoirejs2.default.registerConverter("Vector4", _Vector4Converter2.default);
    _grimoirejs2.default.registerConverter("Color3", _Color3Converter2.default);
    _grimoirejs2.default.registerConverter("Color4", _Color4Converter2.default);
    _grimoirejs2.default.registerConverter("Rotation3", _Rotation3Converter2.default);
    _grimoirejs2.default.registerConverter("Angle2D", _Angle2DConverter2.default);
    _grimoirejs2.default.register(function () {
        return __awaiter(undefined, void 0, void 0, regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));
    });
};

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _grimoirejs = __webpack_require__(20);

var _grimoirejs2 = _interopRequireDefault(_grimoirejs);

var _AABB = __webpack_require__(24);

var _AABB2 = _interopRequireDefault(_AABB);

var _Color = __webpack_require__(6);

var _Color2 = _interopRequireDefault(_Color);

var _Color3 = __webpack_require__(5);

var _Color4 = _interopRequireDefault(_Color3);

var _Colors = __webpack_require__(7);

var _Colors2 = _interopRequireDefault(_Colors);

var _Angle2DConverter = __webpack_require__(11);

var _Angle2DConverter2 = _interopRequireDefault(_Angle2DConverter);

var _Color3Converter = __webpack_require__(12);

var _Color3Converter2 = _interopRequireDefault(_Color3Converter);

var _Color4Converter = __webpack_require__(13);

var _Color4Converter2 = _interopRequireDefault(_Color4Converter);

var _Rotation3Converter = __webpack_require__(14);

var _Rotation3Converter2 = _interopRequireDefault(_Rotation3Converter);

var _Vector2Converter = __webpack_require__(15);

var _Vector2Converter2 = _interopRequireDefault(_Vector2Converter);

var _Vector3Converter = __webpack_require__(16);

var _Vector3Converter2 = _interopRequireDefault(_Vector3Converter);

var _Vector4Converter = __webpack_require__(17);

var _Vector4Converter2 = _interopRequireDefault(_Vector4Converter);

var _GLM = __webpack_require__(25);

var _GLM2 = _interopRequireDefault(_GLM);

var _Matrix = __webpack_require__(18);

var _Matrix2 = _interopRequireDefault(_Matrix);

var _MatrixBase = __webpack_require__(19);

var _MatrixBase2 = _interopRequireDefault(_MatrixBase);

var _Quaternion = __webpack_require__(8);

var _Quaternion2 = _interopRequireDefault(_Quaternion);

var _Rectangle = __webpack_require__(26);

var _Rectangle2 = _interopRequireDefault(_Rectangle);

var _Angle2DParser = __webpack_require__(9);

var _Angle2DParser2 = _interopRequireDefault(_Angle2DParser);

var _Vector = __webpack_require__(10);

var _Vector2 = _interopRequireDefault(_Vector);

var _Vector3 = __webpack_require__(1);

var _Vector4 = _interopRequireDefault(_Vector3);

var _Vector5 = __webpack_require__(4);

var _Vector6 = _interopRequireDefault(_Vector5);

var _VectorBase = __webpack_require__(2);

var _VectorBase2 = _interopRequireDefault(_VectorBase);

var _main = __webpack_require__(27);

var _main2 = _interopRequireDefault(_main);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __VERSION__ = "1.13.1";
var __NAME__ = "grimoirejs-math";

var __EXPOSE__ = {
    "AABB": _AABB2.default,
    "Color3": _Color2.default,
    "Color4": _Color4.default,
    "Colors": _Colors2.default,
    "Converters": {
        "Angle2DConverter": _Angle2DConverter2.default,
        "Color3Converter": _Color3Converter2.default,
        "Color4Converter": _Color4Converter2.default,
        "Rotation3Converter": _Rotation3Converter2.default,
        "Vector2Converter": _Vector2Converter2.default,
        "Vector3Converter": _Vector3Converter2.default,
        "Vector4Converter": _Vector4Converter2.default
    },
    "GLM": _GLM2.default,
    "Matrix": _Matrix2.default,
    "MatrixBase": _MatrixBase2.default,
    "Quaternion": _Quaternion2.default,
    "Rectangle": _Rectangle2.default,
    "Util": {
        "Angle2DParser": _Angle2DParser2.default
    },
    "Vector2": _Vector2.default,
    "Vector3": _Vector4.default,
    "Vector4": _Vector6.default,
    "VectorBase": _VectorBase2.default
};
_grimoirejs2.default.notifyRegisteringPlugin(__NAME__);
var __BASE__ = (0, _main2.default)();
Object.assign(__EXPOSE__, {
    __VERSION__: __VERSION__,
    __NAME__: __NAME__
});
Object.assign(__BASE__ || {}, __EXPOSE__);
window["GrimoireJS"].lib.math = __EXPOSE__;
exports.default = __BASE__;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = __webpack_require__(0);

/**
 * @class 2x2 Matrix
 * @name mat2
 */
var mat2 = {};

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */
mat2.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {mat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */
mat2.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */
mat2.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Create a new mat2 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out A new 2x2 matrix
 */
mat2.fromValues = function(m00, m01, m10, m11) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = m00;
    out[1] = m01;
    out[2] = m10;
    out[3] = m11;
    return out;
};

/**
 * Set the components of a mat2 to the given values
 *
 * @param {mat2} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out
 */
mat2.set = function(out, m00, m01, m10, m11) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m10;
    out[3] = m11;
    return out;
};


/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a1 = a[1];
        out[1] = a[2];
        out[2] = a1;
    } else {
        out[0] = a[0];
        out[1] = a[2];
        out[2] = a[1];
        out[3] = a[3];
    }
    
    return out;
};

/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],

        // Calculate the determinant
        det = a0 * a3 - a2 * a1;

    if (!det) {
        return null;
    }
    det = 1.0 / det;
    
    out[0] =  a3 * det;
    out[1] = -a1 * det;
    out[2] = -a2 * det;
    out[3] =  a0 * det;

    return out;
};

/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.adjoint = function(out, a) {
    // Caching this value is nessecary if out == a
    var a0 = a[0];
    out[0] =  a[3];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] =  a0;

    return out;
};

/**
 * Calculates the determinant of a mat2
 *
 * @param {mat2} a the source matrix
 * @returns {Number} determinant of a
 */
mat2.determinant = function (a) {
    return a[0] * a[3] - a[2] * a[1];
};

/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
mat2.multiply = function (out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    return out;
};

/**
 * Alias for {@link mat2.multiply}
 * @function
 */
mat2.mul = mat2.multiply;

/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
mat2.rotate = function (out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = a0 *  c + a2 * s;
    out[1] = a1 *  c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    return out;
};

/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/
mat2.scale = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    return out;
};

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.rotate(dest, dest, rad);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
mat2.fromRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.scale(dest, dest, vec);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2} out
 */
mat2.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v[1];
    return out;
}

/**
 * Returns a string representation of a mat2
 *
 * @param {mat2} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat2.str = function (a) {
    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

/**
 * Returns Frobenius norm of a mat2
 *
 * @param {mat2} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat2.frob = function (a) {
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))
};

/**
 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
 * @param {mat2} L the lower triangular matrix 
 * @param {mat2} D the diagonal matrix 
 * @param {mat2} U the upper triangular matrix 
 * @param {mat2} a the input matrix to factorize
 */

mat2.LDU = function (L, D, U, a) { 
    L[2] = a[2]/a[0]; 
    U[0] = a[0]; 
    U[1] = a[1]; 
    U[3] = a[3] - L[2] * U[1]; 
    return [L, D, U];       
}; 

/**
 * Adds two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
mat2.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
};

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
mat2.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
};

/**
 * Alias for {@link mat2.subtract}
 * @function
 */
mat2.sub = mat2.subtract;

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat2.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
};

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat2.equals = function (a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));
};

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2} out
 */
mat2.multiplyScalar = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
};

/**
 * Adds two mat2's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2} out the receiving vector
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2} out
 */
mat2.multiplyScalarAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    return out;
};

module.exports = mat2;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = __webpack_require__(0);

/**
 * @class 2x3 Matrix
 * @name mat2d
 * 
 * @description 
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, c, tx,
 *  b, d, ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, c, tx,
 *  b, d, ty,
 *  0, 0, 1]
 * </pre>
 * The last row is ignored so the array is shorter and operations are faster.
 */
var mat2d = {};

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */
mat2d.create = function() {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
};

/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {mat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */
mat2d.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
};

/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
mat2d.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
};

/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */
mat2d.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
};

/**
 * Create a new mat2d with the given values
 *
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} A new mat2d
 */
mat2d.fromValues = function(a, b, c, d, tx, ty) {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = a;
    out[1] = b;
    out[2] = c;
    out[3] = d;
    out[4] = tx;
    out[5] = ty;
    return out;
};

/**
 * Set the components of a mat2d to the given values
 *
 * @param {mat2d} out the receiving matrix
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} out
 */
mat2d.set = function(out, a, b, c, d, tx, ty) {
    out[0] = a;
    out[1] = b;
    out[2] = c;
    out[3] = d;
    out[4] = tx;
    out[5] = ty;
    return out;
};

/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
mat2d.invert = function(out, a) {
    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],
        atx = a[4], aty = a[5];

    var det = aa * ad - ab * ac;
    if(!det){
        return null;
    }
    det = 1.0 / det;

    out[0] = ad * det;
    out[1] = -ab * det;
    out[2] = -ac * det;
    out[3] = aa * det;
    out[4] = (ac * aty - ad * atx) * det;
    out[5] = (ab * atx - aa * aty) * det;
    return out;
};

/**
 * Calculates the determinant of a mat2d
 *
 * @param {mat2d} a the source matrix
 * @returns {Number} determinant of a
 */
mat2d.determinant = function (a) {
    return a[0] * a[3] - a[1] * a[2];
};

/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
mat2d.multiply = function (out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    out[4] = a0 * b4 + a2 * b5 + a4;
    out[5] = a1 * b4 + a3 * b5 + a5;
    return out;
};

/**
 * Alias for {@link mat2d.multiply}
 * @function
 */
mat2d.mul = mat2d.multiply;

/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
mat2d.rotate = function (out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = a0 *  c + a2 * s;
    out[1] = a1 *  c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    out[4] = a4;
    out[5] = a5;
    return out;
};

/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/
mat2d.scale = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    out[4] = a4;
    out[5] = a5;
    return out;
};

/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/
mat2d.translate = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        v0 = v[0], v1 = v[1];
    out[0] = a0;
    out[1] = a1;
    out[2] = a2;
    out[3] = a3;
    out[4] = a0 * v0 + a2 * v1 + a4;
    out[5] = a1 * v0 + a3 * v1 + a5;
    return out;
};

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.rotate(dest, dest, rad);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
mat2d.fromRotation = function(out, rad) {
    var s = Math.sin(rad), c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    out[4] = 0;
    out[5] = 0;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.scale(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2d} out
 */
mat2d.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v[1];
    out[4] = 0;
    out[5] = 0;
    return out;
}

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.translate(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat2d} out
 */
mat2d.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = v[0];
    out[5] = v[1];
    return out;
}

/**
 * Returns a string representation of a mat2d
 *
 * @param {mat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat2d.str = function (a) {
    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';
};

/**
 * Returns Frobenius norm of a mat2d
 *
 * @param {mat2d} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat2d.frob = function (a) { 
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))
}; 

/**
 * Adds two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
mat2d.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    return out;
};

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
mat2d.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    return out;
};

/**
 * Alias for {@link mat2d.subtract}
 * @function
 */
mat2d.sub = mat2d.subtract;

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2d} out
 */
mat2d.multiplyScalar = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    return out;
};

/**
 * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2d} out the receiving vector
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2d} out
 */
mat2d.multiplyScalarAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    out[4] = a[4] + (b[4] * scale);
    out[5] = a[5] + (b[5] * scale);
    return out;
};

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat2d.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
};

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat2d.equals = function (a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));
};

module.exports = mat2d;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = __webpack_require__(0);

/**
 * @class 4x4 Matrix
 * @name mat4
 */
var mat4 = {
  scalar: {},
  SIMD: {}
};

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
mat4.create = function() {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
mat4.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */
mat4.fromValues = function(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
};

/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */
mat4.set = function(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
};


/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
mat4.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/**
 * Transpose the values of a mat4 not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.scalar.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3],
            a12 = a[6], a13 = a[7],
            a23 = a[11];

        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }

    return out;
};

/**
 * Transpose the values of a mat4 using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.SIMD.transpose = function(out, a) {
    var a0, a1, a2, a3,
        tmp01, tmp23,
        out0, out1, out2, out3;

    a0 = SIMD.Float32x4.load(a, 0);
    a1 = SIMD.Float32x4.load(a, 4);
    a2 = SIMD.Float32x4.load(a, 8);
    a3 = SIMD.Float32x4.load(a, 12);

    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);
    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);
    out0  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);
    out1  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);
    SIMD.Float32x4.store(out, 0,  out0);
    SIMD.Float32x4.store(out, 4,  out1);

    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);
    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);
    out2  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);
    out3  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);
    SIMD.Float32x4.store(out, 8,  out2);
    SIMD.Float32x4.store(out, 12, out3);

    return out;
};

/**
 * Transpse a mat4 using SIMD if available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.transpose = glMatrix.USE_SIMD ? mat4.SIMD.transpose : mat4.scalar.transpose;

/**
 * Inverts a mat4 not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.scalar.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) {
        return null;
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

    return out;
};

/**
 * Inverts a mat4 using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.SIMD.invert = function(out, a) {
  var row0, row1, row2, row3,
      tmp1,
      minor0, minor1, minor2, minor3,
      det,
      a0 = SIMD.Float32x4.load(a, 0),
      a1 = SIMD.Float32x4.load(a, 4),
      a2 = SIMD.Float32x4.load(a, 8),
      a3 = SIMD.Float32x4.load(a, 12);

  // Compute matrix adjugate
  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);
  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);
  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);
  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);
  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);
  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);
  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);
  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);

  tmp1   = SIMD.Float32x4.mul(row2, row3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor0 = SIMD.Float32x4.mul(row1, tmp1);
  minor1 = SIMD.Float32x4.mul(row0, tmp1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);
  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);
  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);

  tmp1   = SIMD.Float32x4.mul(row1, row2);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);
  minor3 = SIMD.Float32x4.mul(row0, tmp1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));
  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);
  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);

  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);
  minor2 = SIMD.Float32x4.mul(row0, tmp1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));
  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);
  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);

  tmp1   = SIMD.Float32x4.mul(row0, row1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);
  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);
  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));

  tmp1   = SIMD.Float32x4.mul(row0, row3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));
  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);
  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));

  tmp1   = SIMD.Float32x4.mul(row0, row2);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);
  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));
  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);

  // Compute matrix determinant
  det   = SIMD.Float32x4.mul(row0, minor0);
  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 2, 3, 0, 1), det);
  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 1, 0, 3, 2), det);
  tmp1  = SIMD.Float32x4.reciprocalApproximation(det);
  det   = SIMD.Float32x4.sub(
               SIMD.Float32x4.add(tmp1, tmp1),
               SIMD.Float32x4.mul(det, SIMD.Float32x4.mul(tmp1, tmp1)));
  det   = SIMD.Float32x4.swizzle(det, 0, 0, 0, 0);
  if (!det) {
      return null;
  }

  // Compute matrix inverse
  SIMD.Float32x4.store(out, 0,  SIMD.Float32x4.mul(det, minor0));
  SIMD.Float32x4.store(out, 4,  SIMD.Float32x4.mul(det, minor1));
  SIMD.Float32x4.store(out, 8,  SIMD.Float32x4.mul(det, minor2));
  SIMD.Float32x4.store(out, 12, SIMD.Float32x4.mul(det, minor3));
  return out;
}

/**
 * Inverts a mat4 using SIMD if available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.invert = glMatrix.USE_SIMD ? mat4.SIMD.invert : mat4.scalar.invert;

/**
 * Calculates the adjugate of a mat4 not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.scalar.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
    return out;
};

/**
 * Calculates the adjugate of a mat4 using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.SIMD.adjoint = function(out, a) {
  var a0, a1, a2, a3;
  var row0, row1, row2, row3;
  var tmp1;
  var minor0, minor1, minor2, minor3;

  a0 = SIMD.Float32x4.load(a, 0);
  a1 = SIMD.Float32x4.load(a, 4);
  a2 = SIMD.Float32x4.load(a, 8);
  a3 = SIMD.Float32x4.load(a, 12);

  // Transpose the source matrix.  Sort of.  Not a true transpose operation
  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);
  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);
  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);
  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);

  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);
  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);
  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);
  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);

  tmp1   = SIMD.Float32x4.mul(row2, row3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor0 = SIMD.Float32x4.mul(row1, tmp1);
  minor1 = SIMD.Float32x4.mul(row0, tmp1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);
  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);
  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);

  tmp1   = SIMD.Float32x4.mul(row1, row2);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);
  minor3 = SIMD.Float32x4.mul(row0, tmp1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));
  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);
  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);

  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);
  minor2 = SIMD.Float32x4.mul(row0, tmp1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));
  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);
  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);

  tmp1   = SIMD.Float32x4.mul(row0, row1);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);
  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);
  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));

  tmp1   = SIMD.Float32x4.mul(row0, row3);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));
  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);
  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));

  tmp1   = SIMD.Float32x4.mul(row0, row2);
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);
  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));
  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));
  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);

  SIMD.Float32x4.store(out, 0,  minor0);
  SIMD.Float32x4.store(out, 4,  minor1);
  SIMD.Float32x4.store(out, 8,  minor2);
  SIMD.Float32x4.store(out, 12, minor3);
  return out;
};

/**
 * Calculates the adjugate of a mat4 using SIMD if available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
 mat4.adjoint = glMatrix.USE_SIMD ? mat4.SIMD.adjoint : mat4.scalar.adjoint;

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
mat4.determinant = function (a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32;

    // Calculate the determinant
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};

/**
 * Multiplies two mat4's explicitly using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand, must be a Float32Array
 * @param {mat4} b the second operand, must be a Float32Array
 * @returns {mat4} out
 */
mat4.SIMD.multiply = function (out, a, b) {
    var a0 = SIMD.Float32x4.load(a, 0);
    var a1 = SIMD.Float32x4.load(a, 4);
    var a2 = SIMD.Float32x4.load(a, 8);
    var a3 = SIMD.Float32x4.load(a, 12);

    var b0 = SIMD.Float32x4.load(b, 0);
    var out0 = SIMD.Float32x4.add(
                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 0, 0, 0, 0), a0),
                   SIMD.Float32x4.add(
                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 1, 1, 1, 1), a1),
                       SIMD.Float32x4.add(
                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 2, 2, 2, 2), a2),
                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 3, 3, 3, 3), a3))));
    SIMD.Float32x4.store(out, 0, out0);

    var b1 = SIMD.Float32x4.load(b, 4);
    var out1 = SIMD.Float32x4.add(
                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 0, 0, 0, 0), a0),
                   SIMD.Float32x4.add(
                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 1, 1, 1, 1), a1),
                       SIMD.Float32x4.add(
                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 2, 2, 2, 2), a2),
                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 3, 3, 3, 3), a3))));
    SIMD.Float32x4.store(out, 4, out1);

    var b2 = SIMD.Float32x4.load(b, 8);
    var out2 = SIMD.Float32x4.add(
                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 0, 0, 0, 0), a0),
                   SIMD.Float32x4.add(
                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 1, 1, 1, 1), a1),
                       SIMD.Float32x4.add(
                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 2, 2, 2, 2), a2),
                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 3, 3, 3, 3), a3))));
    SIMD.Float32x4.store(out, 8, out2);

    var b3 = SIMD.Float32x4.load(b, 12);
    var out3 = SIMD.Float32x4.add(
                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 0, 0, 0, 0), a0),
                   SIMD.Float32x4.add(
                        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 1, 1, 1, 1), a1),
                        SIMD.Float32x4.add(
                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 2, 2, 2, 2), a2),
                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 3, 3, 3, 3), a3))));
    SIMD.Float32x4.store(out, 12, out3);

    return out;
};

/**
 * Multiplies two mat4's explicitly not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
mat4.scalar.multiply = function (out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    // Cache only the current line of the second matrix
    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
    return out;
};

/**
 * Multiplies two mat4's using SIMD if available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
mat4.multiply = glMatrix.USE_SIMD ? mat4.SIMD.multiply : mat4.scalar.multiply;

/**
 * Alias for {@link mat4.multiply}
 * @function
 */
mat4.mul = mat4.multiply;

/**
 * Translate a mat4 by the given vector not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
mat4.scalar.translate = function (out, a, v) {
    var x = v[0], y = v[1], z = v[2],
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23;

    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }

    return out;
};

/**
 * Translates a mat4 by the given vector using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
mat4.SIMD.translate = function (out, a, v) {
    var a0 = SIMD.Float32x4.load(a, 0),
        a1 = SIMD.Float32x4.load(a, 4),
        a2 = SIMD.Float32x4.load(a, 8),
        a3 = SIMD.Float32x4.load(a, 12),
        vec = SIMD.Float32x4(v[0], v[1], v[2] , 0);

    if (a !== out) {
        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];
        out[4] = a[4]; out[5] = a[5]; out[6] = a[6]; out[7] = a[7];
        out[8] = a[8]; out[9] = a[9]; out[10] = a[10]; out[11] = a[11];
    }

    a0 = SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0));
    a1 = SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1));
    a2 = SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2));

    var t0 = SIMD.Float32x4.add(a0, SIMD.Float32x4.add(a1, SIMD.Float32x4.add(a2, a3)));
    SIMD.Float32x4.store(out, 12, t0);

    return out;
};

/**
 * Translates a mat4 by the given vector using SIMD if available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
mat4.translate = glMatrix.USE_SIMD ? mat4.SIMD.translate : mat4.scalar.translate;

/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
mat4.scalar.scale = function(out, a, v) {
    var x = v[0], y = v[1], z = v[2];

    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Scales the mat4 by the dimensions in the given vec3 using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
mat4.SIMD.scale = function(out, a, v) {
    var a0, a1, a2;
    var vec = SIMD.Float32x4(v[0], v[1], v[2], 0);

    a0 = SIMD.Float32x4.load(a, 0);
    SIMD.Float32x4.store(
        out, 0, SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0)));

    a1 = SIMD.Float32x4.load(a, 4);
    SIMD.Float32x4.store(
        out, 4, SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1)));

    a2 = SIMD.Float32x4.load(a, 8);
    SIMD.Float32x4.store(
        out, 8, SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2)));

    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Scales the mat4 by the dimensions in the given vec3 using SIMD if available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 */
mat4.scale = glMatrix.USE_SIMD ? mat4.SIMD.scale : mat4.scalar.scale;

/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
mat4.rotate = function (out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t,
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23,
        b00, b01, b02,
        b10, b11, b12,
        b20, b21, b22;

    if (Math.abs(len) < glMatrix.EPSILON) { return null; }

    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;

    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;

    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

    // Construct the elements of the rotation matrix
    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

    // Perform rotation-specific matrix multiplication
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    return out;
};

/**
 * Rotates a matrix by the given angle around the X axis not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.scalar.rotateX = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[0]  = a[0];
        out[1]  = a[1];
        out[2]  = a[2];
        out[3]  = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
};

/**
 * Rotates a matrix by the given angle around the X axis using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.SIMD.rotateX = function (out, a, rad) {
    var s = SIMD.Float32x4.splat(Math.sin(rad)),
        c = SIMD.Float32x4.splat(Math.cos(rad));

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
      out[0]  = a[0];
      out[1]  = a[1];
      out[2]  = a[2];
      out[3]  = a[3];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    var a_1 = SIMD.Float32x4.load(a, 4);
    var a_2 = SIMD.Float32x4.load(a, 8);
    SIMD.Float32x4.store(out, 4,
                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_2, s)));
    SIMD.Float32x4.store(out, 8,
                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_2, c), SIMD.Float32x4.mul(a_1, s)));
    return out;
};

/**
 * Rotates a matrix by the given angle around the X axis using SIMD if availabe and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateX = glMatrix.USE_SIMD ? mat4.SIMD.rotateX : mat4.scalar.rotateX;

/**
 * Rotates a matrix by the given angle around the Y axis not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.scalar.rotateY = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[4]  = a[4];
        out[5]  = a[5];
        out[6]  = a[6];
        out[7]  = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
};

/**
 * Rotates a matrix by the given angle around the Y axis using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.SIMD.rotateY = function (out, a, rad) {
    var s = SIMD.Float32x4.splat(Math.sin(rad)),
        c = SIMD.Float32x4.splat(Math.cos(rad));

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[4]  = a[4];
        out[5]  = a[5];
        out[6]  = a[6];
        out[7]  = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    var a_0 = SIMD.Float32x4.load(a, 0);
    var a_2 = SIMD.Float32x4.load(a, 8);
    SIMD.Float32x4.store(out, 0,
                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_2, s)));
    SIMD.Float32x4.store(out, 8,
                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, s), SIMD.Float32x4.mul(a_2, c)));
    return out;
};

/**
 * Rotates a matrix by the given angle around the Y axis if SIMD available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
 mat4.rotateY = glMatrix.USE_SIMD ? mat4.SIMD.rotateY : mat4.scalar.rotateY;

/**
 * Rotates a matrix by the given angle around the Z axis not using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.scalar.rotateZ = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[8]  = a[8];
        out[9]  = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
};

/**
 * Rotates a matrix by the given angle around the Z axis using SIMD
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.SIMD.rotateZ = function (out, a, rad) {
    var s = SIMD.Float32x4.splat(Math.sin(rad)),
        c = SIMD.Float32x4.splat(Math.cos(rad));

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[8]  = a[8];
        out[9]  = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    var a_0 = SIMD.Float32x4.load(a, 0);
    var a_1 = SIMD.Float32x4.load(a, 4);
    SIMD.Float32x4.store(out, 0,
                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_1, s)));
    SIMD.Float32x4.store(out, 4,
                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_0, s)));
    return out;
};

/**
 * Rotates a matrix by the given angle around the Z axis if SIMD available and enabled
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
 mat4.rotateZ = glMatrix.USE_SIMD ? mat4.SIMD.rotateZ : mat4.scalar.rotateZ;

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
mat4.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Scaling vector
 * @returns {mat4} out
 */
mat4.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = v[1];
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = v[2];
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
mat4.fromRotation = function(out, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t;

    if (Math.abs(len) < glMatrix.EPSILON) { return null; }

    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;

    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;

    // Perform rotation-specific matrix multiplication
    out[0] = x * x * t + c;
    out[1] = y * x * t + z * s;
    out[2] = z * x * t - y * s;
    out[3] = 0;
    out[4] = x * y * t - z * s;
    out[5] = y * y * t + c;
    out[6] = z * y * t + x * s;
    out[7] = 0;
    out[8] = x * z * t + y * s;
    out[9] = y * z * t - x * s;
    out[10] = z * z * t + c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.fromXRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);

    // Perform axis-specific matrix multiplication
    out[0]  = 1;
    out[1]  = 0;
    out[2]  = 0;
    out[3]  = 0;
    out[4] = 0;
    out[5] = c;
    out[6] = s;
    out[7] = 0;
    out[8] = 0;
    out[9] = -s;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.fromYRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);

    // Perform axis-specific matrix multiplication
    out[0]  = c;
    out[1]  = 0;
    out[2]  = -s;
    out[3]  = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = s;
    out[9] = 0;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.fromZRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);

    // Perform axis-specific matrix multiplication
    out[0]  = c;
    out[1]  = s;
    out[2]  = 0;
    out[3]  = 0;
    out[4] = -s;
    out[5] = c;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
mat4.fromRotationTranslation = function (out, q, v) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;

    return out;
};

/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */
mat4.getTranslation = function (out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];

  return out;
};

/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be 
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */
mat4.getScaling = function (out, mat) {
  var m11 = mat[0],
      m12 = mat[1],
      m13 = mat[2],
      m21 = mat[4],
      m22 = mat[5],
      m23 = mat[6],
      m31 = mat[8],
      m32 = mat[9],
      m33 = mat[10];

  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);

  return out;
};

/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {mat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */
mat4.getRotation = function (out, mat) {
  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
  var trace = mat[0] + mat[5] + mat[10];
  var S = 0;

  if (trace > 0) { 
    S = Math.sqrt(trace + 1.0) * 2;
    out[3] = 0.25 * S;
    out[0] = (mat[6] - mat[9]) / S;
    out[1] = (mat[8] - mat[2]) / S; 
    out[2] = (mat[1] - mat[4]) / S; 
  } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) { 
    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;
    out[3] = (mat[6] - mat[9]) / S;
    out[0] = 0.25 * S;
    out[1] = (mat[1] + mat[4]) / S; 
    out[2] = (mat[8] + mat[2]) / S; 
  } else if (mat[5] > mat[10]) { 
    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;
    out[3] = (mat[8] - mat[2]) / S;
    out[0] = (mat[1] + mat[4]) / S; 
    out[1] = 0.25 * S;
    out[2] = (mat[6] + mat[9]) / S; 
  } else { 
    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;
    out[3] = (mat[1] - mat[4]) / S;
    out[0] = (mat[8] + mat[2]) / S;
    out[1] = (mat[6] + mat[9]) / S;
    out[2] = 0.25 * S;
  }

  return out;
};

/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @returns {mat4} out
 */
mat4.fromRotationTranslationScale = function (out, q, v, s) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2,
        sx = s[0],
        sy = s[1],
        sz = s[2];

    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;

    return out;
};

/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @param {vec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */
mat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {
  // Quaternion math
  var x = q[0], y = q[1], z = q[2], w = q[3],
      x2 = x + x,
      y2 = y + y,
      z2 = z + z,

      xx = x * x2,
      xy = x * y2,
      xz = x * z2,
      yy = y * y2,
      yz = y * z2,
      zz = z * z2,
      wx = w * x2,
      wy = w * y2,
      wz = w * z2,

      sx = s[0],
      sy = s[1],
      sz = s[2],

      ox = o[0],
      oy = o[1],
      oz = o[2];

  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);
  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);
  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);
  out[15] = 1;

  return out;
};

/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */
mat4.fromQuat = function (out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;

    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;

    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;

    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;

    return out;
};

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.frustum = function (out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left),
        tb = 1 / (top - bottom),
        nf = 1 / (near - far);
    out[0] = (near * 2) * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = (near * 2) * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (far * near * 2) * nf;
    out[15] = 0;
    return out;
};

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.perspective = function (out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2),
        nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (2 * far * near) * nf;
    out[15] = 0;
    return out;
};

/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.perspectiveFromFieldOfView = function (out, fov, near, far) {
    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),
        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),
        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),
        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),
        xScale = 2.0 / (leftTan + rightTan),
        yScale = 2.0 / (upTan + downTan);

    out[0] = xScale;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    out[4] = 0.0;
    out[5] = yScale;
    out[6] = 0.0;
    out[7] = 0.0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = ((upTan - downTan) * yScale * 0.5);
    out[10] = far / (near - far);
    out[11] = -1.0;
    out[12] = 0.0;
    out[13] = 0.0;
    out[14] = (far * near) / (near - far);
    out[15] = 0.0;
    return out;
}

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.ortho = function (out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right),
        bt = 1 / (bottom - top),
        nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
};

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
mat4.lookAt = function (out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
        eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2],
        centerx = center[0],
        centery = center[1],
        centerz = center[2];

    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&
        Math.abs(eyey - centery) < glMatrix.EPSILON &&
        Math.abs(eyez - centerz) < glMatrix.EPSILON) {
        return mat4.identity(out);
    }

    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;

    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;

    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }

    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;

    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }

    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;

    return out;
};

/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat4.str = function (a) {
    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +
                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
};

/**
 * Returns Frobenius norm of a mat4
 *
 * @param {mat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat4.frob = function (a) {
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))
};

/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
mat4.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    out[8] = a[8] + b[8];
    out[9] = a[9] + b[9];
    out[10] = a[10] + b[10];
    out[11] = a[11] + b[11];
    out[12] = a[12] + b[12];
    out[13] = a[13] + b[13];
    out[14] = a[14] + b[14];
    out[15] = a[15] + b[15];
    return out;
};

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
mat4.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    out[6] = a[6] - b[6];
    out[7] = a[7] - b[7];
    out[8] = a[8] - b[8];
    out[9] = a[9] - b[9];
    out[10] = a[10] - b[10];
    out[11] = a[11] - b[11];
    out[12] = a[12] - b[12];
    out[13] = a[13] - b[13];
    out[14] = a[14] - b[14];
    out[15] = a[15] - b[15];
    return out;
};

/**
 * Alias for {@link mat4.subtract}
 * @function
 */
mat4.sub = mat4.subtract;

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */
mat4.multiplyScalar = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    out[8] = a[8] * b;
    out[9] = a[9] * b;
    out[10] = a[10] * b;
    out[11] = a[11] * b;
    out[12] = a[12] * b;
    out[13] = a[13] * b;
    out[14] = a[14] * b;
    out[15] = a[15] * b;
    return out;
};

/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */
mat4.multiplyScalarAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    out[4] = a[4] + (b[4] * scale);
    out[5] = a[5] + (b[5] * scale);
    out[6] = a[6] + (b[6] * scale);
    out[7] = a[7] + (b[7] * scale);
    out[8] = a[8] + (b[8] * scale);
    out[9] = a[9] + (b[9] * scale);
    out[10] = a[10] + (b[10] * scale);
    out[11] = a[11] + (b[11] * scale);
    out[12] = a[12] + (b[12] * scale);
    out[13] = a[13] + (b[13] * scale);
    out[14] = a[14] + (b[14] * scale);
    out[15] = a[15] + (b[15] * scale);
    return out;
};

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat4.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && 
           a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && 
           a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&
           a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
};

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
mat4.equals = function (a, b) {
    var a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3],
        a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7], 
        a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11], 
        a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];

    var b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3],
        b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7], 
        b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11], 
        b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];

    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&
            Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&
            Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&
            Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&
            Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&
            Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&
            Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&
            Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));
};



module.exports = mat4;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = __webpack_require__(0);
var mat3 = __webpack_require__(21);
var vec3 = __webpack_require__(22);
var vec4 = __webpack_require__(23);

/**
 * @class Quaternion
 * @name quat
 */
var quat = {};

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */
quat.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {vec3} a the initial vector
 * @param {vec3} b the destination vector
 * @returns {quat} out
 */
quat.rotationTo = (function() {
    var tmpvec3 = vec3.create();
    var xUnitVec3 = vec3.fromValues(1,0,0);
    var yUnitVec3 = vec3.fromValues(0,1,0);

    return function(out, a, b) {
        var dot = vec3.dot(a, b);
        if (dot < -0.999999) {
            vec3.cross(tmpvec3, xUnitVec3, a);
            if (vec3.length(tmpvec3) < 0.000001)
                vec3.cross(tmpvec3, yUnitVec3, a);
            vec3.normalize(tmpvec3, tmpvec3);
            quat.setAxisAngle(out, tmpvec3, Math.PI);
            return out;
        } else if (dot > 0.999999) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            return out;
        } else {
            vec3.cross(tmpvec3, a, b);
            out[0] = tmpvec3[0];
            out[1] = tmpvec3[1];
            out[2] = tmpvec3[2];
            out[3] = 1 + dot;
            return quat.normalize(out, out);
        }
    };
})();

/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {vec3} view  the vector representing the viewing direction
 * @param {vec3} right the vector representing the local "right" direction
 * @param {vec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */
quat.setAxes = (function() {
    var matr = mat3.create();

    return function(out, view, right, up) {
        matr[0] = right[0];
        matr[3] = right[1];
        matr[6] = right[2];

        matr[1] = up[0];
        matr[4] = up[1];
        matr[7] = up[2];

        matr[2] = -view[0];
        matr[5] = -view[1];
        matr[8] = -view[2];

        return quat.normalize(out, quat.fromMat3(out, matr));
    };
})();

/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */
quat.clone = vec4.clone;

/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */
quat.fromValues = vec4.fromValues;

/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the source quaternion
 * @returns {quat} out
 * @function
 */
quat.copy = vec4.copy;

/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */
quat.set = vec4.set;

/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */
quat.identity = function(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/
quat.setAxisAngle = function(out, axis, rad) {
    rad = rad * 0.5;
    var s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
};

/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {quat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */
quat.getAxisAngle = function(out_axis, q) {
    var rad = Math.acos(q[3]) * 2.0;
    var s = Math.sin(rad / 2.0);
    if (s != 0.0) {
        out_axis[0] = q[0] / s;
        out_axis[1] = q[1] / s;
        out_axis[2] = q[2] / s;
    } else {
        // If s is zero, return any axis (no rotation - axis does not matter)
        out_axis[0] = 1;
        out_axis[1] = 0;
        out_axis[2] = 0;
    }
    return rad;
};

/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */
quat.add = vec4.add;

/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */
quat.multiply = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = b[0], by = b[1], bz = b[2], bw = b[3];

    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
};

/**
 * Alias for {@link quat.multiply}
 * @function
 */
quat.mul = quat.multiply;

/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */
quat.scale = vec4.scale;

/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateX = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
};

/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateY = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        by = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
};

/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateZ = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bz = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
};

/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */
quat.calculateW = function (out, a) {
    var x = a[0], y = a[1], z = a[2];

    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
    return out;
};

/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */
quat.dot = vec4.dot;

/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 * @function
 */
quat.lerp = vec4.lerp;

/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 */
quat.slerp = function (out, a, b, t) {
    // benchmarks:
    //    http://jsperf.com/quaternion-slerp-implementations

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = b[0], by = b[1], bz = b[2], bw = b[3];

    var        omega, cosom, sinom, scale0, scale1;

    // calc cosine
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    // adjust signs (if necessary)
    if ( cosom < 0.0 ) {
        cosom = -cosom;
        bx = - bx;
        by = - by;
        bz = - bz;
        bw = - bw;
    }
    // calculate coefficients
    if ( (1.0 - cosom) > 0.000001 ) {
        // standard case (slerp)
        omega  = Math.acos(cosom);
        sinom  = Math.sin(omega);
        scale0 = Math.sin((1.0 - t) * omega) / sinom;
        scale1 = Math.sin(t * omega) / sinom;
    } else {        
        // "from" and "to" quaternions are very close 
        //  ... so we can do a linear interpolation
        scale0 = 1.0 - t;
        scale1 = t;
    }
    // calculate final values
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    
    return out;
};

/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {quat} c the third operand
 * @param {quat} d the fourth operand
 * @param {Number} t interpolation amount
 * @returns {quat} out
 */
quat.sqlerp = (function () {
  var temp1 = quat.create();
  var temp2 = quat.create();
  
  return function (out, a, b, c, d, t) {
    quat.slerp(temp1, a, d, t);
    quat.slerp(temp2, b, c, t);
    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));
    
    return out;
  };
}());

/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */
quat.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,
        invDot = dot ? 1.0/dot : 0;
    
    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

    out[0] = -a0*invDot;
    out[1] = -a1*invDot;
    out[2] = -a2*invDot;
    out[3] = a3*invDot;
    return out;
};

/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */
quat.conjugate = function (out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    return out;
};

/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 * @function
 */
quat.length = vec4.length;

/**
 * Alias for {@link quat.length}
 * @function
 */
quat.len = quat.length;

/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */
quat.squaredLength = vec4.squaredLength;

/**
 * Alias for {@link quat.squaredLength}
 * @function
 */
quat.sqrLen = quat.squaredLength;

/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */
quat.normalize = vec4.normalize;

/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */
quat.fromMat3 = function(out, m) {
    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
    // article "Quaternion Calculus and Fast Animation".
    var fTrace = m[0] + m[4] + m[8];
    var fRoot;

    if ( fTrace > 0.0 ) {
        // |w| > 1/2, may as well choose w > 1/2
        fRoot = Math.sqrt(fTrace + 1.0);  // 2w
        out[3] = 0.5 * fRoot;
        fRoot = 0.5/fRoot;  // 1/(4w)
        out[0] = (m[5]-m[7])*fRoot;
        out[1] = (m[6]-m[2])*fRoot;
        out[2] = (m[1]-m[3])*fRoot;
    } else {
        // |w| <= 1/2
        var i = 0;
        if ( m[4] > m[0] )
          i = 1;
        if ( m[8] > m[i*3+i] )
          i = 2;
        var j = (i+1)%3;
        var k = (i+2)%3;
        
        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);
        out[i] = 0.5 * fRoot;
        fRoot = 0.5 / fRoot;
        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;
        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;
        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;
    }
    
    return out;
};

/**
 * Returns a string representation of a quatenion
 *
 * @param {quat} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
quat.str = function (a) {
    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

/**
 * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {quat} a The first quaternion.
 * @param {quat} b The second quaternion.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
quat.exactEquals = vec4.exactEquals;

/**
 * Returns whether or not the quaternions have approximately the same elements in the same position.
 *
 * @param {quat} a The first vector.
 * @param {quat} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
quat.equals = vec4.equals;

module.exports = quat;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = __webpack_require__(0);

/**
 * @class 2 Dimensional Vector
 * @name vec2
 */
var vec2 = {};

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */
vec2.create = function() {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = 0;
    out[1] = 0;
    return out;
};

/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {vec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */
vec2.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */
vec2.fromValues = function(x, y) {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the source vector
 * @returns {vec2} out
 */
vec2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */
vec2.set = function(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
};

/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
};

/**
 * Alias for {@link vec2.subtract}
 * @function
 */
vec2.sub = vec2.subtract;

/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
};

/**
 * Alias for {@link vec2.multiply}
 * @function
 */
vec2.mul = vec2.multiply;

/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
};

/**
 * Alias for {@link vec2.divide}
 * @function
 */
vec2.div = vec2.divide;

/**
 * Math.ceil the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to ceil
 * @returns {vec2} out
 */
vec2.ceil = function (out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    return out;
};

/**
 * Math.floor the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to floor
 * @returns {vec2} out
 */
vec2.floor = function (out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    return out;
};

/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    return out;
};

/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    return out;
};

/**
 * Math.round the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to round
 * @returns {vec2} out
 */
vec2.round = function (out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    return out;
};

/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */
vec2.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
};

/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */
vec2.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    return out;
};

/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} distance between a and b
 */
vec2.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for {@link vec2.distance}
 * @function
 */
vec2.dist = vec2.distance;

/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec2.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return x*x + y*y;
};

/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */
vec2.sqrDist = vec2.squaredDistance;

/**
 * Calculates the length of a vec2
 *
 * @param {vec2} a vector to calculate length of
 * @returns {Number} length of a
 */
vec2.length = function (a) {
    var x = a[0],
        y = a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for {@link vec2.length}
 * @function
 */
vec2.len = vec2.length;

/**
 * Calculates the squared length of a vec2
 *
 * @param {vec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec2.squaredLength = function (a) {
    var x = a[0],
        y = a[1];
    return x*x + y*y;
};

/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */
vec2.sqrLen = vec2.squaredLength;

/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */
vec2.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
};

/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to invert
 * @returns {vec2} out
 */
vec2.inverse = function(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  return out;
};

/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */
vec2.normalize = function(out, a) {
    var x = a[0],
        y = a[1];
    var len = x*x + y*y;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */
vec2.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1];
};

/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */
vec2.cross = function(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0];
    out[0] = out[1] = 0;
    out[2] = z;
    return out;
};

/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec2} out
 */
vec2.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */
vec2.random = function (out, scale) {
    scale = scale || 1.0;
    var r = glMatrix.RANDOM() * 2.0 * Math.PI;
    out[0] = Math.cos(r) * scale;
    out[1] = Math.sin(r) * scale;
    return out;
};

/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat2 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    return out;
};

/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2d} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat2d = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
};

/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat3} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat3 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[3] * y + m[6];
    out[1] = m[1] * x + m[4] * y + m[7];
    return out;
};

/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat4 = function(out, a, m) {
    var x = a[0], 
        y = a[1];
    out[0] = m[0] * x + m[4] * y + m[12];
    out[1] = m[1] * x + m[5] * y + m[13];
    return out;
};

/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec2.forEach = (function() {
    var vec = vec2.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 2;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec2} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec2.str = function (a) {
    return 'vec2(' + a[0] + ', ' + a[1] + ')';
};

/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
vec2.exactEquals = function (a, b) {
    return a[0] === b[0] && a[1] === b[1];
};

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
vec2.equals = function (a, b) {
    var a0 = a[0], a1 = a[1];
    var b0 = b[0], b1 = b[1];
    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));
};

module.exports = vec2;


/***/ })
/******/ ]);
});
//# sourceMappingURL=grimoire-math.js.map

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 8);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = __webpack_require__(1);

var _Component3 = _interopRequireDefault(_Component2);

var _FrameBuffer = __webpack_require__(5);

var _FrameBuffer2 = _interopRequireDefault(_FrameBuffer);

var _Texture2D = __webpack_require__(6);

var _Texture2D2 = _interopRequireDefault(_Texture2D);

var _Renderbuffer = __webpack_require__(12);

var _Renderbuffer2 = _interopRequireDefault(_Renderbuffer);

var _SlideComponent = __webpack_require__(2);

var _SlideComponent2 = _interopRequireDefault(_SlideComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

var RenderSlideComponent = function (_Component) {
    _inherits(RenderSlideComponent, _Component);

    function RenderSlideComponent() {
        _classCallCheck(this, RenderSlideComponent);

        var _this = _possibleConstructorReturn(this, (RenderSlideComponent.__proto__ || Object.getPrototypeOf(RenderSlideComponent)).apply(this, arguments));

        _this._transiting = false;
        return _this;
    }

    _createClass(RenderSlideComponent, [{
        key: "$mount",
        value: function $mount() {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                var _this2 = this;

                var frame, parsed, gr;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this._gl = this.companion.get("gl");
                                this._currentBuffer = new _FrameBuffer2.default(this._gl);
                                this._lastBuffer = new _FrameBuffer2.default(this._gl);
                                this._currentTexture = new _Texture2D2.default(this._gl);
                                this._lastTexture = new _Texture2D2.default(this._gl);
                                this._renderBuffer = new _Renderbuffer2.default(this._gl);
                                this._resizeTexture(1, 1);
                                this._currentBuffer.update(this._currentTexture);
                                this._currentBuffer.update(this._renderBuffer);
                                this._lastBuffer.update(this._lastTexture);
                                this._lastBuffer.update(this._renderBuffer);
                                this._slides = this.tree("goml").single().getComponentsInChildren(_SlideComponent2.default);
                                this.getAttributeRaw("current").boundTo("_currentFrame");
                                frame = window.location.hash.substring(1);
                                parsed = void 0;

                                if (frame && (parsed = /(\d+)(?:-(\d+))?/gm.exec(frame))) {
                                    setTimeout(function () {
                                        _this2._currentFrame = _this2._toFrameIndex(parseInt(parsed[1]), parseInt(parsed[2] || 0 + ''));
                                        _this2._enterFrame(-1, _this2._currentFrame);
                                    }, 0);
                                } else {
                                    setTimeout(function () {
                                        _this2._updateHash(_this2._currentFrame);
                                        _this2._enterFrame(-1, _this2._currentFrame);
                                    }, 0);
                                }
                                gr = this.companion.get("GeometryRegistory");
                                _context.next = 19;
                                return gr.getGeometry("quad");

                            case 19:
                                this._quad = _context.sent;

                            case 20:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }, {
        key: "$render",
        value: function $render(args) {
            var slideInfo = this._getSlide(this._currentFrame);
            if (this._transiting && slideInfo.build === 0) {
                var progress = (Date.now() - this._transitionStartTime) / this._lastTransitionTime;
                this._renderTo(args, slideInfo.slide, this._currentBuffer);
                var lastSlide = this._getSlide(this._currentFrame - 1);
                this._renderTo(args, lastSlide.slide, this._lastBuffer);
                this._gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, null);
                this._gl.clearColor(0, 0, 0, 0);
                this._gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT | WebGLRenderingContext.DEPTH_BUFFER_BIT);
                this._gl.viewport(0, 0, args.viewport.Width, args.viewport.Height);
                slideInfo.slide.transitionMaterial.setAttribute("progress", progress);
                slideInfo.slide.transitionMaterial.setAttribute("last", this._lastTexture);
                slideInfo.slide.transitionMaterial.setAttribute("current", this._currentTexture);
                slideInfo.slide.transitionMaterial.material.draw({
                    targetBuffer: "default",
                    geometry: this._quad,
                    attributeValues: {},
                    sceneDescription: {},
                    camera: null,
                    transform: null,
                    buffers: args.buffers,
                    viewport: args.viewport,
                    technique: "default"
                });
                this._gl.flush();
            } else {
                if (this._transiting) {
                    var _progress = (Date.now() - this._transitionStartTime) / this._lastTransitionTime;
                    slideInfo.slide.buildProgress(slideInfo.build, _progress);
                }
                this._renderTo(args, slideInfo.slide, null);
            }
        }
    }, {
        key: "_renderTo",
        value: function _renderTo(args, slide, fbo) {
            if (fbo) {
                this._gl.viewport(0, 0, this._bufferWidth, this._bufferHeight);
                fbo.bind();
            } else {
                this._gl.viewport(0, 0, args.viewport.Width, args.viewport.Height);
                this._gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, null);
            }
            var bg = slide.backgroundColor;
            this._gl.clearColor(bg.R, bg.G, bg.B, bg.A);
            this._gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT | WebGLRenderingContext.DEPTH_BUFFER_BIT);
            slide.camera.updateContainedScene(args.timer);
            slide.camera.renderScene({
                renderer: this,
                camera: slide.camera,
                buffers: args.buffers,
                layer: "default",
                viewport: args.viewport,
                timer: args.timer,
                technique: "default",
                sceneDescription: {}
            });
        }
    }, {
        key: "$resizeBuffer",
        value: function $resizeBuffer(arg) {
            this._resizeTexture(arg.pow2Width, arg.pow2Height);
        }
    }, {
        key: "next",
        value: function next() {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee2() {
                var lastFrame, allFrame, i, currentFrameInfo;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                if (!this._transiting) {
                                    _context2.next = 2;
                                    break;
                                }

                                return _context2.abrupt("return");

                            case 2:
                                lastFrame = this._currentFrame;
                                allFrame = 0;

                                for (i = 0; i < this._slides.length; i++) {
                                    allFrame += this._slides[i].build;
                                }
                                this._currentFrame = Math.min(this._currentFrame + 1, allFrame - 1);
                                currentFrameInfo = this._getSlide(this._currentFrame);

                                if (!(currentFrameInfo.build === 0)) {
                                    _context2.next = 14;
                                    break;
                                }

                                _context2.next = 10;
                                return this._transitWait(currentFrameInfo.slide, currentFrameInfo.slide.transitionTime);

                            case 10:
                                if (_context2.sent) {
                                    _context2.next = 12;
                                    break;
                                }

                                return _context2.abrupt("return");

                            case 12:
                                _context2.next = 18;
                                break;

                            case 14:
                                _context2.next = 16;
                                return this._transitWait(currentFrameInfo.slide, currentFrameInfo.slide.buildTransitionTime);

                            case 16:
                                if (_context2.sent) {
                                    _context2.next = 18;
                                    break;
                                }

                                return _context2.abrupt("return");

                            case 18:
                                this._updateHash(this._currentFrame);
                                this._enterFrame(lastFrame, this._currentFrame);

                            case 20:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));
        }
    }, {
        key: "prev",
        value: function prev() {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee3() {
                var lastFrame, slideInfo, prevSlideInfo;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                lastFrame = this._currentFrame;
                                slideInfo = this._getSlide(this._currentFrame); // 前のスライドの最後までを計算

                                this._currentFrame = Math.max(this._currentFrame - 1 - slideInfo.build, 0);
                                prevSlideInfo = this._getSlide(this._currentFrame); // さらに前のスライドの最初まで戻す

                                this._currentFrame = Math.max(this._currentFrame - prevSlideInfo.build, 0);
                                this._updateHash(this._currentFrame);
                                this._enterFrame(lastFrame, this._currentFrame);
                                this._lastTransitionTime = 0;
                                this._transitionStartTime = 0;
                                this._lastWaitingHash = -1;
                                this._transiting = false;

                            case 11:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));
        }
    }, {
        key: "_resizeTexture",
        value: function _resizeTexture(width, height) {
            this._lastTexture.update(0, width, height, 0, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE);
            this._currentTexture.update(0, width, height, 0, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE);
            this._renderBuffer.update(WebGLRenderingContext.DEPTH_COMPONENT16, width, height);
            this._bufferWidth = width;
            this._bufferHeight = height;
        }
    }, {
        key: "_transitWait",
        value: function _transitWait(currentSlide, time) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee4() {
                var hash;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                this._transiting = true;
                                this._lastTransitionTime = time * 1000;
                                this._transitionStartTime = Date.now();
                                hash = this._lastWaitingHash = Math.random();
                                _context4.next = 6;
                                return this._waitFor(time * 1000);

                            case 6:
                                if (!(hash !== this._lastWaitingHash)) {
                                    _context4.next = 8;
                                    break;
                                }

                                return _context4.abrupt("return", false);

                            case 8:
                                this._lastTransitionTime = 0;
                                this._transitionStartTime = 0;
                                this._transiting = false;
                                return _context4.abrupt("return", true);

                            case 12:
                            case "end":
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));
        }
        /**
         * Call slide components events
         * @param {number} lastFrame [description]
         * @param {number} frame     [description]
         */

    }, {
        key: "_enterFrame",
        value: function _enterFrame(lastFrame, frame) {
            var lastSlide = this._getSlide(lastFrame);
            var currentSlide = this._getSlide(frame);
            if (lastFrame !== -1) lastSlide.slide.buildEnd(lastSlide.build);
            if (lastFrame === -1 || lastSlide.slide !== currentSlide.slide) {
                if (lastFrame !== -1) lastSlide.slide.slideEnd();
                currentSlide.slide.slideStart();
            }
            currentSlide.slide.buildStart(currentSlide.build);
        }
        /**
         * Fetch slide component and build index from index.
         * @param  {number} index [description]
         * @return {[type]}       [description]
         */

    }, {
        key: "_getSlide",
        value: function _getSlide(index) {
            var currentIndex = 0;
            for (var i = 0; i < this._slides.length; i++) {
                var slide = this._slides[i];
                if (currentIndex + slide.build > index) {
                    return {
                        slideIndex: i,
                        slide: slide,
                        build: index - currentIndex
                    };
                }
                currentIndex += slide.build;
            }
        }
    }, {
        key: "_waitFor",
        value: function _waitFor(time) {
            return new Promise(function (resolve, reject) {
                setTimeout(function () {
                    resolve();
                }, time);
            });
        }
    }, {
        key: "_toFrameIndex",
        value: function _toFrameIndex(slideIndex, buildIndex) {
            var sum = 0;
            for (var i = 0; i < slideIndex; i++) {
                sum += this._slides[i].build;
            }
            return sum + buildIndex;
        }
    }, {
        key: "_updateHash",
        value: function _updateHash(frame) {
            var slideInfo = this._getSlide(frame);
            if (slideInfo.slide.build === 1) {
                window.location.hash = "" + slideInfo.slideIndex;
            } else {
                window.location.hash = slideInfo.slideIndex + "-" + slideInfo.build;
            }
        }
    }, {
        key: "camera",
        get: function get() {
            return this._getSlide(this._currentFrame).slide.camera;
        }
    }]);

    return RenderSlideComponent;
}(_Component3.default);

exports.default = RenderSlideComponent;

RenderSlideComponent.attributes = {
    current: {
        default: 0,
        converter: "Number"
    }
};

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.Node.Component;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = __webpack_require__(1);

var _Component3 = _interopRequireDefault(_Component2);

var _CameraComponent = __webpack_require__(9);

var _CameraComponent2 = _interopRequireDefault(_CameraComponent);

var _MaterialComponent = __webpack_require__(10);

var _MaterialComponent2 = _interopRequireDefault(_MaterialComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SlideComponent = function (_Component) {
    _inherits(SlideComponent, _Component);

    function SlideComponent() {
        _classCallCheck(this, SlideComponent);

        return _possibleConstructorReturn(this, (SlideComponent.__proto__ || Object.getPrototypeOf(SlideComponent)).apply(this, arguments));
    }

    _createClass(SlideComponent, [{
        key: "$awake",
        value: function $awake() {
            this.build = this.getAttribute("build");
            this.transitionTime = this.getAttribute("transitionTime");
            this.buildTransitionTime = this.getAttribute("buildTransitionTime");
            this.camera = this.node.queryChildren(this.getAttribute("camera"))[0].getComponent(_CameraComponent2.default);
            this.transitionMaterial = this.tree(this.getAttribute("transition")).single().getComponent(_MaterialComponent2.default);
            this.backgroundColor = this.getAttribute("bgColor");
        }
    }, {
        key: "buildProgress",
        value: function buildProgress(buildIndex, progress) {
            var args = {
                buildIndex: buildIndex,
                progress: progress
            };
            this.node.broadcastMessage("buildProgress", args);
            this.node.emit("build-progress", args);
        }
    }, {
        key: "slideStart",
        value: function slideStart() {
            this.node.broadcastMessage("slideStart");
            this.node.emit("slide-start");
        }
    }, {
        key: "slideEnd",
        value: function slideEnd() {
            this.node.broadcastMessage("slideEnd");
            this.node.emit("slide-end");
        }
    }, {
        key: "buildStart",
        value: function buildStart(build) {
            this.node.broadcastMessage("buildStart", build);
            this.node.emit("build-start", build);
        }
    }, {
        key: "buildEnd",
        value: function buildEnd(build) {
            this.node.broadcastMessage("buildEnd", build);
            this.node.emit("slide-end", build);
        }
    }]);

    return SlideComponent;
}(_Component3.default);

exports.default = SlideComponent;

SlideComponent.attributes = {
    transition: {
        default: "material#default.transition",
        converter: "String"
    },
    build: {
        default: 1,
        converter: "Number"
    },
    type: {
        default: "scene",
        converter: "String"
    },
    camera: {
        default: "camera",
        converter: "String"
    },
    transitionTime: {
        default: "0.1",
        converter: "Number"
    },
    buildTransitionTime: {
        default: "0.2",
        converter: "Number"
    },
    bgColor: {
        default: "#F9EFD5",
        converter: "Color4"
    }
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _MeshIndexCalculator = __webpack_require__(13);

var _MeshIndexCalculator2 = _interopRequireDefault(_MeshIndexCalculator);

var _FrameBuffer = __webpack_require__(5);

var _FrameBuffer2 = _interopRequireDefault(_FrameBuffer);

var _Texture2D = __webpack_require__(6);

var _Texture2D2 = _interopRequireDefault(_Texture2D);

var _RenderBuffer = __webpack_require__(11);

var _RenderBuffer2 = _interopRequireDefault(_RenderBuffer);

var _TextureSizeCalculator = __webpack_require__(14);

var _TextureSizeCalculator2 = _interopRequireDefault(_TextureSizeCalculator);

var _RenderSlideComponent = __webpack_require__(0);

var _RenderSlideComponent2 = _interopRequireDefault(_RenderSlideComponent);

var _Component2 = __webpack_require__(1);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RenderSlideHitAreaComponent = function (_Component) {
    _inherits(RenderSlideHitAreaComponent, _Component);

    function RenderSlideHitAreaComponent() {
        _classCallCheck(this, RenderSlideHitAreaComponent);

        var _this = _possibleConstructorReturn(this, (RenderSlideHitAreaComponent.__proto__ || Object.getPrototypeOf(RenderSlideHitAreaComponent)).apply(this, arguments));

        _this._readCache = new Uint8Array(4);
        return _this;
    }

    _createClass(RenderSlideHitAreaComponent, [{
        key: "$mount",
        value: function $mount() {
            this._sceneRenderer = this.node.getComponent(_RenderSlideComponent2.default);
            if (!this._sceneRenderer) {
                throw new Error("The node attaching RenderHitArea should contain RenderScene.");
            }
            this._gl = this.companion.get("gl");
            this._canvas = this.companion.get("canvasElement");
            this.hitareaTexture = new _Texture2D2.default(this._gl);
            this.hitareaRenderbuffer = new _RenderBuffer2.default(this._gl);
            if (this.hitareaFBO) {
                this.hitareaFBO.destroy();
                this.hitareaFBO = null;
            }
        }
    }, {
        key: "$resizeBuffer",
        value: function $resizeBuffer(args) {
            var size = _TextureSizeCalculator2.default.getPow2Size(args.width, args.height);
            this._bufferSize = [size.width, size.height];
            this.hitareaTexture.update(0, size.width, size.height, 0, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE);
            this.hitareaRenderbuffer.update(WebGLRenderingContext.DEPTH_COMPONENT16, size.width, size.height);
            if (!this.hitareaFBO) {
                this.hitareaFBO = new _FrameBuffer2.default(this._gl);
                this.hitareaFBO.update(this.hitareaTexture);
                this.hitareaFBO.update(this.hitareaRenderbuffer);
            }
        }
    }, {
        key: "$render",
        value: function $render(args) {
            if (!this._mouseInside) {
                return;
            }
            this.hitareaFBO.bind();
            this._gl.viewport(0, 0, this._bufferSize[0], this._bufferSize[1]);
            // clear buffer if needed
            this._gl.clearColor(0, 0, 0, 0);
            this._gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT);
            this._gl.clearDepth(1);
            this._gl.clear(WebGLRenderingContext.DEPTH_BUFFER_BIT);
            var camera = this._sceneRenderer.camera || args.camera;
            camera.renderScene({
                renderer: this._sceneRenderer,
                camera: camera,
                buffers: args.buffers,
                layer: "default",
                viewport: args.viewport,
                timer: args.timer,
                technique: "hitarea",
                sceneDescription: {}
            });
            this._gl.flush();
            this._gl.readPixels(this._lastPosition[0] * this._bufferSize[0], this._lastPosition[1] * this._bufferSize[1], 1, 1, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE, this._readCache);
            var index = _MeshIndexCalculator2.default.fromColor(this._readCache);
            if (index === 0) {
                if (this._lastRenderable instanceof _Component3.default) {
                    this._lastRenderable.node.emit("mouseleave", this._lastRenderable);
                }
                this._lastRenderable = null;
            } else {
                var r = camera.containedScene.queueRegistory.getByIndex(index - 1);
                if (this._lastRenderable !== r) {
                    if (this._lastRenderable instanceof _Component3.default) {
                        this._lastRenderable.node.emit("mouseleave", this._lastRenderable);
                    }
                    if (r instanceof _Component3.default) {
                        r.node.emit("mouseenter", r);
                    }
                } else {
                    if (r instanceof _Component3.default) {
                        if (this._mouseMoved) {
                            r.node.emit("mousemove", r);
                        } else {
                            r.node.emit("mouseon", r);
                        }
                    }
                }
                this._lastRenderable = r;
            }
            this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, null);
        }
    }, {
        key: "$mousemove",
        value: function $mousemove(v) {
            this._lastPosition = [v.viewportNormalizedX, 1.0 - v.viewportNormalizedY];
            this._mouseMoved = true;
        }
    }, {
        key: "$mouseenter",
        value: function $mouseenter(v) {
            this._mouseInside = true;
            this._lastPosition = [v.viewportNormalizedX, 1.0 - v.viewportNormalizedY];
            this._mouseMoved = true;
        }
    }, {
        key: "$mouseleave",
        value: function $mouseleave(v) {
            this._mouseInside = false;
            this._lastPosition = [v.viewportNormalizedX, 1.0 - v.viewportNormalizedY];
            this._mouseMoved = true;
            if (this._lastRenderable instanceof _Component3.default) {
                this._lastRenderable.node.emit("mouseleave", this._lastRenderable);
            }
            this._lastRenderable = null;
        }
    }]);

    return RenderSlideHitAreaComponent;
}(_Component3.default);

exports.default = RenderSlideHitAreaComponent;

RenderSlideHitAreaComponent.attributes = {};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = __webpack_require__(1);

var _Component3 = _interopRequireDefault(_Component2);

var _RenderSlideComponent = __webpack_require__(0);

var _RenderSlideComponent2 = _interopRequireDefault(_RenderSlideComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SlideControllerComponent = function (_Component) {
    _inherits(SlideControllerComponent, _Component);

    function SlideControllerComponent() {
        _classCallCheck(this, SlideControllerComponent);

        return _possibleConstructorReturn(this, (SlideControllerComponent.__proto__ || Object.getPrototypeOf(SlideControllerComponent)).apply(this, arguments));
    }

    _createClass(SlideControllerComponent, [{
        key: "$mount",
        value: function $mount() {
            var _this2 = this;

            var query = this.getAttribute("clickRegion");
            var elem = document.querySelector(query);
            var slideRenderer = this.node.getComponent(_RenderSlideComponent2.default);
            elem.addEventListener("mousedown", function () {
                if (_this2.getAttribute("clickEnabled")) {
                    slideRenderer.next();
                }
            });
            document.addEventListener("keydown", function (e) {
                if (e.keyCode === 39) {
                    slideRenderer.next();
                }
                if (e.keyCode === 37) {
                    slideRenderer.prev();
                }
            });
        }
    }]);

    return SlideControllerComponent;
}(_Component3.default);

exports.default = SlideControllerComponent;

SlideControllerComponent.attributes = {
    clickRegion: {
        default: ".gr-container",
        converter: "String"
    },
    clickEnabled: {
        default: false,
        converter: "Boolean"
    }
};

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Resource.FrameBuffer;

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Resource.Texture2D;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _grimoirejs = __webpack_require__(15);

var _grimoirejs2 = _interopRequireDefault(_grimoirejs);

var _RenderSlideComponent = __webpack_require__(0);

var _RenderSlideComponent2 = _interopRequireDefault(_RenderSlideComponent);

var _SlideComponent = __webpack_require__(2);

var _SlideComponent2 = _interopRequireDefault(_SlideComponent);

var _SlideControllerComponent = __webpack_require__(4);

var _SlideControllerComponent2 = _interopRequireDefault(_SlideControllerComponent);

var _RenderSlideHitareaComponent = __webpack_require__(3);

var _RenderSlideHitareaComponent2 = _interopRequireDefault(_RenderSlideHitareaComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

exports.default = function () {
    _grimoirejs2.default.register(function () {
        return __awaiter(undefined, void 0, void 0, regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _grimoirejs2.default.registerComponent("RenderSlide", _RenderSlideComponent2.default);
                            _grimoirejs2.default.registerComponent("RenderSlideHitarea", _RenderSlideHitareaComponent2.default);
                            _grimoirejs2.default.registerComponent("Slide", _SlideComponent2.default);
                            _grimoirejs2.default.registerComponent("SlideController", _SlideControllerComponent2.default);
                            _grimoirejs2.default.registerNode("render-slide", ["RenderSlide"]);
                            _grimoirejs2.default.registerNode("scene-slide", ["Slide"], {}, "scene");

                        case 6:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));
    });
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _RenderSlideComponent = __webpack_require__(0);

var _RenderSlideComponent2 = _interopRequireDefault(_RenderSlideComponent);

var _RenderSlideHitareaComponent = __webpack_require__(3);

var _RenderSlideHitareaComponent2 = _interopRequireDefault(_RenderSlideHitareaComponent);

var _SlideComponent = __webpack_require__(2);

var _SlideComponent2 = _interopRequireDefault(_SlideComponent);

var _SlideControllerComponent = __webpack_require__(4);

var _SlideControllerComponent2 = _interopRequireDefault(_SlideControllerComponent);

var _main = __webpack_require__(7);

var _main2 = _interopRequireDefault(_main);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __VERSION__ = "0.0.17";
var __NAME__ = "grimoirejs-slide-system";

var __EXPOSE__ = {
    "Components": {
        "RenderSlideComponent": _RenderSlideComponent2.default,
        "RenderSlideHitareaComponent": _RenderSlideHitareaComponent2.default,
        "SlideComponent": _SlideComponent2.default,
        "SlideControllerComponent": _SlideControllerComponent2.default
    }
};
var __BASE__ = (0, _main2.default)();
Object.assign(__EXPOSE__, {
    __VERSION__: __VERSION__,
    __NAME__: __NAME__
});
Object.assign(__BASE__ || {}, __EXPOSE__);
window["GrimoireJS"].lib.slide_system = __EXPOSE__;
exports.default = __BASE__;

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Components.CameraComponent;

/***/ }),
/* 10 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Components.MaterialComponent;

/***/ }),
/* 11 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Resource.RenderBuffer;

/***/ }),
/* 12 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Resource.RenderBuffer;

/***/ }),
/* 13 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Util.MeshIndexCalculator;

/***/ }),
/* 14 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental.Util.TextureSizeCalculator;

/***/ }),
/* 15 */
/***/ (function(module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS;

/***/ })
/******/ ]);
});
//# sourceMappingURL=index.js.map

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 37);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _GrimoireInterfaceImpl = __webpack_require__(33);

var _GrimoireInterfaceImpl2 = _interopRequireDefault(_GrimoireInterfaceImpl);

var _GomlInterfaceImpl = __webpack_require__(14);

var _GomlInterfaceImpl2 = _interopRequireDefault(_GomlInterfaceImpl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var context = new _GrimoireInterfaceImpl2.default();
function obtainGomlInterface(query) {
    if (typeof query === "string") {
        var gomlContext = new _GomlInterfaceImpl2.default(context.queryRootNodes(query));
        var queryFunc = gomlContext.queryFunc.bind(gomlContext);
        Object.setPrototypeOf(queryFunc, gomlContext);
        return queryFunc;
    } else if (typeof query === "function") {
        context.initializedEventHandler.push(query);
    } else {
        var _gomlContext = new _GomlInterfaceImpl2.default(query);
        var _queryFunc = _gomlContext.queryFunc.bind(_gomlContext);
        Object.setPrototypeOf(_queryFunc, _gomlContext);
        return _queryFunc;
    }
}
Object.setPrototypeOf(obtainGomlInterface, context);
exports.default = obtainGomlInterface;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
// import Namespace from "./Namespace";


var _GrimoireInterface = __webpack_require__(0);

var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);

var _NSIdentity = __webpack_require__(2);

var _NSIdentity2 = _interopRequireDefault(_NSIdentity);

var _NSDictionary = __webpack_require__(6);

var _NSDictionary2 = _interopRequireDefault(_NSDictionary);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides static methods to ensure arguments are valid type.
 */
var Ensure = function () {
    function Ensure() {
        _classCallCheck(this, Ensure);
    }

    _createClass(Ensure, null, [{
        key: "tobeString",

        /**
         * Ensure specified str being string
         * @param  {string | number}      str [description]
         * @return {string}      [description]
         */
        value: function tobeString(str) {
            if (typeof str === "string") {
                return str;
            } else if (typeof str === "number") {
                return str.toString();
            } else {
                throw new Error("Specified argument can not convert into string");
            }
        }
        /**
         * Ensure specified number being number
         * @param  {string | number}      str [description]
         * @return {string}      [description]
         */

    }, {
        key: "tobeNumber",
        value: function tobeNumber(num) {
            if (typeof num === "string") {
                return parseInt(num, 10);
            } else if (typeof num === "number") {
                return num;
            } else {
                throw new Error("specified argument can not be converted into number");
            }
        }
        /**
         * string or NSIdentity ensure to be NSIdentity.
         * @param  {Name}       name [description]
         * @return {NSIdentity}      [description]
         */

    }, {
        key: "tobeNSIdentity",
        value: function tobeNSIdentity(name) {
            if (!name) {
                throw Error("argument can not be null or undefined.");
            }
            if (typeof name === "string") {
                return _NSIdentity2.default.guess(name);
            } else {
                return name;
            }
        }
    }, {
        key: "tobeNSIdentityArray",
        value: function tobeNSIdentityArray(names) {
            if (!names) {
                return [];
            }
            var newArr = [];
            for (var i = 0; i < names.length; i++) {
                newArr.push(this.tobeNSIdentity(names[i]));
            }
            return newArr;
        }
    }, {
        key: "tobeNSDictionary",
        value: function tobeNSDictionary(dict) {
            if (!dict) {
                return new _NSDictionary2.default();
            }
            if (dict instanceof _NSDictionary2.default) {
                return dict;
            } else {
                var newDict = new _NSDictionary2.default();
                for (var key in dict) {
                    newDict.set(_NSIdentity2.default.guess(key), dict[key]);
                }
                return newDict;
            }
        }
    }, {
        key: "tobeMessage",
        value: function tobeMessage(message) {
            if (message.startsWith("$")) {
                if (message.startsWith("$$")) {
                    return message;
                } else {
                    return "$" + message;
                }
            } else {
                return "$$" + message;
            }
        }
        /**
         * string, NSIdentity or constructor ensure to be constructor.
         * return null if identity is not registered as component.
         * @param  {[type]} typeofc==="function" [description]
         * @return {[type]}                      [description]
         */

    }, {
        key: "tobeComponentConstructor",
        value: function tobeComponentConstructor(c) {
            if (typeof c === "function") {
                return c;
            } else {
                var dec = _GrimoireInterface2.default.componentDeclarations.get(c);
                if (dec) {
                    return dec.ctor;
                }
                return null;
            }
        }
    }, {
        key: "tobeFQN",
        value: function tobeFQN(name) {
            if (typeof name === "string") {
                if (Ensure.checkFQNString(name)) {
                    return name.substring(1);
                }
                return null;
            } else {
                return name.fqn;
            }
        }
    }, {
        key: "checkFQNString",
        value: function checkFQNString(name) {
            return name.startsWith("_");
        }
    }]);

    return Ensure;
}();

exports.default = Ensure;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Namespace = __webpack_require__(7);

var _Namespace2 = _interopRequireDefault(_Namespace);

var _IdResolver = __webpack_require__(3);

var _IdResolver2 = _interopRequireDefault(_IdResolver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The class to identity with XML namespace feature.
 */
var NSIdentity = function () {
    function NSIdentity(qn, n) {
        _classCallCheck(this, NSIdentity);

        if (typeof qn === "string") {
            qn = qn.split(".");
        }
        if (n) {
            this._ns = _Namespace2.default.defineByArray(qn);
            this._name = n;
        } else {
            this._name = qn[qn.length - 1];
            qn = qn.slice(0, qn.length - 1);
            this._ns = _Namespace2.default.defineByArray(qn);
        }
        this._fqn = this.ns.hierarchy.concat([this.name]).join(".");
        NSIdentity._instances[this._fqn] = this;
        NSIdentity._map.add(qn.concat([this._name]));
    }

    _createClass(NSIdentity, [{
        key: "toString",
        value: function toString() {
            return this.fqn;
        }
    }, {
        key: "ns",

        /**
         * Namespace of this identity
         * @type {string}
         */
        get: function get() {
            return this._ns;
        }
        /**
         * Short name for this identity
         * @type {string}
         */

    }, {
        key: "name",
        get: function get() {
            return this._name;
        }
        /**
         * Full qualified name of this identity
         * @type {string}
         */

    }, {
        key: "fqn",
        get: function get() {
            return this._fqn;
        }
    }], [{
        key: "fromFQN",
        value: function fromFQN(fqn, name) {
            var hierarchy = NSIdentity._ensureQNTobeArray(fqn, name);
            fqn = hierarchy.join(".");
            var inst = NSIdentity._instances[fqn];
            if (inst) {
                return inst;
            }
            var splitted = fqn.split(".");
            return new NSIdentity(splitted);
        }
    }, {
        key: "guess",
        value: function guess() {
            for (var _len = arguments.length, hierarchy = Array(_len), _key = 0; _key < _len; _key++) {
                hierarchy[_key] = arguments[_key];
            }

            return NSIdentity._from(hierarchy);
        }
    }, {
        key: "clear",
        value: function clear() {
            NSIdentity._instances = {};
            NSIdentity._map = new _IdResolver2.default();
        }
        /**
         * return instance if exists.
         * generate and return new instanse if not exist id has same fqn.
         * @param  {string[]}   hierarchy [description]
         * @return {NSIdentity}           [description]
         */

    }, {
        key: "_from",
        value: function _from(hierarchy) {
            var fqn = hierarchy.join(".");
            var inst = NSIdentity._instances[fqn];
            if (inst) {
                return inst;
            }
            return NSIdentity.fromFQN(NSIdentity._map.resolve(_Namespace2.default.defineByArray(hierarchy)));
        }
    }, {
        key: "_ensureQNTobeArray",
        value: function _ensureQNTobeArray(arg1, name) {
            if (name) {
                return NSIdentity._ensureQNTobeArray(arg1.extend(name));
            }
            if (typeof arg1 === "string") {
                return arg1.split(".");
            }
            if (Array.isArray(arg1)) {
                return arg1;
            }
            return arg1.hierarchy;
        }
    }]);

    return NSIdentity;
}();

exports.default = NSIdentity;

NSIdentity._instances = {};
NSIdentity._map = new _IdResolver2.default();

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Namespace = __webpack_require__(7);

var _Namespace2 = _interopRequireDefault(_Namespace);

var _NSIdentity = __webpack_require__(2);

var _NSIdentity2 = _interopRequireDefault(_NSIdentity);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Internal use!
 * Disambiguate according to the context from the namespace hierarchy.
 * @return {[type]} [description]
 */
var IdResolver = function () {
    function IdResolver() {
        _classCallCheck(this, IdResolver);

        this._nameMap = {};
        this._FQNSet = new Set();
        this._isTerminal = false;
    }

    _createClass(IdResolver, [{
        key: "add",

        /**
         * add id to resolver context.
         * @param  {NSIdentity} id [description]
         * @return {boolean}       true if succcess adding.
         */
        value: function add(id) {
            if (!id) {
                throw new Error("Argument ns is null or undefined.");
            }
            if (id instanceof _NSIdentity2.default) {
                id = id.ns.hierarchy.concat([id.name]);
            }
            if (id.length === 0) {
                return false;
            }
            return this._add(id);
        }
        /**
         * Get all possible FQN.
         * @param  {string | string[]}    name [description]
         * @return {string[]}    list of FQN
         */

    }, {
        key: "get",
        value: function get(ns) {
            if (typeof ns === "string") {
                return this.get(_Namespace2.default.defineByArray(ns.split(".")));
            }
            var name = ns.hierarchy;
            var current_name = name[name.length - 1];
            if (!this._nameMap[current_name]) {
                return [];
            }
            var pathes = this._nameMap[current_name]._get(name.slice(0, name.length - 1));
            var res = [];
            for (var i = 0; i < pathes.length; i++) {
                var a = pathes[i];
                a.push(current_name);
                res.push(a.join("."));
            }
            return res;
        }
    }, {
        key: "resolve",
        value: function resolve(name) {
            if (typeof name === "string") {
                return this.resolve(_Namespace2.default.defineByArray(name.split(".")));
            }
            var pathes = this.get(name);
            if (pathes.length === 0) {
                throw new Error(name + " is not found in this context.");
            }
            if (pathes.length > 1) {
                throw new Error(name + " is ambiguous in this context. [" + pathes.join(", ") + "]");
            }
            return pathes[0];
        }
    }, {
        key: "has",
        value: function has(name) {
            return !!this._nameMap[name];
        }
    }, {
        key: "remove",
        value: function remove(name) {
            var fqn = name.fqn.split(".");
            this._remove(fqn);
        }
    }, {
        key: "foreach",
        value: function foreach(callback) {
            this._FQNSet.forEach(callback);
        }
    }, {
        key: "_remove",
        value: function _remove(name) {
            if (name.length === 1) {
                this._nameMap[name[0]]._isTerminal = false;
            } else {
                var next = this._nameMap[name[name.length - 1]];
                next._remove(name.slice(0, name.length - 1));
            }
        }
    }, {
        key: "_get",
        value: function _get(name) {
            if (name.length === 0) {
                if (this.count === 0) {
                    return [[]];
                }
                var _res = [];
                for (var key in this._nameMap) {
                    var match = this._nameMap[key]._get([]);
                    for (var i = 0; i < match.length; i++) {
                        var m = match[i];
                        m.push(key);
                        _res.push(m);
                    }
                }
                if (this._isTerminal) {
                    _res.push([]);
                }
                return _res;
            }
            var current_name = name[name.length - 1];
            var res = [];
            for (var _key in this._nameMap) {
                var _match = _key === current_name ? this._nameMap[_key]._get(name.slice(0, name.length - 1)) : this._nameMap[_key]._get(name);
                if (_match.length !== 0) {
                    for (var _i = 0; _i < _match.length; _i++) {
                        var _m = _match[_i];
                        _m.push(_key);
                        res.push(_m);
                    }
                }
            }
            return res;
        }
        /**
         * nameはドットをフラット化済。nameの長さは0ではない。重複があればfalse新規ならtrueを返す。
         * @param  {string[]} name [description]
         * @return {boolean}       [description]
         */

    }, {
        key: "_add",
        value: function _add(id) {
            var fqn = id.join(".");
            if (this._FQNSet.has(fqn)) {
                return false;
            }
            this._FQNSet.add(fqn);
            if (!this._nameMap[id[id.length - 1]]) {
                this._nameMap[id[id.length - 1]] = new IdResolver();
            }
            var next = id.slice(0, id.length - 1);
            if (next.length === 0) {
                this._nameMap[id[id.length - 1]]._isTerminal = true;
            } else {
                this._nameMap[id[id.length - 1]].add(next);
            }
            return true;
        }
    }, {
        key: "count",
        get: function get() {
            return this._FQNSet.size;
        }
    }]);

    return IdResolver;
}();

exports.default = IdResolver;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GrimoireInterface = __webpack_require__(0);

var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Utility = function () {
    function Utility() {
        _classCallCheck(this, Utility);
    }

    _createClass(Utility, null, [{
        key: "w",
        value: function w(message) {
            if (_GrimoireInterface2.default.debug) {
                console.warn(message);
            }
        }
    }, {
        key: "isCamelCase",
        value: function isCamelCase(str) {
            return (/^[A-Z][a-zA-Z0-9]*$/.test(str)
            );
        }
    }, {
        key: "isSnakeCase",
        value: function isSnakeCase(str) {
            return (/^[a-z0-9\-]+$/.test(str)
            );
        }
    }, {
        key: "flat",
        value: function flat(array) {
            var count = 0;
            for (var i = 0; i < array.length; i++) {
                count += array[i].length;
            }
            var ret = new Array(count);
            count = 0;
            for (var _i = 0; _i < array.length; _i++) {
                var ar = array[_i];
                for (var j = 0; j < ar.length; j++) {
                    ret[count] = ar[j];
                    count++;
                }
            }
            return ret;
        }
    }, {
        key: "flatMap",
        value: function flatMap(source, map) {
            var c = new Array(source.length);
            for (var i = 0; i < source.length; i++) {
                c[i] = map(source[i]);
            }
            return Utility.flat(c);
        }
    }, {
        key: "sum",
        value: function sum(array) {
            var total = 0;
            for (var i = 0; i < array.length; i++) {
                total += array[i];
            }
            return total;
        }
    }, {
        key: "remove",
        value: function remove(array, target) {
            var index = -1;
            for (var i = 0; i < array.length; i++) {
                if (target === array[i]) {
                    index = i;
                    break;
                }
            }
            if (index < 0) {
                return false;
            }
            array.splice(index, 1);
            return true;
        }
        /**
         * 重複がなければtrue
         */

    }, {
        key: "checkOverlap",
        value: function checkOverlap(array) {
            var list = [];
            for (var i = 0; i < array.length; i++) {
                var item = array[i];
                if (list.indexOf(item) !== -1) {
                    return false;
                }
                list.push(item);
            }
            return true;
        }
    }]);

    return Utility;
}();

exports.default = Utility;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Constants = function () {
    function Constants() {
        _classCallCheck(this, Constants);
    }

    _createClass(Constants, null, [{
        key: "defaultNamespace",
        get: function get() {
            return "grimoirejs";
        }
    }, {
        key: "x_gr_id",
        get: function get() {
            return "x-gr-id";
        }
    }]);

    return Constants;
}();

exports.default = Constants;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _NSIdentity = __webpack_require__(2);

var _NSIdentity2 = _interopRequireDefault(_NSIdentity);

var _IdResolver = __webpack_require__(3);

var _IdResolver2 = _interopRequireDefault(_IdResolver);

var _Namespace = __webpack_require__(7);

var _Namespace2 = _interopRequireDefault(_Namespace);

var _Ensure = __webpack_require__(1);

var _Ensure2 = _interopRequireDefault(_Ensure);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NSDictionary = function () {
    function NSDictionary() {
        _classCallCheck(this, NSDictionary);

        this._fqnObjectMap = {};
        this._idResolver = new _IdResolver2.default();
    }

    _createClass(NSDictionary, [{
        key: "set",
        value: function set(key, value) {
            this._fqnObjectMap[key.fqn] = value;
            this._idResolver.add(key);
        }
    }, {
        key: "delete",
        value: function _delete(key) {
            if (this._fqnObjectMap[key.fqn] !== void 0) {
                delete this._fqnObjectMap[key.fqn];
                this._idResolver.remove(key);
                return true;
            }
            return false;
        }
    }, {
        key: "get",
        value: function get(arg1) {
            if (!arg1) {
                throw new Error("NSDictionary.get() can not recieve args null or undefined.");
            }
            if (typeof arg1 === "string") {
                var fqn = _Ensure2.default.tobeFQN(arg1);
                if (fqn) {
                    return this._fqnObjectMap[fqn];
                }
                var name = arg1.split(".");
                var res = this._idResolver.get(_Namespace2.default.defineByArray(name));
                // const namedMap = this._nameObjectMap[arg1];
                if (res.length === 0) {
                    return null; // not exist.
                }
                if (res.length === 1) {
                    return this._fqnObjectMap[res[0]];
                } else {
                    throw new Error("Specified tag name " + arg1 + " is ambiguous to identify.");
                }
            } else {
                if (arg1 instanceof _NSIdentity2.default) {
                    return this._fqnObjectMap[arg1.fqn];
                } else {
                    if (arg1.namespaceURI) {
                        return this.get(arg1.namespaceURI + "." + arg1.localName);
                    }
                    return this.get(arg1.localName);
                }
            }
        }
        /**
         * Check if name has possibility of multiple values.
         * @param  {string}  name [description]
         * @return {boolean}      Whether the name has multiple values.
         */

    }, {
        key: "isAmbiguous",
        value: function isAmbiguous(name) {
            return this._idResolver.get(_Namespace2.default.defineByArray(name.split("."))).length > 1;
        }
    }, {
        key: "has",
        value: function has(name) {
            return this._idResolver.get(_Namespace2.default.defineByArray(name.split("."))).length !== 0;
        }
    }, {
        key: "pushDictionary",
        value: function pushDictionary(dict) {
            var _this = this;

            dict.forEach(function (value, keyFQN) {
                var id = _NSIdentity2.default.fromFQN(keyFQN);
                _this.set(id, value);
            });
            return this;
        }
    }, {
        key: "hasMatchingValue",
        value: function hasMatchingValue(name) {
            var resolver = new _IdResolver2.default();
            resolver.add(name);
            var match = void 0;
            for (var key in this._fqnObjectMap) {
                var v = resolver.get(_Namespace2.default.defineByArray(key.split(".")));
                if (v.length === 1) {
                    if (match === void 0) {
                        match = key;
                    } else {
                        throw new Error("matching attribute is ambiguous. It has following possibilities " + match + " " + key);
                    }
                }
            }
            if (match) {
                return this._fqnObjectMap[match];
            }
            return void 0;
        }
    }, {
        key: "toArray",
        value: function toArray() {
            var _this2 = this;

            var ret = [];
            Object.keys(this._fqnObjectMap).forEach(function (key) {
                ret.push(_this2._fqnObjectMap[key]);
            });
            return ret;
        }
    }, {
        key: "clone",
        value: function clone() {
            var dict = new NSDictionary();
            return dict.pushDictionary(this);
        }
    }, {
        key: "forEach",
        value: function forEach(callback) {
            var _this3 = this;

            Object.keys(this._fqnObjectMap).forEach(function (key) {
                callback(_this3._fqnObjectMap[key], key);
            });
            return this;
        }
    }, {
        key: "map",
        value: function map(callback) {
            var ret = new NSDictionary();
            this.forEach(function (val, fqn) {
                var id = _NSIdentity2.default.fromFQN(fqn);
                ret.set(id, callback(val, fqn));
            });
            return ret;
        }
    }, {
        key: "clear",
        value: function clear() {
            this._fqnObjectMap = {};
            this._idResolver = new _IdResolver2.default();
        }
    }]);

    return NSDictionary;
}();

exports.default = NSDictionary;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _NSIdentity = __webpack_require__(2);

var _NSIdentity2 = _interopRequireDefault(_NSIdentity);

var _Utility = __webpack_require__(4);

var _Utility2 = _interopRequireDefault(_Utility);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Namespace = function () {
    _createClass(Namespace, [{
        key: "extend",
        value: function extend(extension) {
            return new Namespace(this._ns.concat([extension]));
        }
    }, {
        key: "for",
        value: function _for(name) {
            return _NSIdentity2.default.fromFQN(this, name);
        }
    }, {
        key: "toString",
        value: function toString() {
            return this.qualifiedName;
        }
    }, {
        key: "hierarchy",
        get: function get() {
            return this._ns;
        }
    }, {
        key: "qualifiedName",
        get: function get() {
            return this._ns.join(".");
        }
    }], [{
        key: "define",

        /**
         * create new Namespace instance.
         * You can include dots in the name
         * @param  {string[]}  ...name [description]
         * @return {Namespace}         [description]
         */
        value: function define() {
            for (var _len = arguments.length, name = Array(_len), _key = 0; _key < _len; _key++) {
                name[_key] = arguments[_key];
            }

            return Namespace.defineByArray(name);
        }
    }, {
        key: "defineByArray",
        value: function defineByArray(name) {
            return new Namespace(_Utility2.default.flat(name.map(function (n) {
                return n.split(".");
            })));
        }
    }]);

    function Namespace(names) {
        _classCallCheck(this, Namespace);

        this._ns = names;
    }

    return Namespace;
}();

exports.default = Namespace;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides safe xml read feature.
 */
var XMLReader = function () {
    function XMLReader() {
        _classCallCheck(this, XMLReader);
    }

    _createClass(XMLReader, null, [{
        key: "parseXML",
        value: function parseXML(doc, rootElementName) {
            var parsed = XMLReader._parser.parseFromString(doc, "text/xml");
            if (!parsed || parsed.getElementsByTagName("parsererror").length > 0) {
                var err = new XMLSerializer().serializeToString(parsed);
                throw new Error("Error parsing XML: " + err);
            }
            if (rootElementName) {
                if (parsed.documentElement.tagName.toUpperCase() !== rootElementName.toUpperCase()) {
                    throw new Error("Specified document is invalid.");
                } // TODO should throw more detail error
            }
            return [parsed.documentElement]; // TODO: implenent!
        }
    }, {
        key: "getElements",
        value: function getElements(elem, name) {
            var result = [];
            var elems = elem.getElementsByTagName(name);
            for (var i = 0; i < elems.length; i++) {
                result.push(elems.item(i));
            }
            return result;
        }
    }, {
        key: "getSingleElement",
        value: function getSingleElement(elem, name, mandatory) {
            var result = XMLReader.getElements(elem, name);
            if (result.length === 1) {
                return result[0];
            } else if (result.length === 0) {
                if (mandatory) {
                    throw new Error("The mandatory element " + name + " was required, but not found");
                } else {
                    return null;
                }
            } else {
                throw new Error("The element " + name + " requires to exist in single. But there is " + result.length + " count of elements");
            }
        }
    }, {
        key: "getAttribute",
        value: function getAttribute(elem, name, mandatory) {
            var result = elem.attributes.getNamedItem(name);
            if (result) {
                return result.value;
            } else if (mandatory) {
                throw new Error("The mandatory attribute " + name + " was required, but it was not found");
            } else {
                return null;
            }
        }
    }, {
        key: "getAttributeFloat",
        value: function getAttributeFloat(elem, name, mandatory) {
            var resultStr = XMLReader.getAttribute(elem, name, mandatory);
            return resultStr ? parseFloat(resultStr) : null;
        }
    }, {
        key: "getAttributeInt",
        value: function getAttributeInt(elem, name, mandatory) {
            var resultStr = XMLReader.getAttribute(elem, name, mandatory);
            return resultStr ? parseInt(resultStr, 10) : null;
        }
    }, {
        key: "getChildElements",
        value: function getChildElements(elem) {
            var children = elem.childNodes;
            var result = [];
            for (var i = 0; i < children.length; i++) {
                if (children.item(i) instanceof Element) {
                    result.push(children.item(i));
                }
            }
            return result;
        }
    }, {
        key: "getAttributes",
        value: function getAttributes(elem, ns) {
            var result = {};
            var attrs = elem.attributes;
            for (var i = 0; i < attrs.length; i++) {
                var attr = attrs.item(i);
                if (!ns || attr.namespaceURI === ns) {
                    result[attr.localName] = attr.value;
                }
            }
            return result;
        }
    }]);

    return XMLReader;
}();

XMLReader._parser = new DOMParser();
exports.default = XMLReader;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Utility = __webpack_require__(4);

var _Utility2 = _interopRequireDefault(_Utility);

var _Constants = __webpack_require__(5);

var _Constants2 = _interopRequireDefault(_Constants);

var _NodeUtility = __webpack_require__(19);

var _NodeUtility2 = _interopRequireDefault(_NodeUtility);

var _Attribute = __webpack_require__(16);

var _Attribute2 = _interopRequireDefault(_Attribute);

var _IDObject2 = __webpack_require__(13);

var _IDObject3 = _interopRequireDefault(_IDObject2);

var _Ensure = __webpack_require__(1);

var _Ensure2 = _interopRequireDefault(_Ensure);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Base class for any components
 * component must be attach to node before any operation.
 */
var Component = function (_IDObject) {
    _inherits(Component, _IDObject);

    function Component() {
        _classCallCheck(this, Component);

        /**
         * Whether this component was created by nodeDeclaration
         * @type {boolean}
         */
        var _this = _possibleConstructorReturn(this, (Component.__proto__ || Object.getPrototypeOf(Component)).apply(this, arguments));

        _this.isDefaultComponent = false;
        _this.disposed = false;
        /**
         * Flag that this component is activated or not.
         * @type {boolean}
         */
        _this._enabled = true;
        _this._awaked = false;
        _this._handlers = [];
        _this._additionalAttributesNames = [];
        _this._initializedInfo = null;
        return _this;
    }

    _createClass(Component, [{
        key: "setAttribute",

        /**
         * Set value of attribute
         * @param {string} name  [description]
         * @param {any}    value [description]
         */
        value: function setAttribute(name, value) {
            if (typeof name === "string" && _Ensure2.default.checkFQNString(name)) {
                name = this.name.fqn + "." + name; // TODO: test
            }
            var attr = this.attributes.get(name);
            if (attr) {
                attr.Value = value;
            }
        }
    }, {
        key: "getAttribute",
        value: function getAttribute(name) {
            if (typeof name === "string" && _Ensure2.default.checkFQNString(name)) {
                name = this.name.fqn + "." + name; // TODO: test
            }
            var attr = this.getAttributeRaw(name);
            if (attr) {
                return attr.Value;
            } else {
                throw new Error("attribute " + name + " is not defined in " + this.name.fqn);
            }
        }
    }, {
        key: "getAttributeRaw",
        value: function getAttributeRaw(name) {
            if (typeof name === "string" && _Ensure2.default.checkFQNString(name)) {
                name = this.name.fqn + "." + name; // TODO: test
            }
            return this.attributes.get(name);
        }
    }, {
        key: "addEnabledObserver",
        value: function addEnabledObserver(observer) {
            this._handlers.push(observer);
        }
    }, {
        key: "removeEnabledObserver",
        value: function removeEnabledObserver(observer) {
            return _Utility2.default.remove(this._handlers, observer);
        }
    }, {
        key: "resolveDefaultAttributes",
        value: function resolveDefaultAttributes(nodeAttributes) {
            var nodeAttr = nodeAttributes || {};
            if (this.isDefaultComponent) {
                this.attributes.forEach(function (attr) {
                    return attr.resolveDefaultValue(nodeAttr);
                });
            } else {
                var attrs = _NodeUtility2.default.getAttributes(this.element);
                for (var key in attrs) {
                    if (key === _Constants2.default.x_gr_id) {
                        continue;
                    }
                }
                this.attributes.forEach(function (attr) {
                    return attr.resolveDefaultValue(attrs);
                });
            }
        }
    }, {
        key: "dispose",
        value: function dispose() {
            this.node.removeComponent(this);
        }
    }, {
        key: "awake",
        value: function awake() {
            if (this._awaked) {
                return false;
            }
            this._awaked = true;
            var method = this["$$awake"];
            if (typeof method === "function") {
                method();
            }
            return true;
        }
    }, {
        key: "initialized",
        value: function initialized(info) {
            if (this._initializedInfo === info) {
                return;
            }
            this._initializedInfo = info;
            var method = this["$$initialized"];
            if (typeof method === "function") {
                method(info);
            }
        }
    }, {
        key: "__addAtribute",
        value: function __addAtribute(name, attribute) {
            console.warn(this.name.fqn + " is using '__addAtribute()'.\nthis method is deprecated because typo.\nplease use '__addAttribute() instead of.'");
            this.__addAttribute(name, attribute);
        }
        /**
         * Add additional attribute to this component.
         * @param {string}                name      [description]
         * @param {IAttributeDeclaration} attribute [description]
         */

    }, {
        key: "__addAttribute",
        value: function __addAttribute(name, attribute) {
            if (!attribute) {
                throw new Error("can not add attribute null or undefined.");
            }
            var attr = _Attribute2.default.generateAttributeForComponent(name, attribute, this);
            this.node.addAttribute(attr);
            if (this.isDefaultComponent) {
                attr.resolveDefaultValue(_NodeUtility2.default.getAttributes(this.node.element));
            } else {
                var attrs = _NodeUtility2.default.getAttributes(this.element);
                attr.resolveDefaultValue(attrs);
            }
            this._additionalAttributesNames.push(attr.name);
            return attr;
        }
    }, {
        key: "__removeAttributes",
        value: function __removeAttributes(name) {
            var _this2 = this;

            if (name) {
                var index = this._additionalAttributesNames.findIndex(function (id) {
                    return id.name === name;
                });
                if (index < 0) {
                    throw new Error("can not remove attributes :" + name);
                }
                var attrId = this._additionalAttributesNames[index];
                this.node.removeAttribute(this.attributes.get(attrId));
                this.attributes.delete(attrId);
                this._additionalAttributesNames.splice(index, 1);
            } else {
                var arr = this._additionalAttributesNames.concat();
                arr.forEach(function (id) {
                    _this2.__removeAttributes(id.name);
                });
            }
        }
    }, {
        key: "__bindAttributes",
        value: function __bindAttributes() {
            this.attributes.forEach(function (attr) {
                var name = attr.name.name;
                attr.boundTo(name);
            });
        }
    }, {
        key: "enabled",
        get: function get() {
            return this._enabled;
        },
        set: function set(val) {
            var _this3 = this;

            if (this._enabled === val) {
                return;
            }
            this._enabled = val;
            this._handlers.forEach(function (handler) {
                handler(_this3);
            });
        }
        /**
         * The dictionary which is shared in entire tree.
         * @return {NSDictionary<any>} [description]
         */

    }, {
        key: "companion",
        get: function get() {
            return this.node.companion;
        }
        /**
         * Tree interface for the tree this node is attached.
         * @return {GomlInterface} [description]
         */

    }, {
        key: "tree",
        get: function get() {
            return this.node.tree;
        }
    }, {
        key: "isActive",
        get: function get() {
            return this.enabled && !!this.node && this.node.isActive;
        }
    }]);

    return Component;
}(_IDObject3.default);

exports.default = Component;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ComponentDeclaration = __webpack_require__(17);

var _ComponentDeclaration2 = _interopRequireDefault(_ComponentDeclaration);

var _AttributeManager = __webpack_require__(20);

var _AttributeManager2 = _interopRequireDefault(_AttributeManager);

var _Utility = __webpack_require__(4);

var _Utility2 = _interopRequireDefault(_Utility);

var _Constants = __webpack_require__(5);

var _Constants2 = _interopRequireDefault(_Constants);

var _GomlParser = __webpack_require__(11);

var _GomlParser2 = _interopRequireDefault(_GomlParser);

var _XMLReader = __webpack_require__(8);

var _XMLReader2 = _interopRequireDefault(_XMLReader);

var _GrimoireInterface = __webpack_require__(0);

var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);

var _EEObject2 = __webpack_require__(12);

var _EEObject3 = _interopRequireDefault(_EEObject2);

var _NodeUtility = __webpack_require__(19);

var _NodeUtility2 = _interopRequireDefault(_NodeUtility);

var _NSDictionary = __webpack_require__(6);

var _NSDictionary2 = _interopRequireDefault(_NSDictionary);

var _Ensure = __webpack_require__(1);

var _Ensure2 = _interopRequireDefault(_Ensure);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GomlNode = function (_EEObject) {
    _inherits(GomlNode, _EEObject);

    /**
     * create new instance.
     * @param  {NodeDeclaration} recipe  作成するノードのDeclaration
     * @param  {Element}         element 対応するDomElement
     * @return {[type]}                  [description]
     */
    function GomlNode(recipe, element) {
        _classCallCheck(this, GomlNode);

        var _this = _possibleConstructorReturn(this, (GomlNode.__proto__ || Object.getPrototypeOf(GomlNode)).call(this));

        _this.children = [];
        _this._parent = null;
        _this._root = null;
        _this._tree = (0, _GrimoireInterface2.default)([_this]);
        _this._companion = new _NSDictionary2.default();
        _this._isActive = false;
        _this._messageCache = {};
        _this._deleted = false;
        _this._mounted = false;
        _this._enabled = true;
        _this._defaultValueResolved = false;
        _this._initializedInfo = null;
        if (!recipe) {
            throw new Error("recipe must not be null");
        }
        if (!recipe.resolvedDependency) {
            recipe.resolveDependency();
        }
        _this.nodeDeclaration = recipe;
        _this.element = element ? element : document.createElementNS(recipe.name.ns.qualifiedName, recipe.name.name);
        _this.componentsElement = document.createElement("COMPONENTS");
        _this._root = _this;
        _this._components = [];
        _this._attributeManager = new _AttributeManager2.default(recipe.name.name);
        _this.element.setAttribute(_Constants2.default.x_gr_id, _this.id);
        var defaultComponentNames = recipe.defaultComponentsActual;
        // instanciate default components
        defaultComponentNames.forEach(function (id) {
            _this.addComponent(id, null, true);
        });
        // register to GrimoireInterface.
        _GrimoireInterface2.default.nodeDictionary[_this.id] = _this;
        return _this;
    }
    /**
     * Get actual goml node from element of xml tree.
     * @param  {Element}  elem [description]
     * @return {GomlNode}      [description]
     */


    _createClass(GomlNode, [{
        key: "getChildrenByClass",

        /**
         * search from children node by class property.
         * return all nodes has same class as given.
         * @param  {string}     className [description]
         * @return {GomlNode[]}           [description]
         */
        value: function getChildrenByClass(className) {
            var nodes = this.element.getElementsByClassName(className);
            var array = new Array(nodes.length);
            for (var i = 0; i < nodes.length; i++) {
                array[i] = GomlNode.fromElement(nodes.item(i));
            }
            return array;
        }
        /**
         * Query children from current node.
         * @param  {string}   query [description]
         * @return GomlNode[]       [description]
         */

    }, {
        key: "queryChildren",
        value: function queryChildren(query) {
            var nodes = this.element.querySelectorAll(query);
            var array = new Array(nodes.length);
            for (var i = 0; i < nodes.length; i++) {
                array[i] = GomlNode.fromElement(nodes.item(i));
            }
            return array;
        }
        /**
         * search from children node by name property.
         * return all nodes has same name as given.
         * @param  {string}     nodeName [description]
         * @return {GomlNode[]}          [description]
         */

    }, {
        key: "getChildrenByNodeName",
        value: function getChildrenByNodeName(nodeName) {
            var nodes = this.element.getElementsByTagName(nodeName);
            var array = new Array(nodes.length);
            for (var i = 0; i < nodes.length; i++) {
                array[i] = GomlNode.fromElement(nodes.item(i));
            }
            return array;
        }
    }, {
        key: "remove",
        value: function remove() {
            this.children.forEach(function (c) {
                c.remove();
            });
            this._sendMessageForced("$$dispose");
            this.removeAllListeners();
            delete _GrimoireInterface2.default.nodeDictionary[this.id];
            if (this._parent) {
                this._parent.detachChild(this);
            } else {
                this.setMounted(false);
                if (this.element.parentNode) {
                    this.element.parentNode.removeChild(this.element);
                }
            }
            this._deleted = true;
        }
        /**
         * send message to this node.
         * invoke component method has same name as message if this node isActive.
         * @param  {string}  message [description]
         * @param  {any}     args    [description]
         * @return {boolean}         is this node active.
         */

    }, {
        key: "sendMessage",
        value: function sendMessage(message, args) {
            if (!this.isActive) {
                return false;
            }
            message = _Ensure2.default.tobeMessage(message);
            this._sendMessage(message, args);
            return true;
        }
    }, {
        key: "broadcastMessage",
        value: function broadcastMessage(arg1, arg2, arg3) {
            if (!this.enabled || !this.mounted) {
                return;
            }
            if (typeof arg1 === "number") {
                var range = arg1;
                var message = _Ensure2.default.tobeMessage(arg2);
                var args = arg3;
                this._broadcastMessage(message, args, range);
            } else {
                var _message = _Ensure2.default.tobeMessage(arg1);
                var _args = arg2;
                this._broadcastMessage(_message, _args, -1);
            }
        }
    }, {
        key: "append",
        value: function append(tag) {
            var _this2 = this;

            var elems = _XMLReader2.default.parseXML(tag);
            var ret = [];
            elems.forEach(function (elem) {
                var child = _GomlParser2.default.parse(elem);
                _this2.addChild(child);
                ret.push(child);
            });
            return ret;
        }
        /**
         * add new instance created by given name and attributes for this node as child.
         * @param {string |   NSIdentity} nodeName      [description]
         * @param {any    }} attributes   [description]
         */

    }, {
        key: "addChildByName",
        value: function addChildByName(nodeName, attributes) {
            var nodeDec = _GrimoireInterface2.default.nodeDeclarations.get(nodeName);
            var node = new GomlNode(nodeDec);
            if (attributes) {
                for (var key in attributes) {
                    node.setAttribute(key, attributes[key]);
                }
            }
            this.addChild(node);
            return node;
        }
        /**
         * Add child for this node.
         * @param {GomlNode} child            child node to add.
         * @param {number}   index            index for insert.なければ末尾に追加
         * @param {[type]}   elementSync=true trueのときはElementのツリーを同期させる。（Elementからパースするときはfalseにする）
         */

    }, {
        key: "addChild",
        value: function addChild(child, index) {
            var elementSync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            if (child._deleted) {
                throw new Error("deleted node never use.");
            }
            if (index != null && typeof index !== "number") {
                throw new Error("insert index should be number or null or undefined.");
            }
            // add process.
            var insertIndex = index == null ? this.children.length : index;
            this.children.splice(insertIndex, 0, child);
            child._parent = this;
            child._tree = this._tree;
            child._companion = this._companion;
            // sync html
            if (elementSync) {
                var referenceElement = this.element[_NodeUtility2.default.getNodeListIndexByElementIndex(this.element, insertIndex)];
                this.element.insertBefore(child.element, referenceElement);
            }
            // mounting
            if (this.mounted) {
                child.setMounted(true);
            }
            // send initializedInfo if needed
            if (this._initializedInfo) {
                child.sendInitializedMessage(this._initializedInfo);
            }
        }
    }, {
        key: "callRecursively",
        value: function callRecursively(func) {
            return this._callRecursively(func, function (n) {
                return n.children;
            });
        }
        /**
         * delete child node.
         * @param {GomlNode} child Target node to be inserted.
         */

    }, {
        key: "removeChild",
        value: function removeChild(child) {
            var node = this.detachChild(child);
            if (node) {
                node.remove();
            }
        }
        /**
         * detach given node from this node if target is child of this node.
         * return null if target is not child of this node.
         * @param  {GomlNode} child [description]
         * @return {GomlNode}       detached node.
         */

    }, {
        key: "detachChild",
        value: function detachChild(target) {
            // search child.
            var index = this.children.indexOf(target);
            if (index === -1) {
                return null;
            }
            target.setMounted(false);
            target._parent = null;
            this.children.splice(index, 1);
            // html sync
            this.element.removeChild(target.element);
            return target;
        }
        /**
         * detach this node from parent.
         */

    }, {
        key: "detach",
        value: function detach() {
            if (this.parent) {
                this.parent.detachChild(this);
            } else {
                throw new Error("root Node cannot be detached.");
            }
        }
    }, {
        key: "getAttribute",
        value: function getAttribute(attrName) {
            return this._attributeManager.getAttribute(attrName);
        }
    }, {
        key: "getAttributeRaw",
        value: function getAttributeRaw(attrName) {
            return this._attributeManager.getAttributeRaw(attrName);
        }
    }, {
        key: "setAttribute",
        value: function setAttribute(attrName, value) {
            var ignoireFreeze = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            var attrIds = this._attributeManager.guess(attrName);
            if (attrIds.length === 0) {
                this._attributeManager.setAttribute(typeof attrName === "string" ? attrName : attrName.fqn, value);
            }
            for (var i = 0; i < attrIds.length; i++) {
                var id = attrIds[i];
                if (!ignoireFreeze && this.isFreezeAttribute(id.fqn)) {
                    throw new Error("attribute " + id.fqn + " can not set. Attribute is frozen. ");
                }
                this._attributeManager.setAttribute(id.fqn, value);
            }
        }
        /**
         *  Internal use!
         *  Add new attribute. In most of case, users no need to call this method.
         *  Use __addAttribute in Component should be used instead.
         */

    }, {
        key: "addAttribute",
        value: function addAttribute(attr) {
            return this._attributeManager.addAttribute(attr);
        }
        /**
         * Internal use!
         * Update mounted status and emit events
         * @param {boolean} mounted Mounted status.
         */

    }, {
        key: "setMounted",
        value: function setMounted(mounted) {
            if (this._mounted === mounted) {
                return;
            }
            if (mounted) {
                this._mount();
                for (var i = 0; i < this.children.length; i++) {
                    this.children[i].setMounted(mounted);
                }
            } else {
                for (var _i = 0; _i < this.children.length; _i++) {
                    this.children[_i].setMounted(mounted);
                }
                this._sendMessageForced("unmount");
                this._isActive = false;
                this._tree = (0, _GrimoireInterface2.default)([this]);
                this._companion = new _NSDictionary2.default();
                this._mounted = mounted;
            }
        }
        /**
         * Get index of this node from parent.
         * @return {number} number of index.
         */

    }, {
        key: "removeAttribute",

        /**
         * remove attribute from this node.
         * @param {Attribute} attr [description]
         */
        value: function removeAttribute(attr) {
            return this._attributeManager.removeAttribute(attr);
        }
        /**
         * attach component to this node.
         * @param {Component} component [description]
         */

    }, {
        key: "addComponent",
        value: function addComponent(component, attributes) {
            var isDefaultComponent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            if (typeof component === "function") {
                var obj = _ComponentDeclaration2.default.ctorMap.find(function (o) {
                    return o.ctor === component;
                });
                if (obj) {
                    component = obj.name;
                } else {
                    throw new Error("constructor is not Component.");
                }
            }
            var declaration = _GrimoireInterface2.default.componentDeclarations.get(component);
            if (!declaration) {
                throw new Error("component '" + _Ensure2.default.tobeNSIdentity(component).fqn + "' is not defined.");
            }
            var instance = declaration.generateInstance();
            attributes = attributes || {};
            for (var key in attributes) {
                instance.setAttribute(key, attributes[key]);
            }
            this._addComponentDirectly(instance, isDefaultComponent);
            return instance;
        }
        /**
         * Internal use!
         * Should not operate by users or plugin developpers
         * @param {Component} component          [description]
         * @param {boolean}   isDefaultComponent [description]
         */

    }, {
        key: "_addComponentDirectly",
        value: function _addComponentDirectly(component, isDefaultComponent) {
            var _this3 = this;

            if (component.node || component.disposed) {
                throw new Error("component never change attached node");
            }
            // resetting cache
            this._messageCache = {}; // TODO: optimize.
            component.isDefaultComponent = !!isDefaultComponent;
            component.node = this;
            var referenceElement = this.componentsElement[_NodeUtility2.default.getNodeListIndexByElementIndex(this.componentsElement, this._components.length)];
            this.componentsElement.insertBefore(component.element, referenceElement);
            // bind this for message reciever.
            var propNames = [];
            var o = component;
            while (o) {
                propNames = propNames.concat(Object.getOwnPropertyNames(o));
                o = Object.getPrototypeOf(o);
            }
            propNames.filter(function (name) {
                return name.startsWith("$") && typeof component[name] === "function";
            }).forEach(function (method) {
                component["$" + method] = component[method].bind(component);
            });
            this._components.push(component);
            // attributes should be exposed on node
            component.attributes.forEach(function (p) {
                return _this3.addAttribute(p);
            });
            if (this._defaultValueResolved) {
                component.attributes.forEach(function (p) {
                    return p.resolveDefaultValue(_NodeUtility2.default.getAttributes(_this3.element));
                });
            }
            if (this._mounted) {
                component.resolveDefaultAttributes(null); // here must be optional component.should not use node element attributes.
                this._sendMessageForcedTo(component, "awake");
                this._sendMessageForcedTo(component, "mount");
            }
            // sending `initialized` message if needed.
            if (this._initializedInfo) {
                component.initialized(this._initializedInfo);
            }
        }
    }, {
        key: "removeComponent",
        value: function removeComponent(component) {
            var index = this._components.indexOf(component);
            if (index !== -1) {
                this._sendMessageForcedTo(component, "unmount");
                this._sendMessageForcedTo(component, "dispose");
                this.componentsElement.removeChild(component.element);
                this._components.splice(index, 1);
                this._messageCache = {}; // TODO:optimize.
                delete component.node;
                component.disposed = true;
                delete _GrimoireInterface2.default.componentDictionary[component.id];
                return true;
            }
            return false;
        }
    }, {
        key: "getComponents",
        value: function getComponents(filter) {
            if (!filter) {
                return this._components;
            } else {
                var ctor = _Ensure2.default.tobeComponentConstructor(filter);
                if (!ctor) {
                    return [];
                }
                return this._components.filter(function (c) {
                    return c instanceof ctor;
                });
            }
        }
        /**
         * search component by name from this node.
         * @param  {Name}  name [description]
         * @return {Component}   component found first.
         */

    }, {
        key: "getComponent",
        value: function getComponent(name) {
            // 事情により<T extends Component>とはできない。
            // これはref/Node/Componentによって参照されるのが外部ライブラリにおけるコンポーネントであるが、
            // src/Node/Componentがこのプロジェクトにおけるコンポーネントのため、別のコンポーネントとみなされ、型の制約をみたさなくなるからである。
            if (!name) {
                throw new Error("name must not be null or undefined");
            } else if (typeof name === "function") {
                return this._components.find(function (c) {
                    return c instanceof name;
                }) || null;
            } else {
                var ctor = _Ensure2.default.tobeComponentConstructor(name);
                if (!ctor) {
                    throw new Error("component " + name + " is not exist");
                }
                return this.getComponent(ctor);
            }
        }
    }, {
        key: "getComponentsInChildren",
        value: function getComponentsInChildren(name) {
            if (name == null) {
                throw new Error("getComponentsInChildren recieve null or undefined");
            }
            return this.callRecursively(function (node) {
                return node.getComponent(name);
            }).filter(function (c) {
                return !!c;
            });
        }
        /**
         * search component in ancectors of this node.
         * return component that found first.
         * return null if component not found.
         * @param  {[type]} name==null [description]
         * @return {[type]}            [description]
         */

    }, {
        key: "getComponentInAncestor",
        value: function getComponentInAncestor(name) {
            if (name == null) {
                throw new Error("getComponentInAncestor recieve null or undefined");
            }
            if (this.parent) {
                return this.parent._getComponentInAncestor(name);
            }
            return null;
        }
    }, {
        key: "sendInitializedMessage",
        value: function sendInitializedMessage(info) {
            if (this._initializedInfo === info) {
                return;
            }
            var components = this._components.concat(); // copy
            for (var i = 0; i < components.length; i++) {
                components[i].initialized(info);
            }
            this._initializedInfo = info;
            var children = this.children.concat();
            children.forEach(function (child) {
                child.sendInitializedMessage(info);
            });
        }
        /**
         * resolve default attribute value for all component.
         * すべてのコンポーネントの属性をエレメントかデフォルト値で初期化
         */

    }, {
        key: "resolveAttributesValue",
        value: function resolveAttributesValue() {
            this._defaultValueResolved = true;
            var attrs = _NodeUtility2.default.getAttributes(this.element);
            for (var key in attrs) {
                if (key === _Constants2.default.x_gr_id) {
                    continue;
                }
                if (this.isFreezeAttribute(key)) {
                    throw new Error("attribute " + key + " can not change from GOML. Attribute is frozen. ");
                }
            }
            this._components.forEach(function (component) {
                component.resolveDefaultAttributes(attrs);
            });
        }
    }, {
        key: "isFreezeAttribute",
        value: function isFreezeAttribute(attributeName) {
            return !!this.nodeDeclaration.freezeAttributes.toArray().find(function (name) {
                return attributeName === name.fqn;
            });
        }
    }, {
        key: "notifyActivenessUpdate",
        value: function notifyActivenessUpdate(activeness) {
            if (this.isActive !== activeness) {
                this._isActive = activeness;
                this.children.forEach(function (child) {
                    child.notifyActivenessUpdate(activeness && child.enabled);
                });
            }
        }
    }, {
        key: "watch",
        value: function watch(attrName, watcher) {
            var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            this._attributeManager.watch(attrName, watcher, immediate);
        }
    }, {
        key: "toString",
        value: function toString() {
            var name = this.name.fqn;
            var id = this.getAttribute("id");
            if (id !== null) {
                name += " id: " + id;
            }
            var classValue = this.getAttribute("id");
            if (classValue !== null) {
                name += " class: " + classValue;
            }
            return name;
        }
    }, {
        key: "_sendMessage",
        value: function _sendMessage(message, args) {
            if (this._messageCache[message] === void 0) {
                this._messageCache[message] = this._components.filter(function (c) {
                    return typeof c[message] === "function";
                });
            }
            var targetList = this._messageCache[message];
            for (var i = 0; i < targetList.length; i++) {
                if (targetList[i].disposed) {
                    continue;
                }
                this._sendMessageToComponent(targetList[i], message, args);
            }
        }
    }, {
        key: "_broadcastMessage",
        value: function _broadcastMessage(message, args, range) {
            // message is already ensured.-1 to unlimited range.
            if (!this.isActive) {
                return;
            }
            this._sendMessage(message, args);
            if (range === 0) {
                return;
            }
            var nextRange = range - 1;
            for (var i = 0; i < this.children.length; i++) {
                this.children[i]._broadcastMessage(message, args, nextRange);
            }
        }
    }, {
        key: "_getComponentInAncestor",
        value: function _getComponentInAncestor(name) {
            var ret = this.getComponent(name);
            if (ret) {
                return ret;
            }
            if (this.parent) {
                return this.parent._getComponentInAncestor(name);
            }
            return null;
        }
        /**
         * コンポーネントにメッセージを送る。送信したらバッファからは削除される.
         * @param  {Component} targetComponent 対象コンポーネント
         * @param  {string}    message         メッセージ
         * @param  {boolean}   forced          trueでコンポーネントのenableを無視して送信
         * @param  {boolean}   toBuffer        trueで送信失敗したらバッファに追加
         * @param  {any}       args            [description]
         * @return {boolean}                   送信したか
         */

    }, {
        key: "_sendMessageToComponent",
        value: function _sendMessageToComponent(targetComponent, message, args) {
            if (!targetComponent.enabled) {
                return false;
            }
            var method = targetComponent[message];
            if (typeof method === "function") {
                try {
                    method(args);
                } catch (e) {
                    var errorHandler = {
                        node: this,
                        component: targetComponent,
                        message: message,
                        handled: false,
                        error: e,
                        toString: function toString() {
                            return "\n\n[MESSAGE STACK] at " + targetComponent + "." + message.substr(1) + "\nerror:" + e + "\n" + e.stack + "\n\n";
                        }
                    };
                    this.emit("error", errorHandler);
                    if (!errorHandler.handled) {
                        _GrimoireInterface2.default.emit("error", errorHandler);
                        if (!errorHandler.handled) {
                            throw e;
                        }
                    }
                }
                return true;
            }
            return false;
        }
    }, {
        key: "_sendMessageForced",
        value: function _sendMessageForced(message) {
            var componentsBuffer = this._components.concat();
            for (var i = 0; i < componentsBuffer.length; i++) {
                var target = componentsBuffer[i];
                if (target.disposed) {
                    continue;
                }
                this._sendMessageForcedTo(target, message);
            }
        }
        /**
         * for system messages.
         * @param {Component} target  [description]
         * @param {string}    message [description]
         */

    }, {
        key: "_sendMessageForcedTo",
        value: function _sendMessageForcedTo(target, message) {
            message = _Ensure2.default.tobeMessage(message);
            var method = target[message];
            if (typeof method === "function") {
                method();
            }
        }
        /**
         * sending mount and awake message if needed to all components.
         */

    }, {
        key: "_mount",
        value: function _mount() {
            this._mounted = true;
            var componentsBuffer = this._components.concat();
            for (var i = 0; i < componentsBuffer.length; i++) {
                var target = componentsBuffer[i];
                if (target.disposed) {
                    continue;
                }
                target.awake();
                this._sendMessageForcedTo(target, "$$mount");
            }
        }
    }, {
        key: "_callRecursively",
        value: function _callRecursively(func, nextGenerator) {
            var val = func(this);
            var nexts = nextGenerator(this);
            var nextVals = nexts.map(function (c) {
                return c.callRecursively(func);
            });
            var list = _Utility2.default.flat(nextVals);
            list.unshift(val);
            return list;
        }
    }, {
        key: "name",

        /**
         * Tag name.
         */
        get: function get() {
            return this.nodeDeclaration.name;
        }
        /**
         * GomlInterface that this node is bound to.
         * throw exception if this node is not mounted.
         * @return {GomlInterface} [description]
         */

    }, {
        key: "tree",
        get: function get() {
            if (!this.mounted) {
                throw new Error("this node is not mounted");
            }
            return this._tree;
        }
        /**
         * indicate this node is already deleted.
         * if this node is deleted once, this node will not be mounted.
         * @return {boolean} [description]
         */

    }, {
        key: "deleted",
        get: function get() {
            return this._deleted;
        }
        /**
         * indicate this node is enabled in tree.
         * This value must be false when ancestor of this node is disabled.
         * @return {boolean} [description]
         */

    }, {
        key: "isActive",
        get: function get() {
            return this._isActive;
        }
        /**
         * indicate this node is enabled.
         * this node never recieve any message if this node is not enabled.
         * @return {boolean} [description]
         */

    }, {
        key: "enabled",
        get: function get() {
            return this._enabled;
        },
        set: function set(value) {
            this.setAttribute("enabled", value);
        }
        /**
         * the shared object by all nodes in tree.
         * @return {NSDictionary<any>} [description]
         */

    }, {
        key: "companion",
        get: function get() {
            return this._companion;
        }
        /**
         * parent node of this node.
         * if this node is root, return null.
         * @return {GomlNode} [description]
         */

    }, {
        key: "parent",
        get: function get() {
            return this._parent;
        }
        /**
         * return true if this node has some child nodes.
         * @return {boolean} [description]
         */

    }, {
        key: "hasChildren",
        get: function get() {
            return this.children.length > 0;
        }
        /**
         * indicate mounted status.
         * this property to be true when treeroot registered to GrimoireInterface.
         * to be false when this node detachd from the tree.
         * @return {boolean} Whether this node is mounted or not.
         */

    }, {
        key: "mounted",
        get: function get() {
            return this._mounted;
        }
    }, {
        key: "index",
        get: function get() {
            if (!this._parent) {
                return -1;
            }
            return this._parent.children.indexOf(this);
        }
    }], [{
        key: "fromElement",
        value: function fromElement(elem) {
            var id = elem.getAttribute(_Constants2.default.x_gr_id);
            if (id) {
                return _GrimoireInterface2.default.nodeDictionary[id];
            } else {
                throw new Error("element has not 'x-gr-id'");
            }
        }
    }]);

    return GomlNode;
}(_EEObject3.default);

exports.default = GomlNode;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GomlNode = __webpack_require__(10);

var _GomlNode2 = _interopRequireDefault(_GomlNode);

var _GrimoireInterface = __webpack_require__(0);

var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Parser of Goml to Node utilities.
 * This class do not store any nodes and goml properties.
 */
var GomlParser = function () {
    function GomlParser() {
        _classCallCheck(this, GomlParser);
    }

    _createClass(GomlParser, null, [{
        key: "parse",

        /**
         * Domをパースする
         * @param  {Element}           source    [description]
         * @param  {GomlNode}          parent    あればこのノードにaddChildされる
         * @return {GomlNode}                    ルートノード
         */
        value: function parse(source, parent) {
            var newNode = GomlParser._createNode(source);
            // Parse children recursively
            var children = source.childNodes;
            var childNodeElements = []; // for parse after .Components has resolved.
            if (children && children.length !== 0) {
                var removeTarget = [];
                for (var i = 0; i < children.length; i++) {
                    var child = children.item(i);
                    if (!GomlParser._isElement(child)) {
                        removeTarget.push(child);
                        continue;
                    }
                    if (this._isComponentsTag(child)) {
                        // parse as components
                        GomlParser._parseComponents(newNode, child);
                        removeTarget.push(child);
                    } else {
                        // parse as child node.
                        childNodeElements.push(child);
                    }
                }
                // remove unused elements
                for (var _i = 0; _i < removeTarget.length; _i++) {
                    source.removeChild(removeTarget[_i]);
                }
            }
            // generate tree
            if (parent) {
                parent.addChild(newNode, null, false);
            }
            childNodeElements.forEach(function (child) {
                GomlParser.parse(child, newNode);
            });
            return newNode;
        }
        /**
         * GomlNodeのインスタンス化。GrimoireInterfaceへの登録
         * @param  {HTMLElement}      elem         [description]
         * @param  {GomlConfigurator} configurator [description]
         * @return {GomlTreeNodeBase}              [description]
         */

    }, {
        key: "_createNode",
        value: function _createNode(elem) {
            var tagName = elem.localName;
            var recipe = _GrimoireInterface2.default.nodeDeclarations.get(elem);
            if (!recipe) {
                throw new Error("Tag \"" + tagName + "\" is not found.");
            }
            return new _GomlNode2.default(recipe, elem);
        }
        /**
         * .COMPONENTSのパース。
         * @param {GomlNode} node          アタッチされるコンポーネント
         * @param {Element}  componentsTag .COMPONENTSタグ
         */

    }, {
        key: "_parseComponents",
        value: function _parseComponents(node, componentsTag) {
            var componentNodes = componentsTag.childNodes;
            if (!componentNodes) {
                return;
            }
            for (var i = 0; i < componentNodes.length; i++) {
                var componentNode = componentNodes.item(i);
                if (!GomlParser._isElement(componentNode)) {
                    continue; // Skip if the node was not element
                }
                var componentDecl = _GrimoireInterface2.default.componentDeclarations.get(componentNode);
                if (!componentDecl) {
                    throw new Error("Component " + componentNode.tagName + " is not found.");
                }
                var component = componentDecl.generateInstance(componentNode);
                node._addComponentDirectly(component, false);
            }
        }
    }, {
        key: "_isElement",
        value: function _isElement(node) {
            return node.nodeType === Node.ELEMENT_NODE;
        }
    }, {
        key: "_isComponentsTag",
        value: function _isComponentsTag(element) {
            var regexToFindComponent = /\.COMPONENTS$/mi; // TODO might needs to fix
            return regexToFindComponent.test(element.nodeName);
        }
    }]);

    return GomlParser;
}();

exports.default = GomlParser;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _events = __webpack_require__(38);

var _IDObject2 = __webpack_require__(13);

var _IDObject3 = _interopRequireDefault(_IDObject2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * EventEmitterをmixinしたIDObject
 */
var EEObject = function (_IDObject) {
    _inherits(EEObject, _IDObject);

    function EEObject() {
        _classCallCheck(this, EEObject);

        return _possibleConstructorReturn(this, (EEObject.__proto__ || Object.getPrototypeOf(EEObject)).call(this));
    }

    return EEObject;
}(_IDObject3.default);

function applyMixins(derivedCtor, baseCtors) {
    baseCtors.forEach(function (baseCtor) {
        Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
            derivedCtor.prototype[name] = baseCtor.prototype[name];
        });
    });
}
applyMixins(EEObject, [_events.EventEmitter]);
exports.default = EEObject;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Most based object for any Grimoire.js related classes.
 * @type {[type]}
 */
var IDObject = function () {
    _createClass(IDObject, null, [{
        key: "getUniqueRandom",

        /**
         * Generate random string
         * @param  {number} length length of random string
         * @return {string}        generated string
         */
        value: function getUniqueRandom(length) {
            return Math.random().toString(36).slice(-length);
        }
    }]);

    function IDObject() {
        _classCallCheck(this, IDObject);

        this.id = IDObject.getUniqueRandom(10);
    }
    /**
     * Obtain stringfied object.
     * If this method was not overridden, this method return class name.
     * @return {string} stringfied object
     */


    _createClass(IDObject, [{
        key: "toString",
        value: function toString() {
            return this.getTypeName();
        }
        /**
         * Obtain class name
         * @return {string} Class name of the instance.
         */

    }, {
        key: "getTypeName",
        value: function getTypeName() {
            var funcNameRegex = /function (.{1,})\(/;
            var result = funcNameRegex.exec(this.constructor.toString());
            return result && result.length > 1 ? result[1] : "";
        }
    }]);

    return IDObject;
}();

exports.default = IDObject;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Constants = __webpack_require__(5);

var _Constants2 = _interopRequireDefault(_Constants);

var _GrimoireInterface = __webpack_require__(0);

var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);

var _NodeInterface = __webpack_require__(15);

var _NodeInterface2 = _interopRequireDefault(_NodeInterface);

var _GomlNode = __webpack_require__(10);

var _GomlNode2 = _interopRequireDefault(_GomlNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides interfaces to treat whole goml tree for each.
 */
var GomlInterface = function () {
    function GomlInterface(rootNodes) {
        _classCallCheck(this, GomlInterface);

        this.rootNodes = rootNodes;
    }

    _createClass(GomlInterface, [{
        key: "getNodeById",
        value: function getNodeById(id) {
            return this.rootNodes.map(function (root) {
                return _GomlNode2.default.fromElement(root.element.ownerDocument.getElementById(id));
            });
        }
    }, {
        key: "queryFunc",
        value: function queryFunc(query) {
            return new _NodeInterface2.default(this._queryNodes(query));
        }
    }, {
        key: "_queryNodes",
        value: function _queryNodes(query) {
            return this.rootNodes.map(function (root) {
                var nodelist = root.element.ownerDocument.querySelectorAll(query);
                var nodes = [];
                for (var i = 0; i < nodelist.length; i++) {
                    var id = nodelist.item(i).getAttribute(_Constants2.default.x_gr_id);
                    if (id) {
                        var node = _GrimoireInterface2.default.nodeDictionary[id];
                        if (node) {
                            nodes.push(node);
                        }
                    }
                }
                return nodes;
            });
        }
    }]);

    return GomlInterface;
}();

exports.default = GomlInterface;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Utility = __webpack_require__(4);

var _Utility2 = _interopRequireDefault(_Utility);

var _XMLReader = __webpack_require__(8);

var _XMLReader2 = _interopRequireDefault(_XMLReader);

var _GomlParser = __webpack_require__(11);

var _GomlParser2 = _interopRequireDefault(_GomlParser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * interface for operate multicast nodes.
 */
var NodeInterface = function () {
    function NodeInterface(nodes) {
        _classCallCheck(this, NodeInterface);

        if (!nodes) {
            throw new Error("nodes is null");
        }
        this.nodes = nodes;
    }
    /**
     * get count of targeted nodes.
     * @return {number} [description]
     */


    _createClass(NodeInterface, [{
        key: "get",
        value: function get(i1, i2) {
            if (i1 === void 0) {
                var first = this.first();
                if (!first) {
                    throw new Error("this NodeInterface is empty.");
                } else {
                    return first;
                }
            } else if (i2 === void 0) {
                if (this.count <= i1) {
                    throw new Error("index out of range.");
                }
                var c = i1;
                return this.find(function () {
                    if (c === 0) {
                        return true;
                    }
                    c--;
                    return false;
                });
            } else {
                if (this.nodes.length <= i1 || this.nodes[i1].length <= i2) {
                    throw new Error("index out of range.");
                } else {
                    return this.nodes[i1][i2];
                }
            }
        }
    }, {
        key: "getAttribute",
        value: function getAttribute(attrName) {
            var first = this.first();
            if (!first) {
                throw new Error("this NodeInterface is empty.");
            }
            return first.getAttribute(attrName);
        }
    }, {
        key: "setAttribute",
        value: function setAttribute(attrName, value) {
            this.forEach(function (node) {
                node.setAttribute(attrName, value, false);
            });
        }
        /**
         * 対象ノードにイベントリスナを追加します。
         * @param {string}   eventName [description]
         * @param {Function} listener  [description]
         */

    }, {
        key: "on",
        value: function on(eventName, listener) {
            this.forEach(function (node) {
                node.on(eventName, listener);
            });
            return this;
        }
        /**
         * 対象ノードに指定したイベントリスナが登録されていれば削除します
         * @param {string}   eventName [description]
         * @param {Function} listener  [description]
         */

    }, {
        key: "off",
        value: function off(eventName, listener) {
            this.forEach(function (node) {
                node.removeListener(eventName, listener);
            });
            return this;
        }
        /**
         * このノードインタフェースが対象とするノードそれぞれに、
         * タグで指定したノードを子要素として追加します。
         * @param {string} tag [description]
         */

    }, {
        key: "append",
        value: function append(tag) {
            this.forEach(function (node) {
                var elems = _XMLReader2.default.parseXML(tag);
                elems.forEach(function (elem) {
                    var child = _GomlParser2.default.parse(elem);
                    node.addChild(child);
                });
            });
            return this;
        }
        /**
         * このノードインタフェースが対象とするノードをツリーから削除します。s
         * @param {GomlNode} child [description]
         */

    }, {
        key: "remove",
        value: function remove() {
            this.forEach(function (node) {
                node.remove();
            });
            return this;
        }
        /**
         * execute provided function once for each element targeted by this interface.
         * @param  {number} callback Function to execute for each element, taking three arguments:
         * abort the iteration if function returns True.
         * @return {[type]}          [description]
         */

    }, {
        key: "forEach",
        value: function forEach(callback) {
            for (var i = 0; i < this.nodes.length; i++) {
                var array = this.nodes[i];
                var gomlIndex = i;
                for (var j = 0; j < array.length; j++) {
                    var node = array[j];
                    var nodeIndex = j;
                    var ih = { abort: false };
                    callback(node, gomlIndex, nodeIndex, ih);
                    if (ih.abort) {
                        return this;
                    }
                }
            }
            return this;
        }
    }, {
        key: "map",
        value: function map(func) {
            return this.nodes.map(function (array, gomlIndex) {
                return array.map(function (node, nodeIndex) {
                    return func(node, gomlIndex, nodeIndex);
                });
            });
        }
    }, {
        key: "find",
        value: function find(predicate) {
            var nodes = this.nodes;
            for (var i = 0; i < nodes.length; i++) {
                var array = nodes[i];
                for (var j = 0; j < array.length; j++) {
                    var node = array[j];
                    if (predicate(node, i, j)) {
                        return node;
                    }
                }
            }
            return null;
        }
    }, {
        key: "watch",
        value: function watch(attrName, watcher) {
            var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            this.forEach(function (node) {
                node.watch(attrName, watcher, immediate);
            });
        }
        /**
         * このノードインタフェースが対象とするノードを有効、または無効にします。
         * @param {boolean} enable [description]
         */

    }, {
        key: "setEnable",
        value: function setEnable(enable) {
            this.forEach(function (node) {
                node.enabled = !!enable;
            });
            return this;
        }
        /**
         * このノードインタフェースが対象とするノードのそれぞれの子ノードを対象とする、
         * 新しいノードインタフェースを取得します。
         * @return {NodeInterface} [description]
         */

    }, {
        key: "children",
        value: function children() {
            var children = this.nodes.map(function (nodes) {
                return _Utility2.default.flatMap(nodes, function (node) {
                    return node.children;
                });
            });
            return new NodeInterface(children);
        }
        /**
         * 対象ノードにコンポーネントをアタッチします。
         * @param {Component} component [description]
         */

    }, {
        key: "addComponent",
        value: function addComponent(componentId) {
            var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            this.forEach(function (node) {
                node.addComponent(componentId, attributes);
            });
            return this;
        }
        /**
         * 最初の対象ノードを取得する
         * ひとつもなければnull
         * @return {GomlNode} [description]
         */

    }, {
        key: "first",
        value: function first() {
            return this.find(function () {
                return true;
            });
        }
        /**
         * 対象となる唯一のノードを取得する。
         * 対象が存在しない、あるいは複数存在するときは例外を投げる。
         * @return {GomlNode} [description]
         */

    }, {
        key: "single",
        value: function single() {
            if (this.count !== 1) {
                throw new Error("this nodeInterface is not single.");
            }
            var first = this.first();
            if (!first) {
                throw new Error("this nodeInterface is not single,but is empty.");
            }
            return first;
        }
    }, {
        key: "filter",
        value: function filter(predicate) {
            var newNodes = [];
            for (var i = 0; i < this.nodes.length; i++) {
                var goml = this.nodes[i];
                newNodes.push([]);
                for (var j = 0; j < goml.length; j++) {
                    var node = goml[j];
                    if (predicate(node, i, j)) {
                        newNodes[i].push(node);
                    }
                }
            }
            return new NodeInterface(newNodes);
        }
    }, {
        key: "toArray",
        value: function toArray() {
            return _Utility2.default.flat(this.nodes);
        }
    }, {
        key: "addChildByName",
        value: function addChildByName(nodeName, attributes) {
            return new NodeInterface(this.map(function (node) {
                return node.addChildByName(nodeName, attributes);
            }));
        }
    }, {
        key: "sendMessage",
        value: function sendMessage(message, args) {
            this.forEach(function (node) {
                node.sendMessage(message, args);
            });
        }
    }, {
        key: "broadcastMessage",
        value: function broadcastMessage(arg1, arg2, arg3) {
            if (typeof arg1 === "number") {
                this.forEach(function (node) {
                    node.broadcastMessage(arg1, arg2, arg3);
                });
            } else {
                this.forEach(function (node) {
                    node.broadcastMessage(arg2, arg3);
                });
            }
        }
    }, {
        key: "count",
        get: function get() {
            if (this.nodes.length === 0) {
                return 0;
            }
            var counts = this.nodes.map(function (nodes) {
                return nodes.length;
            });
            return _Utility2.default.sum(counts);
        }
    }, {
        key: "isEmpty",
        get: function get() {
            return this.count === 0;
        }
    }]);

    return NodeInterface;
}();

exports.default = NodeInterface;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Ensure = __webpack_require__(1);

var _Ensure2 = _interopRequireDefault(_Ensure);

var _NSIdentity = __webpack_require__(2);

var _NSIdentity2 = _interopRequireDefault(_NSIdentity);

var _IdResolver = __webpack_require__(3);

var _IdResolver2 = _interopRequireDefault(_IdResolver);

var _GrimoireInterface = __webpack_require__(0);

var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Manage a attribute attached to components.
 */
var Attribute = function () {
    function Attribute() {
        _classCallCheck(this, Attribute);

        this.convertContext = {};
        /**
         * List of functions that is listening changing values.
         */
        this._observers = [];
        this._ignoireActivenessObservers = [];
    }
    /**
     * Goml tree interface which contains the component this attribute bound to.
     * @return {GomlInterface} [description]
     */


    _createClass(Attribute, [{
        key: "watch",

        /**
         * Add event handler to observe changing this attribute.
         * @param  {(attr: Attribute) => void} handler handler the handler you want to add.
         * @param {boolean = false} callFirst whether that handler should be called first time.
         */
        value: function watch(watcher) {
            var immedateCalls = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var ignoireActiveness = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            if (ignoireActiveness) {
                this._ignoireActivenessObservers.push(watcher);
            } else {
                this._observers.push(watcher);
            }
            if (immedateCalls) {
                watcher(this.Value, void 0, this);
            }
        }
        /**
         * Remove event handler you added.
         * @param  {Attribute} handler [description]
         * @return {[type]}            [description]
         */

    }, {
        key: "unwatch",
        value: function unwatch(target) {
            var index = this._observers.findIndex(function (f) {
                return f === target;
            });
            if (index >= 0) {
                this._observers.splice(index, 1);
                return;
            }
            index = this._ignoireActivenessObservers.findIndex(function (f) {
                return f === target;
            });
            if (index >= 0) {
                this._ignoireActivenessObservers.splice(index, 1);
                return;
            }
        }
        /**
         * Bind converted value to specified field.
         * When target object was not specified, field of owner component would be assigned.
         * @param {string} variableName [description]
         * @param {any} targetObject [description]
         */

    }, {
        key: "boundTo",
        value: function boundTo(variableName) {
            var _this = this;

            var targetObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.component;

            if (targetObject[variableName]) {
                console.warn("component field " + variableName + " is already defined.");
            }
            if (this.converter["lazy"]) {
                Object.defineProperty(targetObject, variableName, {
                    get: function get() {
                        return _this.Value;
                    },
                    set: function set(val) {
                        _this.Value = val;
                    },
                    enumerable: true,
                    configurable: true
                });
            } else {
                var backing = void 0;
                this.watch(function (v) {
                    backing = v;
                }, true);
                Object.defineProperty(targetObject, variableName, {
                    get: function get() {
                        return backing;
                    },
                    set: function set(val) {
                        _this.Value = val;
                    },
                    enumerable: true,
                    configurable: true
                });
            }
        }
        /**
         * Apply default value to attribute from DOM values.
         * @param {string }} domValues [description]
         */

    }, {
        key: "resolveDefaultValue",
        value: function resolveDefaultValue(domValues) {
            if (this._value !== void 0) {
                return;
            }
            // resolve by goml value
            var resolver = new _IdResolver2.default();
            resolver.add(this.name);
            var tagAttrKey = void 0;
            for (var key in domValues) {
                if (_Ensure2.default.checkFQNString(key)) {
                    if (this.name.fqn === key.substring(1)) {
                        this.Value = domValues[key];
                        return;
                    }
                    continue;
                }
                var get = resolver.get(key);
                if (get.length > 0) {
                    if (tagAttrKey === void 0) {
                        tagAttrKey = key;
                    } else {
                        throw new Error("tag attribute is ambiguous for " + this.name.fqn + ". It has the following possibilities " + tagAttrKey + " " + get[0]);
                    }
                }
            }
            if (tagAttrKey !== void 0) {
                this.Value = domValues[tagAttrKey];
                return;
            }
            // resolve by node defaults.
            var nodeDefaultValue = this.component.node.nodeDeclaration.defaultAttributesActual.hasMatchingValue(this.name);
            if (nodeDefaultValue !== void 0) {
                this.Value = nodeDefaultValue; // Node指定値で解決
                return;
            }
            // resolve by component defaults.
            this.Value = this.declaration.default;
        }
    }, {
        key: "_valuate",
        value: function _valuate(raw) {
            var v = this.converter.convert(raw, this);
            if (v === void 0) {
                throw new Error("attribute " + this.name.name + " value can not be convert from " + this._value);
            }
            this._lastValuete = v;
            return v;
        }
    }, {
        key: "_notifyChange",
        value: function _notifyChange(newValue) {
            var _this2 = this;

            if (!this.component.isActive) {
                if (this._ignoireActivenessObservers.length === 0) {
                    return;
                }
                var _lastvalue = this._lastValuete;
                var _convertedNewValue = this._valuate(newValue);
                this._ignoireActivenessObservers.forEach(function (watcher) {
                    watcher(_convertedNewValue, _lastvalue, _this2);
                });
            }
            var lastvalue = this._lastValuete;
            var convertedNewValue = this._valuate(newValue);
            this._observers.forEach(function (watcher) {
                watcher(convertedNewValue, lastvalue, _this2);
            });
            this._ignoireActivenessObservers.forEach(function (watcher) {
                watcher(convertedNewValue, lastvalue, _this2);
            });
        }
    }, {
        key: "tree",
        get: function get() {
            return this.component.tree;
        }
        /**
         * Companion map which is bounding to the component this attribute bound to.
         * @return {NSDictionary<any>} [description]
         */

    }, {
        key: "companion",
        get: function get() {
            return this.component.companion;
        }
        /**
         * Get a value with specified type.
         * @return {any} value with specified type.
         */

    }, {
        key: "Value",
        get: function get() {
            if (this._value === void 0) {
                var node = this.component.node;
                throw new Error("attribute " + this.name.name + " value is undefined in " + (node ? node.name.name : "undefined"));
            }
            return this._valuate(this._value);
        }
        /**
         * Set a value with any type.
         * @param {any} val Value with string or specified type.
         */
        ,
        set: function set(val) {
            if (this._value === val) {
                return;
            }
            this._value = val;
            this._notifyChange(val);
        }
    }], [{
        key: "convert",
        value: function convert(converter, self, val) {
            var cname = _Ensure2.default.tobeNSIdentity(converter);
            var conv = _GrimoireInterface2.default.converters.get(cname);
            if (!conv) {
                throw new Error("converter " + cname.name + " is not defined.");
            }
            return conv.convert(val, self);
        }
        /**
         * Construct a new attribute with name of key and any value with specified type. If constant flag is true, This attribute will be immutable.
         * If converter is not served, string converter will be set as default.
         * @param {string}        key       Key of this attribute.
         * @param {any}           value     Value of this attribute.
         * @param {ConverterBase} converter Converter of this attribute.
         * @param {boolean}       constant  Whether this attribute is immutable or not. False as default.
         */

    }, {
        key: "generateAttributeForComponent",
        value: function generateAttributeForComponent(name, declaration, component) {
            var attr = new Attribute();
            attr.name = _NSIdentity2.default.fromFQN(component.name.fqn + "." + name);
            attr.component = component;
            attr.declaration = declaration;
            var converterName = _Ensure2.default.tobeNSIdentity(declaration.converter);
            attr.converter = _GrimoireInterface2.default.converters.get(converterName);
            if (attr.converter === void 0) {
                // When the specified converter was not found
                throw new Error("Specified converter " + converterName.name + " was not found from registered converters.\n Component: " + attr.component.name.fqn + "\n Attribute: " + attr.name.name);
            }
            attr.component.attributes.set(attr.name, attr);
            attr.converter.verify(attr);
            return attr;
        }
    }]);

    return Attribute;
}();

exports.default = Attribute;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Constants = __webpack_require__(5);

var _Constants2 = _interopRequireDefault(_Constants);

var _GrimoireInterface = __webpack_require__(0);

var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);

var _Attribute = __webpack_require__(16);

var _Attribute2 = _interopRequireDefault(_Attribute);

var _NSDictionary = __webpack_require__(6);

var _NSDictionary2 = _interopRequireDefault(_NSDictionary);

var _NSIdentity = __webpack_require__(2);

var _NSIdentity2 = _interopRequireDefault(_NSIdentity);

var _IdResolver = __webpack_require__(3);

var _IdResolver2 = _interopRequireDefault(_IdResolver);

var _Component = __webpack_require__(9);

var _Component2 = _interopRequireDefault(_Component);

var _Ensure = __webpack_require__(1);

var _Ensure2 = _interopRequireDefault(_Ensure);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ComponentDeclaration = function () {
    function ComponentDeclaration(name, attributes, _ctorOrObj, _super) {
        _classCallCheck(this, ComponentDeclaration);

        this.name = name;
        this.attributes = attributes;
        this._ctorOrObj = _ctorOrObj;
        this.idResolver = new _IdResolver2.default();
        this._resolvedDependency = false;
        if (!_super) {
            this.ctor = this._ensureTobeComponentConstructor(this.name, _ctorOrObj);
            ComponentDeclaration.ctorMap.push({ ctor: this.ctor, name: name });
            for (var key in this.attributes) {
                this.idResolver.add(_NSIdentity2.default.fromFQN(this.name.fqn + "." + key));
            }
            this._resolvedDependency = true;
            return;
        }
        if (_super instanceof _NSIdentity2.default || typeof _super === "string") {
            this._super = _super;
        } else {
            this.superComponent = _super;
        }
    }

    _createClass(ComponentDeclaration, [{
        key: "generateInstance",
        value: function generateInstance(componentElement) {
            if (!this.resolvedDependency) {
                this.resolveDependency();
            }
            componentElement = componentElement ? componentElement : document.createElementNS(this.name.ns.qualifiedName, this.name.name);
            var component = new this.ctor();
            componentElement.setAttribute(_Constants2.default.x_gr_id, component.id);
            _GrimoireInterface2.default.componentDictionary[component.id] = component;
            component.name = this.name;
            component.element = componentElement;
            component.attributes = new _NSDictionary2.default();
            for (var key in this.attributes) {
                _Attribute2.default.generateAttributeForComponent(key, this.attributes[key], component);
            }
            return component;
        }
    }, {
        key: "resolveDependency",
        value: function resolveDependency() {
            if (this._resolvedDependency) {
                return false;
            }
            if (!this._super && !this.superComponent) {
                return this._resolvedDependency = true;
            }
            var id = this._super ? _Ensure2.default.tobeNSIdentity(this._super) : this.superComponent["name"];
            var dec = _GrimoireInterface2.default.componentDeclarations.get(id);
            dec.resolveDependency();
            var attr = {};
            for (var key in dec.attributes) {
                attr[key] = dec.attributes[key];
                this.idResolver.add(_NSIdentity2.default.fromFQN(this.name.fqn + "." + key));
            }
            for (var _key in this.attributes) {
                attr[_key] = this.attributes[_key];
                this.idResolver.add(_NSIdentity2.default.fromFQN(this.name.fqn + "." + _key));
            }
            this.attributes = attr;
            this.superComponent = dec.ctor;
            this.ctor = this._ensureTobeComponentConstructor(this.name, this._ctorOrObj, dec.ctor);
            return this._resolvedDependency = true;
        }
        /**
         * Ensure the given object or constructor to be an constructor inherits Component;
         * @param  {Object | (new ()=> Component} obj [The variable need to be ensured.]
         * @return {[type]}      [The constructor inherits Component]
         */

    }, {
        key: "_ensureTobeComponentConstructor",
        value: function _ensureTobeComponentConstructor(id, obj, baseConstructor) {
            if (typeof obj === "function") {
                if (baseConstructor) {
                    obj.prototype = Object.create(baseConstructor.prototype, { value: { constructor: obj } });
                }
                if (!(obj.prototype instanceof _Component2.default) && obj !== _Component2.default) {
                    throw new Error("Component constructor must extends Component class.");
                }
                obj.prototype["name"] = id;
                return obj;
            } else {
                if (baseConstructor && !(baseConstructor.prototype instanceof _Component2.default) && baseConstructor !== _Component2.default) {
                    throw new Error("Base component comstructor must extends Compoent class.");
                }
                var ctor = baseConstructor || _Component2.default;
                var newCtor = function newCtor() {
                    ctor.call(this);
                };
                obj.__proto__ = ctor.prototype;
                newCtor.prototype = obj;
                Object.defineProperty(newCtor.prototype, "attributes", {
                    value: this.attributes
                });
                newCtor.prototype["name"] = id;
                return newCtor;
            }
        }
    }, {
        key: "resolvedDependency",
        get: function get() {
            return this._resolvedDependency;
        }
    }]);

    return ComponentDeclaration;
}();

exports.default = ComponentDeclaration;

ComponentDeclaration.ctorMap = [];

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GrimoireInterface = __webpack_require__(0);

var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);

var _GomlParser = __webpack_require__(11);

var _GomlParser2 = _interopRequireDefault(_GomlParser);

var _XMLReader = __webpack_require__(8);

var _XMLReader2 = _interopRequireDefault(_XMLReader);

var _XMLHttpRequestAsync = __webpack_require__(22);

var _XMLHttpRequestAsync2 = _interopRequireDefault(_XMLHttpRequestAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

/**
 * Provides the features to fetch Goml source.
 */
var GomlLoader = function () {
    function GomlLoader() {
        _classCallCheck(this, GomlLoader);
    }

    _createClass(GomlLoader, null, [{
        key: "loadFromScriptTag",

        /**
         * Obtain the Goml source from specified tag.
         * @param  {HTMLScriptElement} scriptTag [the script tag to load]
         * @return {Promise<void>}               [the promise to wait for loading]
         */
        value: function loadFromScriptTag(scriptTag) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                var srcAttr, source, req, doc, rootNode;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                srcAttr = scriptTag.getAttribute("src");
                                source = void 0;

                                if (!srcAttr) {
                                    _context.next = 10;
                                    break;
                                }

                                // ignore text element
                                req = new XMLHttpRequest();

                                req.open("GET", srcAttr);
                                _context.next = 7;
                                return _XMLHttpRequestAsync2.default.send(req);

                            case 7:
                                source = req.responseText;
                                _context.next = 11;
                                break;

                            case 10:
                                source = scriptTag.text;

                            case 11:
                                doc = _XMLReader2.default.parseXML(source, "GOML");
                                rootNode = _GomlParser2.default.parse(doc[0]);

                                _GrimoireInterface2.default.addRootNode(scriptTag, rootNode);

                            case 14:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
        /**
         * Load from the script tags which will be found with specified query.
         * @param  {string}          query [the query to find script tag]
         * @return {Promise<void[]>}       [the promise to wait for all goml loading]
         */

    }, {
        key: "loadFromQuery",
        value: function loadFromQuery(query) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee2() {
                var tags, pArray, elements, i, element;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                tags = document.querySelectorAll(query);
                                pArray = [];
                                elements = [];

                                for (i = 0; i < tags.length; i++) {
                                    element = tags.item(i);

                                    elements.push(element);
                                    pArray[i] = GomlLoader.loadFromScriptTag(element);
                                }
                                if (pArray.length === 0 && _GrimoireInterface2.default.debug) {
                                    console.warn("There was no goml file detected. Have you specified `type='text/goml'` to the script tag?");
                                }
                                _context2.next = 7;
                                return Promise.all(pArray);

                            case 7:
                                GomlLoader.initializedEventHandlers.forEach(function (handler) {
                                    handler(elements);
                                });

                            case 8:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));
        }
        /**
         * Load all Goml sources contained in HTML.
         * @return {Promise<void>} [the promise to wait for all goml loading]
         */

    }, {
        key: "loadForPage",
        value: function loadForPage() {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee3() {
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return GomlLoader.loadFromQuery('script[type="text/goml"]');

                            case 2:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));
        }
    }]);

    return GomlLoader;
}();

GomlLoader.initializedEventHandlers = [];
exports.default = GomlLoader;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NodeUtility = function () {
    function NodeUtility() {
        _classCallCheck(this, NodeUtility);
    }

    _createClass(NodeUtility, null, [{
        key: "getNodeListIndexByElementIndex",

        /**
         * Get index of NodeList converted from index in Element
         * @param  {HTMLElement} targetElement Parent element of search target elements
         * @param  {number}      elementIndex  Index in element
         * @return {number}                    Index in NodeList
         */
        value: function getNodeListIndexByElementIndex(targetElement, elementIndex) {
            var nodeArray = Array.prototype.slice.call(targetElement.childNodes);
            var elementArray = nodeArray.filter(function (v) {
                return v.nodeType === 1;
            });
            elementIndex = elementIndex < 0 ? elementArray.length + elementIndex : elementIndex;
            return nodeArray.indexOf(elementArray[elementIndex]);
        }
    }, {
        key: "getAttributes",
        value: function getAttributes(element) {
            var attributes = {};
            var domAttr = element.attributes;
            for (var i = 0; i < domAttr.length; i++) {
                var attrNode = domAttr.item(i);
                if (attrNode.name.startsWith("xmlns")) {
                    continue;
                }
                var name = attrNode.namespaceURI ? attrNode.namespaceURI + "." + attrNode.localName : attrNode.localName;
                attributes[name] = attrNode.value;
            }
            return attributes;
        }
    }]);

    return NodeUtility;
}();

exports.default = NodeUtility;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Utility = __webpack_require__(4);

var _Utility2 = _interopRequireDefault(_Utility);

var _IdResolver = __webpack_require__(3);

var _IdResolver2 = _interopRequireDefault(_IdResolver);

var _Namespace = __webpack_require__(7);

var _Namespace2 = _interopRequireDefault(_Namespace);

var _NSIdentity = __webpack_require__(2);

var _NSIdentity2 = _interopRequireDefault(_NSIdentity);

var _Ensure = __webpack_require__(1);

var _Ensure2 = _interopRequireDefault(_Ensure);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AttributeBuffer = function () {
    function AttributeBuffer() {
        _classCallCheck(this, AttributeBuffer);

        this._fqnList = [];
    }

    _createClass(AttributeBuffer, [{
        key: "add",
        value: function add(fqn, val) {
            for (var i = 0; i < this._fqnList.length; i++) {
                var c = this._fqnList[i];
                if (c.fqn === fqn) {
                    c.val = val;
                    this._fqnList.splice(i, 1);
                    this._fqnList.push(c);
                    return;
                }
            }
            var obj = { fqn: fqn, val: val };
            this._fqnList.push(obj);
        }
    }, {
        key: "resolve",
        value: function resolve(fqn, remove) {
            var guess = this.guess(fqn, remove);
            return guess.length === 0 ? void 0 : guess[guess.length - 1];
        }
        /**
         * get list of value that matchs given fqn.
         * @param  {string}         fqn          [description]
         * @param  {[type]}         remove=false to remove match buffers.
         * @return {NameValPair<T>}              [description]
         */

    }, {
        key: "guess",
        value: function guess(fqn, remove) {
            var resolver = new _IdResolver2.default();
            resolver.add(fqn.split("."));
            var ret = [];
            for (var i = 0; i < this._fqnList.length; i++) {
                var name = this._fqnList[i].fqn;
                var r = resolver.get(name);
                if (r.length > 0) {
                    ret.push(this._fqnList[i].val);
                    if (remove) {
                        this._fqnList.splice(i, 1);
                        i--;
                    }
                }
            }
            return ret;
        }
    }]);

    return AttributeBuffer;
}();
/**
 * internal use!
 * @return {[type]} [description]
 */


var AttributeManager = function () {
    function AttributeManager(tag) {
        _classCallCheck(this, AttributeManager);

        this.tag = tag;
        this._attributesFQNMap = {};
        this._idResolver = new _IdResolver2.default();
        this._attrBuffer = new AttributeBuffer();
        this._watchBuffer = new AttributeBuffer();
    }

    _createClass(AttributeManager, [{
        key: "addAttribute",
        value: function addAttribute(attr) {
            var fqn = attr.name.fqn;
            if (this._idResolver.has(fqn)) {
                _Utility2.default.w("attribute " + attr.name + " is already exist in " + this.tag);
            }
            if (this._attributesFQNMap[fqn] === void 0) {
                this._attributesFQNMap[fqn] = [];
            }
            this._attributesFQNMap[fqn].push(attr);
            this._idResolver.add(attr.name);
            // check buffer value.
            var attrBuf = this._attrBuffer.resolve(attr.name.fqn, true);
            if (attrBuf !== void 0) {
                attr.Value = attrBuf;
            }
            var watchBuf = this._watchBuffer.guess(attr.name.fqn, true);
            for (var i = 0; i < watchBuf.length; i++) {
                attr.watch(watchBuf[i], true);
            }
            return attr;
        }
    }, {
        key: "watch",
        value: function watch(attrName, watcher) {
            var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            var fqn = _Ensure2.default.tobeFQN(attrName);
            if (fqn) {
                var attrs = this._attributesFQNMap[fqn];
                if (attrs === void 0 || attrs.length === 0) {
                    this._watchBuffer.add(fqn, watcher);
                    return;
                }
                for (var i = 0; i < attrs.length; i++) {
                    attrs[i].watch(watcher, immediate);
                }
            } else {
                attrName = attrName;
                var res = this._idResolver.get(_Namespace2.default.defineByArray(attrName.split(".")));
                if (res.length === 0) {
                    this._watchBuffer.add(attrName, watcher);
                    return;
                }
                if (res.length > 1) {
                    throw new Error("attribute " + attrName + " is ambiguous");
                }
                for (var _i = 0; _i < this._attributesFQNMap[res[0]].length; _i++) {
                    this._attributesFQNMap[res[0]][_i].watch(watcher, immediate);
                }
            }
        }
    }, {
        key: "setAttribute",
        value: function setAttribute(attrFQN, value) {
            var attrs = this._attributesFQNMap[attrFQN];
            if (attrs === void 0 || attrs.length === 0) {
                this._attrBuffer.add(attrFQN, value);
                return;
            }
            for (var i = 0; i < attrs.length; i++) {
                attrs[i].Value = value;
            }
        }
        /**
         * 文字列指定は曖昧性解消する。
         * 曖昧はエラー。存在しないのはエラー。
         * NSIdentityはfqnで。
         * 指定されたFQNの属性が複数の場合エラー。
         * @param  {Name}      attrName [description]
         * @return {Attribute}          [description]
         */

    }, {
        key: "getAttributeRaw",
        value: function getAttributeRaw(attrName) {
            var fqn = _Ensure2.default.tobeFQN(attrName);
            if (fqn) {
                var attrs = this._attributesFQNMap[fqn] || [];
                if (attrs.length === 0) {
                    throw new Error("attribute " + fqn + " is not found.");
                } else if (attrs.length !== 1) {
                    throw new Error("attribute " + fqn + " is ambiguous. there are " + attrs.length + " attributes has same fqn.");
                }
                return attrs[0];
            } else {
                attrName = attrName;
                var res = this._idResolver.get(attrName);
                if (res.length === 0) {
                    throw new Error("attribute " + attrName + " is not found.");
                }
                if (res.length > 1) {
                    throw new Error("attribute " + attrName + " is ambiguous. It has the following possibilities. " + res);
                }
                if (this._attributesFQNMap[res[0]].length !== 1) {
                    throw new Error("attribute " + attrName + " is ambiguous. there are " + this._attributesFQNMap[res[0]].length + " attributes has same fqn.");
                }
                return this._attributesFQNMap[res[0]][0];
            }
        }
    }, {
        key: "getAttribute",
        value: function getAttribute(attrName) {
            var fqn = _Ensure2.default.tobeFQN(attrName);
            if (fqn) {
                var attrs = this._attributesFQNMap[fqn] || [];
                if (attrs.length === 0) {
                    var attrBuf = this._attrBuffer.resolve(fqn, false);
                    if (attrBuf !== void 0) {
                        return attrBuf;
                    }
                    throw new Error("attribute " + attrName + " is not found.");
                } else if (attrs.length !== 1) {
                    throw new Error("attribute " + attrName + " is ambiguous. there are " + attrs.length + " attributes has same fqn.");
                }
                return attrs[0].Value;
            } else {
                attrName = attrName;
                var res = this._idResolver.get(attrName);
                if (res.length === 0) {
                    var _attrBuf = this._attrBuffer.resolve(attrName, false);
                    if (_attrBuf !== void 0) {
                        return _attrBuf;
                    }
                    throw new Error("attribute " + attrName + " is not found.");
                }
                if (res.length > 1) {
                    throw new Error("attribute " + attrName + " is ambiguous. there are " + this._attributesFQNMap[res[0]].length + " attributes has same fqn.");
                }
                return this._attributesFQNMap[res[0]][0].Value;
            }
        }
    }, {
        key: "removeAttribute",
        value: function removeAttribute(attr) {
            if (this._attributesFQNMap[attr.name.fqn]) {
                var attributes = this._attributesFQNMap[attr.name.fqn];
                if (attributes.length === 1) {
                    this._idResolver.remove(attr.name);
                }
                _Utility2.default.remove(attributes, attr);
                delete this._attributesFQNMap[attr.name.fqn];
                return true;
            }
            return false;
        }
    }, {
        key: "guess",
        value: function guess(name) {
            if (name instanceof _NSIdentity2.default) {
                return [name];
            }
            if (_Ensure2.default.checkFQNString(name)) {
                return [_NSIdentity2.default.fromFQN(name)];
            }
            return this._idResolver.get(name).map(function (fqn) {
                return _NSIdentity2.default.fromFQN(fqn);
            });
        }
    }]);

    return AttributeManager;
}();

exports.default = AttributeManager;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * set of NSIdentity
 * @param  {NSIdentity[]} array [description]
 * @return {NSSet}              [description]
 */
var NSSet = function () {
    function NSSet(content) {
        _classCallCheck(this, NSSet);

        this._content = {};
        if (content) {
            this.pushArray(content);
        }
    }

    _createClass(NSSet, [{
        key: "push",
        value: function push(item) {
            if (!this._content[item.fqn]) {
                this._content[item.fqn] = item;
                return true;
            }
            return false;
        }
    }, {
        key: "pushArray",
        value: function pushArray(item) {
            var _this = this;

            item.forEach(function (v) {
                _this.push(v);
            });
            return this;
        }
    }, {
        key: "toArray",
        value: function toArray() {
            var ret = [];
            for (var key in this._content) {
                ret.push(this._content[key]);
            }
            return ret;
        }
    }, {
        key: "clone",
        value: function clone() {
            var newSet = new NSSet();
            for (var key in this._content) {
                newSet.push(this._content[key]);
            }
            return newSet;
        }
    }, {
        key: "merge",
        value: function merge(other) {
            this.pushArray(other.toArray());
            return this;
        }
    }, {
        key: "forEach",
        value: function forEach(func) {
            for (var key in this._content) {
                func(this._content[key]);
            }
            return this;
        }
    }], [{
        key: "fromArray",
        value: function fromArray(array) {
            var nSet = new NSSet();
            nSet.pushArray(array);
            return nSet;
        }
    }]);

    return NSSet;
}();

exports.default = NSSet;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var XMLHttpRequestAsync = function () {
    function XMLHttpRequestAsync() {
        _classCallCheck(this, XMLHttpRequestAsync);
    }

    _createClass(XMLHttpRequestAsync, null, [{
        key: "send",
        value: function send(xhr, data) {
            return new Promise(function (resolve, reject) {
                xhr.onload = function (e) {
                    resolve(e);
                };
                xhr.onerror = function (e) {
                    reject(e);
                };
                xhr.send(data);
            });
        }
    }]);

    return XMLHttpRequestAsync;
}();

exports.default = XMLHttpRequestAsync;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Component2 = __webpack_require__(9);

var _Component3 = _interopRequireDefault(_Component2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GrimoireComponent = function (_Component) {
    _inherits(GrimoireComponent, _Component);

    function GrimoireComponent() {
        _classCallCheck(this, GrimoireComponent);

        return _possibleConstructorReturn(this, (GrimoireComponent.__proto__ || Object.getPrototypeOf(GrimoireComponent)).apply(this, arguments));
    }

    _createClass(GrimoireComponent, [{
        key: "$awake",
        value: function $awake() {
            var node = this.node;
            node.resolveAttributesValue();
            this.getAttributeRaw("id").watch(function (attr) {
                node.element.id = attr ? attr : "";
            }, true, true);
            this.getAttributeRaw("class").watch(function (attr) {
                node.element.className = Array.isArray(attr) ? attr.join(" ") : "";
            }, true, true);
            this.getAttributeRaw("enabled").watch(function (attr) {
                node["_enabled"] = attr;
                var p = node.parent;
                node.notifyActivenessUpdate(p ? p.isActive && node.enabled : node.enabled);
            }, false, true);
            node["_enabled"] = this.getAttribute("enabled");
            node["_isActive"] = node.parent ? node.parent.isActive && node.enabled : node.enabled;
        }
    }]);

    return GrimoireComponent;
}(_Component3.default);

GrimoireComponent.attributes = {
    id: {
        converter: "String",
        default: null
    },
    class: {
        converter: "StringArray",
        default: null
    },
    enabled: {
        converter: "Boolean",
        default: true
    }
};
exports.default = GrimoireComponent;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _GrimoireInterface = __webpack_require__(0);

var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var splitter = " ";
var escape = "\\";
/**
 * 配列のためのコンバータ。
 * 属性宣言にパラメータ`type`が必要です。
 * このパラメータは配列の要素の型のためのコンバータ名です。
 * このコンバータは、配列が与えられたらその内容すべてを、`type`で指定されたコンバータを通して生成した新しい配列を返します。
 * 文字列が与えられたとき、*半角スペース*で区切られた文字列ごとに配列に分割して同様の処理を行います。
 * ただし、`\`(バックスラッシュ)で*半角スペースをエスケープできます*
 */
exports.default = {
    name: "Array",
    verify: function verify(attr) {
        if (!attr.declaration["type"]) {
            throw new Error("Array converter needs to be specified type in attribute declaration.");
        }
    },
    convert: function convert(val, attr) {
        var converter = _GrimoireInterface2.default.converters.get(attr.declaration["type"]);
        if (!converter) {
            throw new Error("converter " + attr.declaration["type"] + " is not registerd.");
        }
        if (Array.isArray(val)) {
            return val.map(function (v) {
                return converter.convert(v, attr);
            });
        }
        if (typeof val === "string") {
            var ar = val.split(splitter);
            for (var i = 0; i < ar.length; i++) {
                var s = ar[i];
                if (s[s.length - 1] === escape) {
                    if (i === ar.length - 1) {
                        ar[i] = s.substring(0, s.length - escape.length) + splitter;
                    } else {
                        ar[i] = s.substring(0, s.length - escape.length) + splitter + ar[i + 1];
                        ar.splice(i + 1, 1);
                    }
                }
            }
            return ar.map(function (v) {
                return converter.convert(v, attr);
            });
        }
        return null;
    }
};

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = BooleanConverter;
/**
 * booleanのためのコンバータです。
 * booleanはそのまま通します。
 * 文字列は、`true`,`false`のみ通します。
 * @param  {any}       val  [description]
 * @param  {Attribute} attr [description]
 * @return {any}            [description]
 */
function BooleanConverter(val) {
    if (typeof val === "boolean") {
        return val;
    } else if (typeof val === "string") {
        switch (val) {
            case "true":
                return true;
            case "false":
                return false;
        }
    }
}

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Ensure = __webpack_require__(1);

var _Ensure2 = _interopRequireDefault(_Ensure);

var _Component = __webpack_require__(9);

var _Component2 = _interopRequireDefault(_Component);

var _GomlNode = __webpack_require__(10);

var _GomlNode2 = _interopRequireDefault(_GomlNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * コンポーネントのためのコンバータです。
 * 属性宣言に`target`パラメータの指定が必要です。
 * nullに対してはnullを返します。
 * `gomlnode`に対しては、`target`パラメータの値で`getComponent`した結果を返します。
 * `Component`に対しては、`target`パラメータと型が一致していればそのまま返します。そうでなければ、例外を投げます。
 * 文字列の場合、ノードに対するクエリとして解釈され、取得されたノードに対して`getComponent`されます。
 */
exports.default = {
    name: "Component",
    verify: function verify(attr) {
        if (!attr.declaration["target"]) {
            throw new Error("Component converter require to be specified target");
        }
    },
    convert: function convert(val, attr) {
        if (val === null) {
            return null;
        }
        if (val instanceof _GomlNode2.default) {
            return val.getComponent(attr.declaration["target"]);
        } else if (val instanceof _Component2.default) {
            if (val.name.fqn === _Ensure2.default.tobeNSIdentity(attr.declaration["target"]).fqn) {
                return val;
            } else {
                throw new Error("Specified component must be " + attr.declaration["target"]);
            }
        } else {
            var n = attr.tree(val).first();
            if (n) {
                return n.getComponent(attr.declaration["target"]);
            }
            return null;
        }
    }
};

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * 列挙のためのコンバータ。
 * 属性宣言に`table`パラメータが必要です。
 * `table`パラメータは列挙する文字列から数値への連想配列です。
 * 数値の場合、そのまま返します。
 * 文字列の場合、テーブルの対応する値を返します。
 */
exports.default = {
    name: "Enum",
    verify: function verify(attr) {
        if (!attr.declaration["table"]) {
            throw new Error("Enum converter needs to be specified table in attribute dictionary");
        }
    },
    convert: function convert(val, attr) {
        if (typeof val === "number") {
            return val;
        }
        if (typeof val === "string") {
            var result = attr.declaration["table"][val];
            if (!result) {
                throw new Error("Specified value is not exisiting in the relation table");
            }
            return result;
        }
    }
};

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = NumberArrayConverter;
function NumberArrayConverter(val) {
    if (val instanceof Array) {
        return val;
    }
    if (typeof val === "string") {
        var splitted = val.split(",");
        return splitted.map(function (s) {
            return Number.parseFloat(s);
        });
    }
}

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = NumberConverter;
/**
 * converter for number value.
 * number,string,null will be converted.
 * Array<number> also convertable only if length equivalent to 1.
 * @param  {any}    val [description]
 * @return {number}     [description]
 */
function NumberConverter(val) {
    if (typeof val === "number") {
        return val;
    } else if (typeof val === "string") {
        return Number.parseFloat(val);
    } else if (val === null) {
        return null;
    } else if (Array.isArray(val) && val.length === 1) {
        return val[0];
    }
    return undefined;
}

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ObjectConverter;
/**
 * オブジェクトのコンバータ。
 * 値をそのまま返します。
 * @param  {any} val [description]
 * @return {any}     [description]
 */
/**
 * オブジェクトのコンバータ。
 * 値をそのまま返します。
 * @param  {any} val [description]
 * @return {any}     [description]
 */function ObjectConverter(val) {
  return val;
}

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = StringArrayConverter;
function StringArrayConverter(val) {
    if (Array.isArray(val) || !val) {
        return val;
    }
    if (typeof val === "string") {
        return val.split(" ");
    }
}

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = StringConverter;
function StringConverter(val) {
    if (typeof val === "string") {
        return val;
    } else if (!val) {
        return val;
    } else if (typeof val.toString === "function") {
        return val.toString();
    }
}

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _EEObject2 = __webpack_require__(12);

var _EEObject3 = _interopRequireDefault(_EEObject2);

var _GomlLoader = __webpack_require__(18);

var _GomlLoader2 = _interopRequireDefault(_GomlLoader);

var _EnumConverter = __webpack_require__(27);

var _EnumConverter2 = _interopRequireDefault(_EnumConverter);

var _NumberArrayConverter = __webpack_require__(28);

var _NumberArrayConverter2 = _interopRequireDefault(_NumberArrayConverter);

var _ComponentConverter = __webpack_require__(26);

var _ComponentConverter2 = _interopRequireDefault(_ComponentConverter);

var _NumberConverter = __webpack_require__(29);

var _NumberConverter2 = _interopRequireDefault(_NumberConverter);

var _ObjectConverter = __webpack_require__(30);

var _ObjectConverter2 = _interopRequireDefault(_ObjectConverter);

var _ArrayConverter = __webpack_require__(24);

var _ArrayConverter2 = _interopRequireDefault(_ArrayConverter);

var _NodeInterface = __webpack_require__(15);

var _NodeInterface2 = _interopRequireDefault(_NodeInterface);

var _Utility = __webpack_require__(4);

var _Utility2 = _interopRequireDefault(_Utility);

var _GomlInterfaceImpl = __webpack_require__(14);

var _GomlInterfaceImpl2 = _interopRequireDefault(_GomlInterfaceImpl);

var _BooleanConverter = __webpack_require__(25);

var _BooleanConverter2 = _interopRequireDefault(_BooleanConverter);

var _GrimoireComponent = __webpack_require__(23);

var _GrimoireComponent2 = _interopRequireDefault(_GrimoireComponent);

var _StringArrayConverter = __webpack_require__(31);

var _StringArrayConverter2 = _interopRequireDefault(_StringArrayConverter);

var _StringConverter = __webpack_require__(32);

var _StringConverter2 = _interopRequireDefault(_StringConverter);

var _Constants = __webpack_require__(5);

var _Constants2 = _interopRequireDefault(_Constants);

var _ComponentDeclaration = __webpack_require__(17);

var _ComponentDeclaration2 = _interopRequireDefault(_ComponentDeclaration);

var _NodeDeclaration = __webpack_require__(34);

var _NodeDeclaration2 = _interopRequireDefault(_NodeDeclaration);

var _NSIdentity = __webpack_require__(2);

var _NSIdentity2 = _interopRequireDefault(_NSIdentity);

var _Namespace = __webpack_require__(7);

var _Namespace2 = _interopRequireDefault(_Namespace);

var _NSDictionary = __webpack_require__(6);

var _NSDictionary2 = _interopRequireDefault(_NSDictionary);

var _Ensure = __webpack_require__(1);

var _Ensure2 = _interopRequireDefault(_Ensure);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

var GrimoireInterfaceImpl = function (_EEObject) {
    _inherits(GrimoireInterfaceImpl, _EEObject);

    function GrimoireInterfaceImpl() {
        _classCallCheck(this, GrimoireInterfaceImpl);

        var _this = _possibleConstructorReturn(this, (GrimoireInterfaceImpl.__proto__ || Object.getPrototypeOf(GrimoireInterfaceImpl)).apply(this, arguments));

        _this.nodeDeclarations = new _NSDictionary2.default();
        _this.converters = new _NSDictionary2.default();
        _this.componentDeclarations = new _NSDictionary2.default();
        _this.rootNodes = {};
        _this.loadTasks = [];
        _this.lib = {};
        _this.nodeDictionary = {};
        _this.componentDictionary = {};
        _this.debug = true;
        _this._registrationContext = _Constants2.default.defaultNamespace;
        return _this;
    }

    _createClass(GrimoireInterfaceImpl, [{
        key: "ns",

        /**
         * [obsolete] use `Namespace.define` instead of.
         * @param  {string} ns namespace URI to be used
         * @return {[type]}    the namespaced identity
         */
        value: function ns(_ns) {
            return function (name) {
                return _Namespace2.default.define(_ns).for(name);
            };
        }
    }, {
        key: "initialize",
        value: function initialize() {
            this.registerConverter("String", _StringConverter2.default);
            this.registerConverter("StringArray", _StringArrayConverter2.default);
            this.registerConverter("Boolean", _BooleanConverter2.default);
            this.registerConverter(_ArrayConverter2.default);
            this.registerConverter("Object", _ObjectConverter2.default);
            this.registerConverter(_EnumConverter2.default);
            this.registerConverter("Number", _NumberConverter2.default);
            this.registerConverter(_ComponentConverter2.default);
            this.registerConverter("NumberArray", _NumberArrayConverter2.default);
            this.registerComponent("GrimoireComponent", _GrimoireComponent2.default);
            this.registerNode("grimoire-node-base", ["GrimoireComponent"]);
        }
        /**
         * Register plugins
         * @param  {(}      loadTask [description]
         * @return {[type]}          [description]
         */

    }, {
        key: "register",
        value: function register(loadTask) {
            this.loadTasks.push({ ns: this._registeringPluginNamespace, task: loadTask });
            this._registeringPluginNamespace = _Constants2.default.defaultNamespace;
        }
    }, {
        key: "resolvePlugins",
        value: function resolvePlugins() {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                var i, obj;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                i = 0;

                            case 1:
                                if (!(i < this.loadTasks.length)) {
                                    _context.next = 16;
                                    break;
                                }

                                obj = this.loadTasks[i];

                                this._registrationContext = obj.ns;
                                _context.prev = 4;
                                _context.next = 7;
                                return obj.task();

                            case 7:
                                _context.next = 13;
                                break;

                            case 9:
                                _context.prev = 9;
                                _context.t0 = _context["catch"](4);

                                console.error("Error: loadTask of plugin '" + obj.ns + "' is failed.");
                                console.error(_context.t0);

                            case 13:
                                i++;
                                _context.next = 1;
                                break;

                            case 16:
                                this._registrationContext = _Constants2.default.defaultNamespace;
                                // resolveDependency
                                this.componentDeclarations.forEach(function (dec) {
                                    dec.resolveDependency();
                                });
                                this.nodeDeclarations.forEach(function (dec) {
                                    dec.resolveDependency();
                                });

                            case 19:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[4, 9]]);
            }));
        }
        /**
         * register custom component
         * @param  {string                |   NSIdentity} name          [description]
         * @param  {IAttributeDeclaration }} attributes           [description]
         * @param  {Object                |   (new                 (}           obj           [description]
         * @return {[type]}                       [description]
         */

    }, {
        key: "registerComponent",
        value: function registerComponent(name, obj, superComponent) {
            name = this._ensureTobeNSIdentityOnRegister(name);
            if (this.componentDeclarations.get(name)) {
                throw new Error("component " + name.fqn + " is already registerd.");
            }
            if (this.debug && !_Utility2.default.isCamelCase(name.name)) {
                console.warn("component " + name.name + " is registerd. but,it should be 'CamelCase'.");
            }
            var attrs = (typeof obj === "function" ? obj : obj)["attributes"];
            if (!attrs) {
                throw new Error("component must has 'attributes'");
            }
            for (var key in attrs) {
                if (attrs[key].default === void 0) {
                    throw new Error("default value of attribute " + key + " in " + name.fqn + " must be not 'undefined'.");
                }
            }
            var dec = new _ComponentDeclaration2.default(name, attrs, obj, superComponent);
            this.componentDeclarations.set(name, dec);
            return dec;
        }
    }, {
        key: "registerNode",
        value: function registerNode(name) {
            var requiredComponents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var defaults = arguments[2];
            var superNode = arguments[3];
            var freezeAttributes = arguments[4];

            var registerId = this._ensureTobeNSIdentityOnRegister(name);
            if (this.nodeDeclarations.get(registerId)) {
                throw new Error("gomlnode " + registerId.fqn + " is already registerd.");
            }
            if (this.debug && !_Utility2.default.isSnakeCase(registerId.name)) {
                console.warn("node " + registerId.name + " is registerd. but,it should be 'snake-case'.");
            }
            var declaration = new _NodeDeclaration2.default(registerId, requiredComponents || [], defaults || {}, superNode, freezeAttributes);
            this.nodeDeclarations.set(registerId, declaration);
            return declaration;
        }
    }, {
        key: "getCompanion",
        value: function getCompanion(scriptTag) {
            var root = this.getRootNode(scriptTag);
            if (root) {
                return root.companion;
            } else {
                throw new Error("scriptTag is not goml");
            }
        }
    }, {
        key: "addRootNode",
        value: function addRootNode(tag, rootNode) {
            if (!rootNode) {
                throw new Error("can not register null to rootNodes.");
            }
            tag.setAttribute("x-rootNodeId", rootNode.id);
            this.rootNodes[rootNode.id] = rootNode;
            rootNode.companion.set(this.ns(_Constants2.default.defaultNamespace)("scriptElement"), tag);
            // awake and mount tree.
            rootNode.setMounted(true);
            rootNode.broadcastMessage("treeInitialized", {
                ownerScriptTag: tag,
                id: rootNode.id
            });
            rootNode.sendInitializedMessage({
                ownerScriptTag: tag,
                id: rootNode.id
            });
            return rootNode.id;
        }
    }, {
        key: "getRootNode",
        value: function getRootNode(scriptTag) {
            var id = scriptTag.getAttribute("x-rootNodeId");
            if (id) {
                var ret = this.rootNodes[id];
                if (!ret) {
                    throw new Error("threr is no rootNode has id " + id);
                }
                return ret;
            } else {
                return null;
            }
        }
    }, {
        key: "noConflict",
        value: function noConflict() {
            window["gr"] = this.noConflictPreserve;
        }
    }, {
        key: "queryRootNodes",
        value: function queryRootNodes(query) {
            var scriptTags = document.querySelectorAll(query);
            var nodes = [];
            for (var i = 0; i < scriptTags.length; i++) {
                var node = this.getRootNode(scriptTags.item(i));
                if (node) {
                    nodes.push(node);
                }
            }
            return nodes;
        }
    }, {
        key: "registerConverter",
        value: function registerConverter(arg1, converter) {
            if (converter) {
                this.registerConverter({ name: this._ensureTobeNSIdentityOnRegister(arg1), verify: function verify() {
                        return true;
                    }, convert: converter });
                return;
            }
            var dec = arg1;
            this.converters.set(this._ensureTobeNSIdentityOnRegister(dec.name), dec);
        }
    }, {
        key: "overrideDeclaration",
        value: function overrideDeclaration(targetDeclaration, arg2, defaults) {
            var dec = this.nodeDeclarations.get(targetDeclaration);
            if (!dec) {
                throw new Error("attempt not-exist node declaration : " + _Ensure2.default.tobeNSIdentity(targetDeclaration).name);
            }
            if (!dec.resolvedDependency) {
                dec.resolveDependency();
            }
            if (defaults) {
                var additionalC = arg2;
                for (var i = 0; i < additionalC.length; i++) {
                    dec.addDefaultComponent(additionalC[i]);
                }
                dec.defaultAttributes.pushDictionary(_Ensure2.default.tobeNSDictionary(defaults));
            } else if (Array.isArray(arg2)) {
                for (var _i = 0; _i < arg2.length; _i++) {
                    dec.addDefaultComponent(arg2[_i]);
                }
            } else {
                dec.defaultAttributes.pushDictionary(_Ensure2.default.tobeNSDictionary(arg2));
            }
            return dec;
        }
        /**
         * This method is not for users.
         * Just for unit testing.
         *
         * Clear all configuration that GrimoireInterface contain.
         */

    }, {
        key: "clear",
        value: function clear() {
            this.nodeDeclarations.clear();
            this.componentDeclarations.clear();
            this.converters.clear();
            for (var key in this.rootNodes) {
                delete this.rootNodes[key];
            }
            for (var _key in this.nodeDictionary) {
                delete this.nodeDictionary[_key];
            }
            for (var _key2 in this.componentDictionary) {
                delete this.componentDictionary[_key2];
            }
            this.loadTasks.splice(0, this.loadTasks.length);
            this._registeringPluginNamespace = _Constants2.default.defaultNamespace;
            this.initialize();
        }
    }, {
        key: "extendGrimoireInterface",
        value: function extendGrimoireInterface(name, func) {
            if (this[name]) {
                throw new Error("gr." + name + " can not extend.it is already exist.");
            }
            this[name] = func.bind(this);
        }
    }, {
        key: "extendGomlInterface",
        value: function extendGomlInterface(name, func) {
            if (_GomlInterfaceImpl2.default[name]) {
                throw new Error("gr." + name + " can not extend.it is already exist.");
            }
            _GomlInterfaceImpl2.default[name] = func.bind(this);
        }
    }, {
        key: "extendNodeInterface",
        value: function extendNodeInterface(name, func) {
            if (_NodeInterface2.default[name]) {
                throw new Error("gr." + name + " can not extend.it is already exist.");
            }
            _NodeInterface2.default[name] = func.bind(this);
        }
        /**
         * use for notify GrimoireInterface of plugin namespace to be ragister.
         * notified namespace will use when resolve loadTask of the plugin.
         * @param {string} namespace namespace of plugin to be ragister.
         */

    }, {
        key: "notifyRegisteringPlugin",
        value: function notifyRegisteringPlugin(namespace) {
            var res = /^[Gg]rimoire(?:js|JS)?-(.*)$/.exec(namespace);
            if (res) {
                namespace = res[1];
            }
            this._registeringPluginNamespace = namespace;
        }
    }, {
        key: "_ensureNameTobeConstructor",
        value: function _ensureNameTobeConstructor(component) {
            if (!component) {
                return null;
            }
            if (typeof component === "function") {
                return component;
            } else if (typeof component === "string") {
                return this._ensureNameTobeConstructor(_Ensure2.default.tobeNSIdentity(component));
            } else {
                // here NSIdentity.
                var c = this.componentDeclarations.get(component);
                if (!c) {
                    return null;
                }
                return c.ctor;
            }
        }
    }, {
        key: "_ensureTobeNSIdentityOnRegister",
        value: function _ensureTobeNSIdentityOnRegister(name) {
            if (!name) {
                return null;
            }
            if (typeof name === "string") {
                if (name.indexOf("|") !== -1) {
                    return _NSIdentity2.default.fromFQN(name);
                }
                return _NSIdentity2.default.fromFQN(_Namespace2.default.define(this._registrationContext), name);
            } else {
                return name;
            }
        }
    }, {
        key: "initializedEventHandler",
        get: function get() {
            return _GomlLoader2.default.initializedEventHandlers;
        }
    }]);

    return GrimoireInterfaceImpl;
}(_EEObject3.default);

exports.default = GrimoireInterfaceImpl;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Ensure = __webpack_require__(1);

var _Ensure2 = _interopRequireDefault(_Ensure);

var _NSDictionary = __webpack_require__(6);

var _NSDictionary2 = _interopRequireDefault(_NSDictionary);

var _NSSet = __webpack_require__(21);

var _NSSet2 = _interopRequireDefault(_NSSet);

var _NSIdentity = __webpack_require__(2);

var _NSIdentity2 = _interopRequireDefault(_NSIdentity);

var _IdResolver = __webpack_require__(3);

var _IdResolver2 = _interopRequireDefault(_IdResolver);

var _GrimoireInterface = __webpack_require__(0);

var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NodeDeclaration = function () {
    function NodeDeclaration(name, _defaultComponents, _defaultAttributes, _superNode) {
        var _freezeAttributes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];

        _classCallCheck(this, NodeDeclaration);

        this.name = name;
        this._defaultComponents = _defaultComponents;
        this._defaultAttributes = _defaultAttributes;
        this._superNode = _superNode;
        this._freezeAttributes = _freezeAttributes;
        this.defaultAttributes = new _NSDictionary2.default();
        this.idResolver = new _IdResolver2.default();
        this._resolvedDependency = false;
        if (!this._superNode && this.name.name !== "grimoire-node-base") {
            this._superNode = new _NSIdentity2.default("grimoirejs.grimoire-node-base");
        }
        this._freezeAttributes = this._freezeAttributes || [];
    }

    _createClass(NodeDeclaration, [{
        key: "addDefaultComponent",
        value: function addDefaultComponent(componentName) {
            var componentId = _Ensure2.default.tobeNSIdentity(componentName);
            this.defaultComponents.push(componentId);
            if (this._defaultComponentsActual) {
                this._defaultComponentsActual.push(componentId);
            }
        }
        /**
         * resolve requiredComponents,superNode,defaults and freezeAttributes,
         * throw error if they have any ambiguity.
         * デフォルトコンポーネント、スーパノード、デフォルト値、フリーズ値の名前解決。曖昧は例外
         */

    }, {
        key: "resolveDependency",
        value: function resolveDependency() {
            var _this = this;

            if (this._resolvedDependency) {
                return false;
            }
            this.defaultComponents = new _NSSet2.default(this._defaultComponents.map(function (name) {
                return _Ensure2.default.tobeNSIdentity(name);
            }));
            for (var key in this._defaultAttributes) {
                var value = this._defaultAttributes[key];
                this.defaultAttributes.set(_NSIdentity2.default.fromFQN(key), value);
            }
            this.superNode = this._superNode ? _Ensure2.default.tobeNSIdentity(this._superNode) : void 0;
            this._resolveInherites();
            this._defaultComponentsActual.forEach(function (id) {
                var dec = _GrimoireInterface2.default.componentDeclarations.get(id);
                dec.idResolver.foreach(function (fqn) {
                    _this.idResolver.add(_NSIdentity2.default.fromFQN(fqn));
                });
            });
            this.freezeAttributes = new _NSSet2.default(this._freezeAttributes.map(function (name) {
                return _Ensure2.default.tobeNSIdentity(name);
            }));
            this._resolvedDependency = true;
            return true;
        }
    }, {
        key: "_resolveInherites",
        value: function _resolveInherites() {
            if (!this.superNode) {
                this._defaultComponentsActual = this.defaultComponents;
                this._defaultAttributesActual = this.defaultAttributes;
                return;
            }
            var superNode = _GrimoireInterface2.default.nodeDeclarations.get(this.superNode);
            superNode.resolveDependency();
            var inheritedDefaultComponents = superNode.defaultComponentsActual;
            var inheritedDefaultAttribute = superNode.defaultAttributesActual;
            this._defaultComponentsActual = inheritedDefaultComponents.clone().merge(this.defaultComponents);
            this._defaultAttributesActual = inheritedDefaultAttribute.clone().pushDictionary(this.defaultAttributes);
        }
    }, {
        key: "resolvedDependency",
        get: function get() {
            return this._resolvedDependency;
        }
    }, {
        key: "defaultComponentsActual",
        get: function get() {
            if (!this._resolvedDependency) {
                throw new Error(this.name.fqn + " is not resolved dependency!");
            }
            return this._defaultComponentsActual;
        }
    }, {
        key: "defaultAttributesActual",
        get: function get() {
            if (!this._resolvedDependency) {
                throw new Error(this.name.fqn + " is not resolved dependency!");
            }
            return this._defaultAttributesActual;
        }
    }]);

    return NodeDeclaration;
}();

exports.default = NodeDeclaration;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = null;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = function () {
    GrimoireInitializer.initialize();
    _GrimoireInterface2.default.noConflictPreserve = window["gr"];
    return window["gr"] = window["GrimoireJS"] = _GrimoireInterface2.default;
};

var _GrimoireInterface = __webpack_require__(0);

var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);

var _GomlLoader = __webpack_require__(18);

var _GomlLoader2 = _interopRequireDefault(_GomlLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

/**
 * Provides procedures for initializing.
 */
var GrimoireInitializer = function () {
    function GrimoireInitializer() {
        _classCallCheck(this, GrimoireInitializer);
    }

    _createClass(GrimoireInitializer, null, [{
        key: "initialize",

        /**
         * Start initializing
         * @return {Promise<void>} The promise which will be resolved when all of the Goml script was loaded.
         */
        value: function initialize() {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.prev = 0;

                                GrimoireInitializer._copyGLConstants();
                                _GrimoireInterface2.default.initialize();
                                _context.next = 5;
                                return GrimoireInitializer._waitForDOMLoading();

                            case 5:
                                GrimoireInitializer._logVersions();
                                _context.next = 8;
                                return _GrimoireInterface2.default.resolvePlugins();

                            case 8:
                                _context.next = 10;
                                return _GomlLoader2.default.loadForPage();

                            case 10:
                                _context.next = 15;
                                break;

                            case 12:
                                _context.prev = 12;
                                _context.t0 = _context["catch"](0);

                                console.error(_context.t0);

                            case 15:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[0, 12]]);
            }));
        }
        /**
         * Ensure WebGLRenderingContext.[CONSTANTS] is exisiting.
         * Some of the browsers contains them in prototype.
         */

    }, {
        key: "_copyGLConstants",
        value: function _copyGLConstants() {
            if (WebGLRenderingContext.ONE) {
                // Assume the CONSTANTS are already in WebGLRenderingContext
                // Chrome,Firefox,IE,Edge...
                return;
            }
            // Otherwise like ""Safari""
            for (var propName in WebGLRenderingContext.prototype) {
                if (/^[A-Z]/.test(propName)) {
                    var property = WebGLRenderingContext.prototype[propName];
                    WebGLRenderingContext[propName] = property;
                }
            }
        }
        /**
         * Obtain the promise object which will be resolved when DOMContentLoaded event was rised.
         * @return {Promise<void>} the promise
         */

    }, {
        key: "_waitForDOMLoading",
        value: function _waitForDOMLoading() {
            return new Promise(function (resolve) {
                window.addEventListener("DOMContentLoaded", function () {
                    resolve();
                });
            });
        }
    }, {
        key: "_logVersions",
        value: function _logVersions() {
            var gr = _GrimoireInterface2.default;
            if (!gr.debug) {
                return;
            }
            var log = "%cGrimoire.js v" + gr["__VERSION__"] + "\nplugins:\n\n";
            var i = 1;
            for (var key in gr.lib) {
                var plugin = gr.lib[key];
                log += "  " + i + " : " + (plugin.__NAME__ || key) + "@" + plugin.__VERSION__ + "\n";
                i++;
            }
            log += "\nTo suppress this message,please inject a line \"gr.debug = false;\" on the initializing timing.";
            console.log(log, "color:#44F;font-weight:bold;");
        }
    }]);

    return GrimoireInitializer;
}();
/**
 * Just start the process.
 */

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _AttributeManager = __webpack_require__(20);

var _AttributeManager2 = _interopRequireDefault(_AttributeManager);

var _Constants = __webpack_require__(5);

var _Constants2 = _interopRequireDefault(_Constants);

var _EEObject = __webpack_require__(12);

var _EEObject2 = _interopRequireDefault(_EEObject);

var _Ensure = __webpack_require__(1);

var _Ensure2 = _interopRequireDefault(_Ensure);

var _IDObject = __webpack_require__(13);

var _IDObject2 = _interopRequireDefault(_IDObject);

var _IdResolver = __webpack_require__(3);

var _IdResolver2 = _interopRequireDefault(_IdResolver);

var _Namespace = __webpack_require__(7);

var _Namespace2 = _interopRequireDefault(_Namespace);

var _NSDictionary = __webpack_require__(6);

var _NSDictionary2 = _interopRequireDefault(_NSDictionary);

var _NSIdentity = __webpack_require__(2);

var _NSIdentity2 = _interopRequireDefault(_NSIdentity);

var _NSSet = __webpack_require__(21);

var _NSSet2 = _interopRequireDefault(_NSSet);

var _Types = __webpack_require__(35);

var _Types2 = _interopRequireDefault(_Types);

var _Utility = __webpack_require__(4);

var _Utility2 = _interopRequireDefault(_Utility);

var _XMLHttpRequestAsync = __webpack_require__(22);

var _XMLHttpRequestAsync2 = _interopRequireDefault(_XMLHttpRequestAsync);

var _XMLReader = __webpack_require__(8);

var _XMLReader2 = _interopRequireDefault(_XMLReader);

var _GrimoireComponent = __webpack_require__(23);

var _GrimoireComponent2 = _interopRequireDefault(_GrimoireComponent);

var _ArrayConverter = __webpack_require__(24);

var _ArrayConverter2 = _interopRequireDefault(_ArrayConverter);

var _BooleanConverter = __webpack_require__(25);

var _BooleanConverter2 = _interopRequireDefault(_BooleanConverter);

var _ComponentConverter = __webpack_require__(26);

var _ComponentConverter2 = _interopRequireDefault(_ComponentConverter);

var _EnumConverter = __webpack_require__(27);

var _EnumConverter2 = _interopRequireDefault(_EnumConverter);

var _NumberArrayConverter = __webpack_require__(28);

var _NumberArrayConverter2 = _interopRequireDefault(_NumberArrayConverter);

var _NumberConverter = __webpack_require__(29);

var _NumberConverter2 = _interopRequireDefault(_NumberConverter);

var _ObjectConverter = __webpack_require__(30);

var _ObjectConverter2 = _interopRequireDefault(_ObjectConverter);

var _StringArrayConverter = __webpack_require__(31);

var _StringArrayConverter2 = _interopRequireDefault(_StringArrayConverter);

var _StringConverter = __webpack_require__(32);

var _StringConverter2 = _interopRequireDefault(_StringConverter);

var _GomlInterfaceImpl = __webpack_require__(14);

var _GomlInterfaceImpl2 = _interopRequireDefault(_GomlInterfaceImpl);

var _GrimoireInterface = __webpack_require__(0);

var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);

var _GrimoireInterfaceImpl = __webpack_require__(33);

var _GrimoireInterfaceImpl2 = _interopRequireDefault(_GrimoireInterfaceImpl);

var _NodeInterface = __webpack_require__(15);

var _NodeInterface2 = _interopRequireDefault(_NodeInterface);

var _Attribute = __webpack_require__(16);

var _Attribute2 = _interopRequireDefault(_Attribute);

var _Component = __webpack_require__(9);

var _Component2 = _interopRequireDefault(_Component);

var _ComponentDeclaration = __webpack_require__(17);

var _ComponentDeclaration2 = _interopRequireDefault(_ComponentDeclaration);

var _GomlLoader = __webpack_require__(18);

var _GomlLoader2 = _interopRequireDefault(_GomlLoader);

var _GomlNode = __webpack_require__(10);

var _GomlNode2 = _interopRequireDefault(_GomlNode);

var _GomlParser = __webpack_require__(11);

var _GomlParser2 = _interopRequireDefault(_GomlParser);

var _NodeDeclaration = __webpack_require__(34);

var _NodeDeclaration2 = _interopRequireDefault(_NodeDeclaration);

var _NodeUtility = __webpack_require__(19);

var _NodeUtility2 = _interopRequireDefault(_NodeUtility);

var _main = __webpack_require__(36);

var _main2 = _interopRequireDefault(_main);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __VERSION__ = "0.17.1";
var __NAME__ = "grimoirejs";

var __EXPOSE__ = {
    "Base": {
        "AttributeManager": _AttributeManager2.default,
        "Constants": _Constants2.default,
        "EEObject": _EEObject2.default,
        "Ensure": _Ensure2.default,
        "IDObject": _IDObject2.default,
        "IdResolver": _IdResolver2.default,
        "Namespace": _Namespace2.default,
        "NSDictionary": _NSDictionary2.default,
        "NSIdentity": _NSIdentity2.default,
        "NSSet": _NSSet2.default,
        "Types": _Types2.default,
        "Utility": _Utility2.default,
        "XMLHttpRequestAsync": _XMLHttpRequestAsync2.default,
        "XMLReader": _XMLReader2.default
    },
    "Components": {
        "GrimoireComponent": _GrimoireComponent2.default
    },
    "Converters": {
        "ArrayConverter": _ArrayConverter2.default,
        "BooleanConverter": _BooleanConverter2.default,
        "ComponentConverter": _ComponentConverter2.default,
        "EnumConverter": _EnumConverter2.default,
        "NumberArrayConverter": _NumberArrayConverter2.default,
        "NumberConverter": _NumberConverter2.default,
        "ObjectConverter": _ObjectConverter2.default,
        "StringArrayConverter": _StringArrayConverter2.default,
        "StringConverter": _StringConverter2.default
    },
    "Interface": {
        "GomlInterfaceImpl": _GomlInterfaceImpl2.default,
        "GrimoireInterface": _GrimoireInterface2.default,
        "GrimoireInterfaceImpl": _GrimoireInterfaceImpl2.default,
        "NodeInterface": _NodeInterface2.default
    },
    "Node": {
        "Attribute": _Attribute2.default,
        "Component": _Component2.default,
        "ComponentDeclaration": _ComponentDeclaration2.default,
        "GomlLoader": _GomlLoader2.default,
        "GomlNode": _GomlNode2.default,
        "GomlParser": _GomlParser2.default,
        "NodeDeclaration": _NodeDeclaration2.default,
        "NodeUtility": _NodeUtility2.default
    }
};
var __BASE__ = (0, _main2.default)();
Object.assign(__EXPOSE__, {
    __VERSION__: __VERSION__,
    __NAME__: __NAME__
});
Object.assign(__BASE__ || {}, __EXPOSE__);
window["GrimoireJS"]["__VERSION__"] = __VERSION__;
exports.default = __BASE__;

/***/ }),
/* 38 */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ })
/******/ ]);
});
//# sourceMappingURL=index.js.map

/***/ })
/******/ ]);
});
//# sourceMappingURL=index.js.map